import { r, cloneObj, } from '../tools/utils';

/* 发型款式 */
export const generalForeHairTemplates = [
    {
        name: '混混',
        center: [500,228],
        outline:[[0,398,216],[1,404,160],[1,436,206],[1,466,140],[1,492,194],[1,542,134],[1,550,190],[1,602,144],[1,600,190],[1,660,158],[1,640,202],[1,708,176],[1,668,218],[1,772,224],[1,730,252],[1,794,276],[1,742,286],[1,796,358],[1,734,322],[1,770,404],[1,714,358],[1,752,432],[1,682,382],[1,698,434],[1,636,396],[1,656,458],[1,586,390],[1,600,464],[1,514,388],[1,474,472],[1,458,396],[1,390,462],[1,406,406],[1,356,466],[1,360,406],[1,304,450],[1,332,396],[1,260,446],[1,286,384],[1,228,420],[1,276,338],[1,196,324],[1,266,302],[1,226,252],[1,296,254],[1,286,202],[1,352,226],[1,342,176],[1,398,216],[0,474,328]]
    },
    {
        name: '魔王',
        center: [500,262],
        outline:[[0,500,184],[2,446,184,448,164],[2,388,192,388,224],[2,392,248,362,212],[2,328,268,322,232],[2,280,292,282,316],[2,210,300,266,332],[2,216,360,286,376],[2,216,376,264,388],[2,238,412,234,520],[2,256,432,268,508],[2,300,460,268,564],[2,296,504,350,644],[2,328,560,366,526],[2,366,528,366,456],[2,416,500,412,496],[2,442,464,432,424],[2,488,428,456,472],[2,492,468,500,428],[0,500,184],[2,554,184,572,168],[2,616,192,620,220],[2,608,248,656,232],[2,672,268,710,260],[2,724,292,710,324],[2,794,300,734,332],[2,784,360,730,368],[2,784,376,740,388],[2,762,412,766,520],[2,744,432,730,504],[2,704,460,724,536],[2,708,504,660,624],[2,672,560,638,512],[2,634,528,618,444],[2,584,500,608,532],[2,558,464,580,428],[2,516,428,520,476],[2,508,468,500,428],[0,500,308]]
    },
    {
        name: '渣男',
        center: [500,188],
        outline: [[0,500,166],[2,332,140,284,332],[2,280,442,254,542],[2,280,516,288,506],[2,290,562,268,676],[2,318,644,340,590],[2,360,574,374,638],[2,362,540,364,452],[2,400,348,416,340],[2,452,328,499,328],[0,500,166],[2,668,140,716,332],[2,718,442,746,542],[2,718,516,712,506],[2,708,562,728,676],[2,682,644,660,590],[2,640,574,626,638],[2,638,540,636,452],[2,600,348,584,340],[2,548,328,501,328]],
        fixed: true,
    },
    {
        name: '短发1',
        center: [500,218],
        outline:[[0,492,176],[2,370,196,302,276],[2,260,364,290,468],[2,310,552,360,644],[2,362,468,386,352],[2,378,408,374,448],[2,424,420,480,372],[2,480,376,450,412],[2,530,376,538,352],[2,538,364,496,420],[2,542,412,584,352],[2,588,384,572,408],[2,610,380,618,336],[2,618,352,626,640],[2,728,500,718,308],[2,668,196,572,184],[2,508,168,492,176],[0,496,292]]
    },
    {
        name: '短发2',
        center: [500,218],
        outline:[[0,484,176],[2,380,164,308,244],[2,254,316,284,394],[2,294,434,342,490],[2,342,446,352,352],[2,356,410,348,432],[2,400,420,466,372],[2,466,376,430,412],[2,530,376,538,352],[2,538,364,488,420],[2,542,412,592,352],[2,596,384,576,408],[2,626,380,646,352],[2,670,414,666,482],[2,692,446,712,406],[2,782,188,560,152],[2,494,152,484,176],[0,488,292]]
    },
    {
        name: '短发3',
        center: [500,218],
        outline:[[0,484,176],[2,392,164,320,264],[2,272,358,284,416],[2,300,462,364,496],[2,340,468,366,352],[2,358,408,358,436],[2,408,420,470,372],[2,470,376,438,412],[2,526,376,534,352],[2,534,364,488,420],[2,538,412,584,352],[2,588,384,568,408],[2,614,380,634,352],[2,676,468,632,488],[2,704,482,720,404],[2,730,328,684,246],[2,648,190,570,166],[2,528,156,484,176],[0,488,292]]
    },
    {
        name: '头盔',
        center: [500,236],
        outline:[[0,500,436],[2,408,408,356,428],[2,324,480,324,616],[2,246,404,290,290],[2,332,196,500,182],[0,500,436],[2,586,408,638,424],[2,672,486,666,626],[2,754,404,708,278],[2,646,182,500,182]],
        fixed: true,
    },
    {
        name: '青春',
        center: [500,220],
        outline:[[0,500,190],[2,352,180,286,320],[2,266,404,216,428],[2,252,446,294,424],[2,274,484,236,498],[2,278,502,320,490],[2,294,548,264,562],[2,304,552,324,536],[2,326,566,294,600],[2,328,594,360,544],[2,344,610,328,632],[2,406,578,388,410],[2,448,352,499,356],[0,500,190],[2,646,180,714,320],[2,734,404,784,428],[2,748,446,706,424],[2,726,484,764,498],[2,722,502,678,490],[2,706,548,736,562],[2,696,552,676,536],[2,674,566,706,600],[2,670,594,640,544],[2,654,610,670,632],[2,594,578,610,410],[2,552,352,501,356],[0,500,286]],
        fixed: true, // 不随机造型
    },
    {
        name: '后仰1',
        center: [500,155],
        outline:[[0,500,136],[2,376,140,328,206],[2,292,260,300,364],[2,336,280,380,256],[2,418,226,500,216],[0,499,136],[2,630,136,672,200],[2,712,268,698,364],[2,672,290,628,254],[2,582,226,501,216]],
        fixed: true,
    },
    {
        name: '后仰2',
        center: [500,162],
        outline:[[0,500,154],[2,370,158,320,220],[2,278,266,292,346],[2,300,368,304,384],[2,308,348,340,348],[2,342,304,384,306],[2,396,254,430,268],[2,448,234,470,248],[2,484,230,500,240],[0,500,154],[2,630,158,680,220],[2,722,266,708,346],[2,700,368,696,384],[2,692,348,660,348],[2,658,304,616,306],[2,604,254,570,268],[2,552,234,530,248],[2,516,230,500,240]],
        fixed: true,
    },
    {
        name: '后仰3',
        center: [500,162],
        outline:[[0,500,154],[2,370,158,320,220],[2,278,266,292,346],[2,300,368,306,394],[1,316,326],[1,356,352],[1,348,290],[1,390,318],[1,386,256],[1,422,286],[1,420,236],[1,450,262],[1,454,224],[1,478,250],[1,486,216],[1,500,244],[0,500,154],[2,630,158,680,220],[2,722,266,708,346],[2,700,368,694,394],[1,684,326],[1,644,352],[1,652,290],[1,610,318],[1,614,256],[1,578,286],[1,580,236],[1,550,262],[1,546,224],[1,522,250],[1,514,216],[1,500,244]],
        fixed: true,
    },
    {
        name: '颓废',
        center: [490,142],
        outline:[[0,500,84],[2,308,96,258,304],[2,224,436,254,636],[2,252,610,256,538],[2,264,616,278,652],[2,272,608,268,562],[2,286,626,298,642],[2,294,602,280,536],[2,296,616,322,650],[2,300,590,298,538],[2,296,516,304,392],[2,294,524,302,558],[2,306,532,310,512],[2,310,520,334,544],[2,316,480,316,462],[2,324,500,348,528],[2,340,404,374,320],[2,376,304,368,282],[2,388,376,404,384],[2,400,344,404,328],[2,404,354,428,388],[2,420,330,416,260],[2,416,326,482,398],[2,454,360,456,324],[2,468,374,502,404],[2,498,324,504,270],[2,494,350,548,404],[2,546,318,520,282],[2,546,330,558,374],[2,578,318,556,280],[2,566,314,576,360],[2,588,348,588,284],[2,644,390,614,510],[2,634,476,630,442],[2,640,466,632,514],[2,668,462,652,442],[2,670,474,654,534],[2,678,500,676,482],[2,678,516,678,524],[2,678,430,670,380],[2,686,480,676,542],[2,670,582,644,626],[2,680,596,694,552],[2,712,480,694,398],[2,716,534,692,650],[2,718,600,726,542],[2,726,600,716,642],[2,742,598,742,548],[2,746,600,734,648],[2,774,526,726,304],[2,668,92,500,84]],
        fixed: true,
    },
    {
        name: '乖巧',
        center: [500,255],
        outline: [[0,550,466],[2,512,442,502,394],[2,512,418,524,434],[2,550,456,590,464],[2,628,472,600,530],[2,632,496,626,466],[2,640,538,642,548],[2,640,508,642,468],[2,650,498,650,532],[2,660,500,644,428],[2,666,536,666,608],[2,708,520,674,436],[2,694,490,684,506],[2,746,534,792,534],[2,712,494,710,464],[2,724,516,828,512],[2,744,470,724,420],[2,760,488,820,490],[2,722,450,730,378],[2,724,290,656,236],[2,598,192,502,194],[0,470,480],[0,550,466],[2,496,448,498,394],[2,482,426,476,438],[2,466,458,410,464],[2,372,472,400,530],[2,368,496,374,466],[2,360,538,358,548],[2,360,508,358,468],[2,350,498,350,532],[2,340,500,356,428],[2,334,536,334,608],[2,292,520,326,436],[2,306,490,316,506],[2,254,534,208,534],[2,288,494,290,464],[2,276,516,172,512],[2,256,470,276,420],[2,240,488,180,490],[2,278,450,268,378],[2,276,290,348,228],[2,394,198,502,194],[0,530,480]],
        fixed: true,
    },
    {
        name: '流浪汉',
        center: [500,95],
        outline: [[0,500,58],[2,374,42,284,190],[2,226,316,224,404],[2,232,364,244,326],[2,242,376,240,400],[2,242,358,262,320],[2,256,362,252,392],[2,274,348,276,334],[2,268,376,274,412],[2,278,364,286,358],[2,288,424,288,424],[2,298,382,306,376],[2,306,386,306,428],[2,310,392,326,356],[2,316,394,344,484],[2,326,334,348,304],[2,336,342,360,384],[2,340,326,372,296],[2,362,348,360,358],[2,368,338,404,288],[2,406,314,388,338],[2,442,298,442,288],[0,500,58],[2,626,42,712,190],[2,772,316,776,404],[2,764,364,752,326],[2,758,376,760,400],[2,758,358,738,320],[2,740,362,748,392],[2,726,348,724,334],[2,728,376,726,412],[2,722,364,714,358],[2,712,424,712,424],[2,702,382,694,376],[2,694,386,694,428],[2,686,392,674,356],[2,684,394,644,482],[2,674,334,642,282],[2,662,342,634,362],[2,660,326,628,308],[2,632,336,630,340],[2,632,318,594,298],[2,586,318,614,334],[2,558,298,558,288],[2,554,310,572,342],[2,546,310,534,278],[2,512,298,538,350],[2,506,296,500,266],[2,496,310,526,334],[2,484,310,468,276],[2,470,308,466,322],[2,454,282,456,286],[2,430,344,432,330],[2,436,296,442,288],[0,174,208]],
        fixed: true,
    },
    {
        name: '班长',
        center: [500,220],
        outline:[[0,500,206],[2,300,182,270,352],[2,252,480,290,574],[2,306,624,290,666],[2,310,650,312,594],[2,318,628,314,664],[2,330,606,334,584],[2,326,626,330,652],[2,338,608,348,590],[2,348,612,350,642],[2,358,606,358,586],[2,362,612,366,642],[2,366,604,362,544],[2,358,478,372,452],[2,388,414,432,388],[2,390,408,382,476],[2,374,530,422,618],[2,386,536,404,474],[2,414,432,456,396],[2,508,364,536,370],[2,572,420,640,462],[2,664,494,638,560],[2,612,610,600,616],[2,640,594,646,560],[2,652,586,650,644],[2,652,602,664,568],[2,660,600,664,646],[2,670,604,670,586],[2,666,620,694,652],[2,678,626,686,588],[2,678,624,720,658],[2,696,576,708,538],[2,748,372,692,274],[2,600,148,500,206]],
        fixed:true,
    },
    {
        name: '魏协',
        center: [500,175],
        outline: [[0,516,164],[2,470,132,396,140],[2,454,164,426,178],[2,360,134,298,204],[2,352,204,342,240],[2,300,264,282,224],[2,266,272,284,294],[2,276,334,236,358],[2,286,390,240,414],[2,248,432,262,454],[2,248,478,240,448],[2,242,506,268,508],[2,232,570,280,598],[2,266,582,276,550],[2,276,636,346,618],[2,308,582,316,536],[2,306,570,378,612],[2,340,566,352,516],[2,376,476,356,436],[2,386,454,370,408],[2,414,424,400,352],[2,404,400,420,416],[2,426,340,496,342],[0,516,164],[2,534,146,488,106],[2,570,106,592,156],[2,648,118,724,206],[2,688,190,644,224],[2,716,176,754,308],[2,744,280,696,292],[2,766,292,764,386],[2,690,362,754,416],[2,716,416,730,454],[2,744,478,752,448],[2,750,506,724,508],[2,760,570,712,598],[2,726,582,716,550],[2,716,636,646,618],[2,684,582,676,536],[2,686,570,636,594],[2,652,566,640,516],[2,616,476,636,436],[2,606,454,622,408],[2,578,424,594,352],[2,588,400,572,416],[2,562,338,496,342]],
        fixed: true,
    },
];
export const maleForeHairTemplates = [
    {
        name: '普信男1',
        center: [500,272],
        outline:[[0,488,260],[2,440,224,432,170],[2,424,236,432,260],[2,378,210,356,188],[2,338,222,372,260],[2,318,248,274,220],[2,308,266,338,286],[2,278,306,220,264],[2,238,306,280,322],[2,252,348,160,334],[2,208,374,264,376],[2,226,404,162,388],[2,202,418,240,420],[2,210,456,192,452],[2,220,504,266,454],[2,252,502,244,504],[2,280,518,300,476],[2,280,544,362,562],[2,324,520,340,474],[2,328,518,372,546],[2,356,498,376,466],[2,376,510,404,524],[2,392,492,414,460],[2,460,442,504,474],[2,554,440,594,462],[2,604,494,596,534],[2,634,496,616,456],[2,630,514,624,546],[2,658,500,638,464],[2,668,504,662,532],[2,682,500,660,452],[2,688,512,664,560],[2,730,506,698,458],[2,712,494,764,502],[2,728,462,720,426],[2,756,440,776,414],[2,730,394,726,380],[2,736,388,786,376],[2,756,376,716,334],[2,750,336,794,310],[2,738,310,724,288],[2,748,274,748,222],[2,714,264,688,256],[2,712,242,704,206],[2,678,248,636,244],[2,668,210,644,182],[2,614,234,556,250],[2,550,222,590,176],[2,532,230,520,262],[2,502,232,504,170],[2,472,222,484,254],[0,474,370]]
    },
    {
        name: '普信男2',
        center: [500,258],
        outline:[[0,488,220],[2,462,166,368,146],[2,406,182,428,220],[2,372,156,288,178],[2,330,172,366,220],[2,300,182,216,224],[2,256,206,330,254],[2,226,244,188,268],[2,204,256,268,300],[2,208,320,160,298],[2,168,380,252,370],[2,212,402,160,400],[2,204,444,254,424],[2,196,472,240,528],[2,248,482,284,464],[2,274,506,298,570],[2,282,512,310,476],[2,292,512,324,592],[2,324,536,338,486],[2,350,544,328,572],[2,374,534,368,484],[2,370,524,404,528],[2,382,510,396,476],[2,430,450,498,474],[2,566,448,598,476],[2,610,520,596,524],[2,620,528,622,472],[2,614,550,668,542],[2,632,510,644,482],[2,668,536,652,594],[2,696,532,670,472],[2,698,542,678,552],[2,730,516,686,444],[2,720,486,758,458],[2,740,476,712,406],[2,746,436,768,430],[2,750,412,730,368],[2,742,402,792,370],[2,746,366,738,324],[2,784,320,808,334],[2,778,290,736,274],[2,804,240,754,178],[2,762,210,704,232],[2,742,174,694,142],[2,708,172,662,216],[2,676,150,642,122],[2,634,206,580,218],[2,576,182,604,148],[2,534,166,520,222],[2,502,168,540,138],[2,476,168,484,212],[0,472,364]]
    },
    {
        name: '普信男3',
        center: [500,288],
        outline:[[0,584,252],[2,512,210,480,214],[2,420,222,376,176],[2,408,214,432,232],[2,356,244,320,210],[2,348,240,380,252],[2,340,248,304,278],[2,260,302,232,306],[2,248,316,268,316],[2,252,362,212,382],[2,232,382,248,366],[2,238,390,234,412],[2,230,468,190,448],[2,212,492,244,470],[2,246,498,212,500],[2,216,512,270,498],[2,244,520,244,570],[2,280,534,284,546],[2,296,594,296,616],[2,314,566,310,524],[2,320,588,352,604],[2,332,568,358,488],[2,352,534,384,546],[2,376,520,406,474],[2,388,512,418,544],[2,424,500,456,466],[2,444,496,454,528],[2,452,492,484,462],[2,524,470,524,524],[2,548,462,530,450],[2,560,494,564,532],[2,592,488,586,464],[2,600,458,588,558],[2,634,492,612,464],[2,640,470,622,596],[2,680,504,650,460],[2,668,466,658,592],[2,730,488,648,350],[2,732,508,670,642],[2,756,546,736,460],[2,764,484,766,510],[2,776,466,752,440],[2,776,446,808,410],[2,786,408,768,390],[2,762,376,786,362],[2,758,350,748,328],[2,742,292,700,278],[2,722,272,754,298],[2,728,232,656,264],[2,700,244,752,244],[2,680,202,608,256],[2,676,210,628,156],[2,620,206,588,252],[2,574,208,604,170],[2,566,184,562,216],[2,562,250,580,252]]
    },
    {
        name: '普信男4',
        center: [500,268],
        outline:[[0,490,204],[2,496,188,342,142],[2,404,180,440,218],[2,332,172,306,132],[2,314,182,344,216],[2,306,222,260,174],[2,276,248,300,252],[2,240,250,204,222],[2,210,318,292,296],[2,234,322,136,288],[2,188,368,264,350],[2,212,398,216,482],[2,218,534,180,554],[2,216,544,236,496],[2,264,426,300,404],[2,242,446,280,550],[2,294,448,366,416],[2,280,454,336,598],[2,330,498,372,448],[2,358,488,404,538],[2,378,484,414,428],[2,398,474,444,488],[2,424,484,440,436],[2,454,398,500,418],[2,572,400,594,416],[2,618,432,622,462],[2,642,422,628,402],[2,644,460,632,518],[2,676,436,664,392],[2,692,468,660,570],[2,724,468,688,362],[2,712,418,702,504],[2,784,412,712,306],[2,748,350,750,388],[2,780,300,714,250],[2,760,272,764,278],[2,734,230,682,218],[2,736,224,760,244],[2,714,182,630,210],[2,722,190,762,196],[2,706,160,598,202],[2,616,180,674,158],[2,584,168,552,216],[2,582,146,638,132],[2,534,142,530,216],[2,516,128,556,112],[2,468,136,488,202]]
    },
    {
        name: '刺猬',
        center: [500,118],
        outline:[[0,500,-20],[1,458,100],[1,380,-16],[1,368,104],[1,266,86],[1,294,182],[1,178,226],[1,276,264],[1,224,356],[1,290,356],[1,226,436],[1,296,424],[2,280,458,244,488],[2,268,492,284,482],[2,286,500,266,540],[2,288,518,290,520],[2,308,552,292,606],[2,326,486,326,506],[1,348,628],[1,370,496],[1,402,514],[1,366,394],[1,400,386],[2,370,340,386,290],[2,454,244,500,254],[0,500,-20],[1,542,100],[1,620,-16],[1,632,104],[1,734,86],[1,706,182],[1,822,226],[1,724,264],[1,776,356],[1,708,356],[1,772,436],[1,704,424],[2,718,458,754,488],[2,728,492,716,482],[2,714,500,734,540],[2,712,518,708,520],[2,692,552,704,612],[2,674,486,662,546],[1,640,610],[1,640,440],[1,608,514],[1,634,394],[1,600,386],[2,628,340,614,290],[2,546,244,500,254]],
        fixed: true,
    },
    {
        name: '爆种',
        center: [500,208],
        outline:[[0,500,184],[2,402,148,432,198],[2,360,168,388,134],[2,332,226,304,184],[2,250,260,292,332],[2,246,344,252,294],[2,192,382,290,378],[2,236,458,246,478],[2,236,470,286,416],[2,290,512,272,554],[2,296,520,320,516],[2,310,542,352,584],[2,352,504,366,484],[2,372,454,352,456],[2,402,458,402,406],[2,432,412,456,446],[2,460,400,472,370],[2,488,394,500,432],[0,500,184],[2,604,148,576,122],[2,644,168,620,206],[2,672,226,708,160],[2,754,260,696,274],[2,758,344,780,282],[2,814,382,710,386],[2,768,458,772,488],[2,768,470,720,462],[2,714,512,730,554],[2,708,520,688,516],[2,696,542,644,590],[2,656,504,636,478],[2,632,454,638,452],[2,604,458,614,416],[2,572,412,548,446],[2,548,400,524,370],[2,516,394,500,432],[0,500,294]]
    },
    {
        name: '卷毛',
        center: [500,258],
        outline:[[0,500,240],[2,482,182,448,226],[2,416,188,398,238],[2,356,204,336,268],[2,300,278,308,320],[2,264,320,268,374],[2,242,394,242,442],[2,218,458,278,462],[2,278,494,334,448],[2,326,490,366,460],[2,392,500,440,450],[2,452,482,482,446],[2,490,454,500,442],[0,500,240],[2,518,182,552,226],[2,584,188,602,238],[2,644,204,664,268],[2,700,278,692,320],[2,736,320,732,374],[2,758,394,758,442],[2,782,458,722,462],[2,722,494,666,448],[2,674,490,634,460],[2,608,500,560,450],[2,548,482,518,446],[2,510,454,500,442]]
    },
    {
        name: '超人',
        center: [500,248],
        outline:[[0,458,416],[2,358,420,342,440],[2,334,598,336,584],[2,320,622,282,276],[2,310,420,328,288],[2,358,132,538,64],[2,406,166,386,254],[2,450,114,600,80],[2,490,120,454,256],[2,520,120,638,92],[2,536,132,542,216],[2,556,158,650,128],[2,590,162,574,240],[2,590,182,694,122],[2,646,156,604,252],[2,622,210,708,188],[2,662,204,640,278],[2,666,218,712,198],[2,682,210,674,300],[2,694,408,730,316],[2,662,616,668,570],[2,658,456,646,408],[2,536,388,458,416]]
    },
    {
        name: '草',
        center: [500,308],
        outline:[[0,490,494],[2,606,404,656,518],[2,684,464,684,568],[2,714,372,742,330],[2,690,320,646,334],[2,654,300,668,298],[2,608,300,552,316],[2,550,290,580,274],[2,510,286,466,310],[2,466,282,482,274],[2,432,290,398,310],[2,384,288,384,280],[2,356,298,328,328],[2,310,310,306,290],[2,290,350,312,592],[2,334,444,344,536],[2,380,414,490,494]]
    },
    {
        name: '油腻',
        center: [500,160],
        outline: [[0,532,324],[2,458,318,364,380],[2,302,402,202,400],[2,278,370,332,306],[2,298,356,224,352],[2,264,326,316,264],[2,302,294,208,310],[2,260,264,294,208],[2,294,230,186,258],[2,242,230,270,190],[2,344,118,502,134],[2,588,150,598,236],[2,588,302,532,324],[2,566,348,638,330],[2,670,326,692,382],[2,714,426,750,426],[2,704,406,714,354],[2,708,404,750,410],[2,714,392,722,338],[2,716,382,750,384],[2,718,366,736,318],[2,740,248,676,184],[2,592,118,574,174],[2,638,260,532,324]],
    },
    {
        name: '大牌',
        center: [500,293],
        outline: [[0,464,284],[2,420,252,368,288],[2,334,304,296,296],[2,310,306,346,310],[2,282,344,264,374],[2,250,394,198,416],[2,224,416,272,382],[2,258,424,244,488],[2,238,504,208,516],[2,244,510,254,484],[2,250,514,276,582],[2,290,614,268,642],[2,282,628,298,588],[2,312,618,320,632],[2,330,648,336,698],[2,328,614,352,670],[2,348,656,346,628],[2,350,564,372,530],[2,412,476,500,468],[2,424,520,436,394],[2,406,516,410,520],[2,432,496,494,504],[2,536,490,496,442],[2,510,466,544,488],[2,562,512,504,524],[2,632,516,516,470],[2,596,484,628,540],[2,662,614,626,686],[2,660,668,660,628],[2,654,674,656,716],[2,664,640,700,598],[2,720,570,724,536],[2,730,570,752,584],[2,728,534,728,470],[2,734,416,688,376],[2,738,432,788,444],[2,682,362,644,320],[2,656,328,698,336],[2,620,314,592,290],[2,618,298,686,268],[2,654,276,620,268],[2,580,260,528,286],[2,540,260,564,250],[2,500,262,490,274],[2,470,256,374,232],[2,444,254,460,280]]
    },
    {
        name: '男主角',
        center: [500,205],
        outline:[[0,516,180],[2,446,148,410,94],[2,398,150,416,194],[2,358,194,260,110],[2,284,196,328,224],[2,206,238,166,172],[2,212,274,246,286],[2,140,296,114,278],[2,136,348,236,362],[2,168,394,114,398],[2,168,424,226,426],[2,210,474,190,494],[2,294,442,252,454],[2,264,466,230,520],[2,304,408,284,546],[2,302,506,298,466],[2,306,508,342,550],[2,322,478,332,448],[2,404,432,450,424],[2,420,450,420,490],[2,452,446,500,424],[2,528,416,562,420],[2,618,448,618,464],[2,622,442,598,416],[2,628,406,642,418],[2,676,444,646,522],[2,694,410,670,552],[2,714,410,696,412],[2,708,434,736,454],[2,722,432,722,410],[2,770,424,818,454],[2,786,380,768,356],[2,806,348,864,296],[2,780,290,770,274],[2,800,252,824,178],[2,758,210,742,224],[2,772,204,784,146],[2,744,160,642,178],[2,618,160,710,90],[2,548,116,510,178]],
        fixed: true,
    },
    {
        name: '杂草',
        center: [500,263],
        outline: [[0,418,210],[2,390,176,330,164],[2,380,204,372,246],[2,350,258,254,208],[2,254,254,292,286],[2,230,314,148,296],[2,168,338,256,364],[2,208,414,138,402],[2,190,434,294,412],[2,260,466,238,476],[2,284,470,330,450],[2,318,472,286,504],[2,348,478,386,456],[2,406,466,352,512],[2,436,444,430,446],[2,420,472,378,514],[2,468,466,482,460],[2,532,454,480,508],[2,556,444,556,450],[2,576,450,594,502],[2,590,440,596,438],[2,596,430,656,500],[2,604,422,630,438],[2,630,434,724,502],[2,644,410,694,426],[2,722,426,776,434],[2,700,390,702,362],[2,764,402,850,384],[2,722,346,702,306],[2,750,294,804,240],[2,724,254,658,264],[2,698,224,764,132],[2,686,172,576,214],[2,592,158,590,96],[2,558,136,506,200],[2,498,174,496,94],[2,462,136,454,208],[2,434,164,416,148],[2,428,200,418,210]]
    },
    {
        name: '开分',
        center: [500,263],
        outline: [[0,500,230],[2,420,218,350,266],[2,244,350,246,432],[2,246,510,274,550],[2,300,592,290,642],[2,300,634,310,552],[2,308,582,306,630],[2,334,592,330,550],[2,336,602,334,634],[2,342,598,350,552],[2,376,608,374,630],[2,368,562,372,490],[2,364,518,392,582],[2,372,502,384,484],[2,382,508,394,520],[2,386,470,414,422],[2,454,392,500,392],[0,500,230],[2,580,218,650,266],[2,756,350,754,432],[2,754,510,726,550],[2,698,592,710,642],[2,698,634,688,552],[2,692,582,694,630],[2,666,592,670,550],[2,664,602,666,634],[2,658,598,650,552],[2,624,608,626,630],[2,632,562,628,490],[2,636,518,608,582],[2,628,502,616,484],[2,618,508,604,520],[2,614,470,592,424],[2,560,394,500,392]],
        fixed: true,
    },
    {
        name: '公子',
        center: [500,243],
        outline: [[0,500,208],[2,424,204,368,232],[2,300,282,288,394],[2,272,538,284,694],[2,288,772,300,834],[2,310,782,310,760],[2,316,810,320,824],[2,320,786,324,750],[2,336,796,336,828],[2,344,828,344,750],[2,356,786,356,806],[2,356,778,356,754],[2,364,800,376,834],[2,364,750,364,750],[2,350,688,356,616],[2,356,582,362,546],[2,368,484,400,446],[2,434,394,500,370],[0,500,208],[2,576,204,632,232],[2,700,282,712,394],[2,728,538,716,694],[2,712,772,700,834],[2,690,782,690,760],[2,684,810,680,824],[2,680,786,676,750],[2,664,796,664,828],[2,656,828,656,750],[2,644,786,644,806],[2,644,778,644,754],[2,636,800,624,834],[2,636,750,636,750],[2,650,688,644,616],[2,644,582,638,546],[2,632,484,600,446],[2,566,394,500,370]],
        fixed: true,
    },
    {
        name: '南瓜',
        center: [500,187],
        outline: [[0,500,184],[2,492,218,502,262],[2,490,226,498,184],[2,386,172,324,224],[2,246,294,276,360],[2,304,392,368,392],[2,316,338,388,244],[2,324,334,362,386],[2,394,398,418,374],[2,402,306,444,248],[2,408,294,416,370],[2,452,374,468,350],[2,454,306,472,278],[2,456,300,466,344],[2,492,356,508,344],[2,492,308,504,288],[2,494,326,510,342],[2,536,364,554,350],[2,542,300,546,280],[2,536,316,554,348],[2,582,364,608,358],[2,598,300,580,254],[2,600,298,602,352],[2,620,380,664,370],[2,664,308,632,242],[2,668,308,660,368],[2,676,386,720,358],[2,756,266,676,212],[2,600,172,496,184]]
    },
    {
        name: '狂',
        center: [500,165],
        outline: [[0,500,122],[2,448,64,450,16],[2,400,94,428,132],[2,344,132,364,70],[2,250,174,350,198],[2,222,250,234,150],[2,224,202,262,288],[2,224,348,202,276],[2,226,362,266,356],[2,218,424,242,504],[2,252,412,264,412],[2,262,482,282,550],[2,274,490,288,436],[2,290,450,318,582],[2,320,488,328,444],[2,350,506,350,558],[2,366,508,350,460],[2,356,448,380,542],[2,348,414,368,370],[2,380,344,382,332],[2,424,334,410,324],[2,458,328,440,306],[2,462,340,482,306],[2,482,344,510,380],[2,490,334,500,316],[0,500,122],[2,552,64,670,52],[2,600,94,570,132],[2,654,132,786,198],[2,760,190,706,188],[2,778,250,812,326],[2,780,288,738,288],[2,776,348,790,408],[2,772,362,734,356],[2,780,424,750,458],[2,748,412,736,412],[2,738,482,708,532],[2,726,490,718,436],[2,706,450,702,548],[2,678,488,668,444],[2,646,506,646,558],[2,644,492,646,448],[2,630,470,618,536],[2,658,422,632,370],[2,608,348,616,328],[2,574,334,574,328],[2,572,340,556,316],[2,538,340,470,382],[2,530,348,506,314],[2,494,310,500,340]]
    },
    {
        name: '侠',
        center: [500,200],
        outline: [[0,500,140],[2,326,138,278,318],[2,254,386,282,664],[2,290,752,276,802],[2,258,842,204,890],[2,258,874,282,836],[2,276,864,244,886],[2,376,838,352,660],[2,328,520,350,414],[2,342,474,352,528],[2,376,618,416,654],[2,386,610,378,564],[2,368,474,394,408],[2,450,368,500,420],[0,500,140],[2,674,138,722,318],[2,746,386,718,664],[2,710,752,724,802],[2,742,842,796,890],[2,742,874,718,836],[2,724,864,756,886],[2,624,838,646,660],[2,672,520,650,414],[2,658,474,646,528],[2,624,618,584,654],[2,614,610,622,564],[2,632,474,604,408],[2,550,368,500,420]],
        fixed: true,
    },
    {
        name: '军师',
        center: [500,260],
        outline:[[0,500,170],[2,466,170,446,178],[2,394,190,342,178],[2,362,190,380,206],[2,300,212,290,230],[2,310,232,336,236],[2,324,254,298,276],[2,278,300,240,332],[2,284,314,266,322],[2,252,348,248,384],[2,218,380,206,364],[2,226,410,248,420],[2,224,440,226,464],[2,236,444,260,462],[2,288,492,264,516],[2,310,498,276,554],[2,306,548,328,590],[2,316,534,324,500],[2,328,542,358,544],[2,336,504,332,470],[2,348,502,376,526],[2,352,504,352,464],[2,366,496,414,504],[2,392,498,392,420],[2,400,486,444,494],[2,420,460,432,418],[2,432,450,456,470],[2,458,416,466,414],[0,500,170],[2,534,170,554,178],[2,604,190,640,142],[2,638,190,620,206],[2,698,212,728,252],[2,688,232,662,236],[2,676,254,702,276],[2,722,300,760,326],[2,716,314,734,322],[2,748,348,752,380],[2,766,376,780,364],[2,772,410,752,420],[2,776,440,772,464],[2,764,444,740,462],[2,718,492,746,514],[2,698,498,724,554],[2,692,552,670,590],[2,684,534,666,466],[2,658,498,644,516],[2,660,460,644,442],[2,642,464,628,502],[2,636,458,602,418],[2,626,450,602,496],[2,600,442,582,408],[2,518,422,504,494],[2,500,440,508,406],[2,494,430,488,492],[2,458,444,466,414]],
        fixed:true,
    },
    {
        name: '锁藏',
        center: [500,255],
        outline: [[0,500,240],[2,416,220,362,266],[2,392,262,394,262],[2,322,278,344,286],[2,358,286,366,286],[2,300,288,288,352],[2,316,328,332,330],[2,236,372,268,442],[2,280,380,324,372],[2,220,414,306,606],[2,274,538,316,410],[2,286,460,328,630],[2,310,442,336,436],[2,324,470,356,678],[2,350,482,356,448],[2,368,490,388,508],[2,382,420,398,394],[2,424,344,502,348],[0,498,240],[2,584,220,638,266],[2,608,262,606,262],[2,678,278,656,286],[2,642,286,634,286],[2,700,288,712,352],[2,684,328,668,330],[2,764,372,732,442],[2,720,380,676,372],[2,780,414,694,606],[2,726,538,684,410],[2,714,460,672,630],[2,690,442,664,436],[2,676,470,644,678],[2,650,482,644,448],[2,632,490,612,508],[2,618,420,602,394],[2,576,344,500,348]],
        fixed: true,
    },
    {
        name: '李小灰',
        center: [510,255],
        outline: [[0,520,196],[2,510,182,488,186],[2,432,194,388,142],[2,420,184,442,204],[2,368,218,332,180],[2,360,212,392,226],[2,352,222,316,254],[2,272,282,242,286],[2,260,296,280,296],[2,264,348,224,370],[2,242,370,264,356],[2,264,392,248,418],[2,224,462,196,444],[2,224,492,280,458],[2,236,504,188,500],[2,280,566,296,498],[2,286,562,230,558],[2,300,596,314,540],[2,318,584,346,636],[2,344,592,352,510],[2,356,574,388,582],[2,362,538,398,452],[2,400,512,350,546],[2,426,530,462,430],[2,464,518,560,566],[2,506,506,520,460],[2,528,494,486,550],[2,572,494,550,426],[2,598,460,608,554],[2,638,530,646,492],[2,668,524,670,632],[2,698,564,686,524],[2,708,580,754,550],[2,740,552,680,498],[2,726,534,792,550],[2,740,536,720,470],[2,742,530,830,474],[2,750,486,730,422],[2,778,486,824,432],[2,770,412,742,352],[2,782,366,800,418],[2,784,316,730,300],[2,764,320,798,314],[2,760,302,722,274],[2,710,256,686,248],[2,710,254,748,248],[2,728,250,710,238],[2,696,224,658,228],[2,688,220,722,184],[2,668,212,604,198],[2,642,178,662,126],[2,616,178,560,198],[2,554,178,520,156],[2,498,142,476,114],[2,496,168,512,176],[2,520,190,520,196]],
        fixed: true,
    },
    {
        name: '古房十',
        center: [500,260],
        outline: [[0,500,218],[2,456,202,370,146],[2,456,250,430,272],[2,298,276,376,112],[2,230,238,284,348],[2,232,330,252,256],[2,180,382,248,420],[2,182,474,212,536],[2,222,508,248,492],[2,230,532,258,572],[2,278,482,286,632],[2,310,508,340,698],[2,342,654,370,600],[2,324,558,386,552],[2,320,506,404,488],[2,386,412,500,406],[0,500,218],[2,576,216,516,152],[2,670,230,646,284],[2,702,276,622,108],[2,776,242,716,348],[2,766,330,748,236],[2,820,382,752,420],[2,814,474,782,538],[2,778,508,752,492],[2,770,532,734,570],[2,722,482,694,628],[2,688,508,660,698],[2,658,654,628,600],[2,676,558,614,552],[2,678,506,596,488],[2,614,412,500,406]],
        fixed: true,
    },
    {
        name: '王野',
        center: [500,275],
        outline: [[0,558,226],[2,500,206,458,222],[2,386,238,332,306],[2,310,344,290,386],[2,256,488,314,602],[2,302,564,306,516],[2,314,572,332,588],[2,318,554,320,516],[2,324,560,344,576],[2,340,560,340,520],[2,352,560,374,560],[2,366,554,370,504],[2,374,550,416,554],[2,394,546,420,458],[2,404,516,454,534],[2,424,516,436,466],[2,450,420,492,398],[2,520,382,554,404],[2,602,336,558,226],[2,596,344,554,406],[2,600,454,554,534],[2,614,492,600,428],[2,610,492,630,516],[2,630,462,630,488],[2,644,504,648,530],[2,660,500,660,496],[2,668,516,676,542],[2,680,508,680,500],[2,694,538,690,600],[2,740,492,724,408],[2,702,256,558,226]],
        fixed: true,
    },
];
export const femaleForeHairTemplates = [
    {
        name: '文艺1',
        center: [500,228],
        outline:[[0,500,172],[2,368,176,304,288],[2,244,488,280,620],[2,320,688,384,680],[2,344,668,348,444],[2,456,412,500,356],[0,500,172],[2,636,176,704,292],[2,760,488,712,620],[2,684,688,620,660],[2,660,668,652,444],[2,544,412,500,356]],
        fixed: true,
    },
    {
        name: '文艺2',
        center: [497,265],
        outline:[[0,492,222],[2,642,226,700,306],[2,740,396,706,558],[2,728,698,696,722],[2,668,748,618,730],[2,646,730,654,692],[2,660,656,654,620],[2,648,570,638,446],[2,634,468,642,514],[2,630,496,622,476],[2,626,512,630,512],[2,592,486,586,464],[2,580,476,596,506],[2,562,474,566,466],[2,554,476,570,486],[2,542,476,542,450],[2,542,474,548,488],[2,532,472,526,446],[2,522,468,532,482],[2,506,474,498,430],[2,494,468,522,480],[2,482,464,456,362],[2,440,442,366,482],[2,394,468,378,450],[2,364,480,336,494],[2,364,468,364,434],[2,348,462,342,518],[2,340,594,340,656],[2,340,708,380,734],[2,352,746,322,740],[2,288,726,278,694],[2,266,642,290,552],[2,252,382,314,292],[2,368,228,492,222]],
        fixed:true,
    },
    {
        name: '法官',
        center: [500,205],
        outline: [[0,500,172],[2,436,160,370,184],[2,320,206,324,236],[2,256,294,286,344],[2,232,416,274,428],[2,222,504,282,516],[2,244,614,290,634],[2,306,646,324,684],[2,352,630,344,614],[2,390,610,352,512],[2,378,470,382,378],[2,404,404,404,332],[2,428,352,428,320],[2,484,344,500,306],[0,500,172],[2,562,160,630,184],[2,684,206,676,260],[2,744,294,718,366],[2,772,416,726,458],[2,778,504,714,538],[2,756,614,688,680],[2,694,646,684,642],[2,652,630,668,592],[2,610,610,630,546],[2,622,470,626,374],[2,596,404,596,332],[2,572,352,568,320],[2,520,344,500,306]]
    },
    {
        name: '西瓜1',
        center: [500,263],
        outline:[[0,500,394],[2,458,454,368,438],[2,394,482,322,596],[2,360,610,380,662],[2,364,718,374,728],[2,222,602,316,324],[2,348,266,398,246],[2,494,208,596,236],[2,652,252,688,318],[2,798,534,618,724],[2,634,702,622,666],[2,650,604,678,606],[2,608,498,638,436],[2,516,442,500,394]],
        fixed: true, // 不随机造型
    },
    {
        name: '西瓜2',
        center: [500,288],
        outline:[[0,500,446],[2,456,446,424,450],[2,418,520,354,538],[2,320,630,394,712],[2,350,746,368,770],[2,208,626,308,376],[2,342,304,410,278],[2,490,256,568,270],[2,644,292,682,348],[2,812,542,628,762],[2,652,732,602,710],[2,684,616,652,532],[2,592,522,568,446],[2,516,446,500,446]],
        fixed: true, // 不随机造型
    },
    {
        name: '桃太郎',
        center: [500,280],
        outline:[[0,500,242],[2,382,250,310,344],[2,204,556,296,670],[2,316,698,394,738],[2,430,642,360,492],[2,398,444,502,432],[0,500,242],[2,632,252,702,350],[2,800,556,708,670],[2,684,698,610,738],[2,584,650,644,492],[2,604,442,502,432]],
        fixed: true,
    },
    {
        name: '高切',
        center: [500,237],
        outline:[[0,512,190],[2,406,182,320,256],[2,264,350,302,518],[2,332,628,370,666],[2,342,592,374,548],[2,368,432,416,364],[2,402,402,374,460],[2,462,428,480,352],[2,472,408,436,444],[2,504,416,532,360],[2,522,398,502,436],[2,556,406,564,362],[2,566,392,556,400],[2,582,386,606,350],[2,602,400,570,410],[2,644,386,634,358],[2,670,462,628,552],[2,666,592,648,670],[2,804,360,622,202],[2,554,164,512,190]]
    },
    {
        name: '中切',
        center: [500,234],
        outline:[[0,508,190],[2,402,182,316,256],[2,260,350,290,546],[2,306,628,350,764],[2,338,676,376,634],[2,364,432,412,364],[2,398,402,370,460],[2,458,428,476,352],[2,468,408,432,444],[2,500,416,528,360],[2,518,398,498,436],[2,552,406,560,362],[2,562,392,552,400],[2,578,386,602,350],[2,598,400,566,410],[2,640,386,630,358],[2,666,462,626,636],[2,662,676,646,760],[2,800,360,618,202],[2,550,164,508,190]]
    },
    {
        name: '低切',
        center: [500,236],
        outline:[[0,516,190],[2,406,182,316,256],[2,256,350,292,654],[2,304,776,344,964],[2,328,844,380,794],[2,324,432,408,350],[2,370,402,366,460],[2,464,428,486,352],[2,474,408,436,444],[2,508,416,538,360],[2,530,398,506,436],[2,562,406,574,362],[2,576,392,548,428],[2,590,386,618,350],[2,612,400,582,424],[2,656,386,644,368],[2,682,462,624,802],[2,672,824,666,964],[2,794,360,632,208],[2,560,164,516,190]]
    },
    {
        name: '黑长直',
        center: [500,195],
        outline:[[0,500,410],[2,478,408,466,412],[2,460,384,472,352],[2,450,386,462,412],[2,460,408,420,416],[2,414,386,430,358],[2,410,382,414,416],[2,410,412,382,428],[2,378,396,392,360],[2,374,388,376,418],[1,374,862],[2,364,832,352,806],[2,354,828,346,854],[2,344,828,334,798],[2,332,822,324,856],[2,328,822,320,798],[2,314,852,308,856],[2,308,830,304,806],[2,296,834,288,864],[2,290,350,296,358],[2,300,278,352,228],[2,398,184,500,178],[0,500,410],[2,522,408,534,412],[2,540,384,528,352],[2,550,386,538,412],[2,540,408,580,416],[2,586,386,570,358],[2,590,382,586,416],[2,590,412,618,428],[2,622,396,608,360],[2,626,388,624,418],[1,626,862],[2,636,832,648,806],[2,646,828,654,854],[2,656,828,666,798],[2,668,822,676,856],[2,672,822,680,798],[2,686,852,692,856],[2,692,830,696,806],[2,704,834,712,864],[2,710,350,704,358],[2,700,278,648,228],[2,602,184,500,178]],
        fixed: true,
    },
    {
        name: '黑弯直',
        center: [500,195],
        outline:[[0,500,158],[2,392,154,342,230],[2,260,342,300,550],[2,334,680,216,856],[2,274,846,282,854],[2,284,826,300,782],[2,282,818,286,856],[2,310,848,336,862],[2,332,820,344,790],[2,332,828,342,856],[2,340,862,390,850],[2,364,812,370,758],[2,380,664,376,574],[2,366,460,374,416],[2,380,374,400,346],[2,382,382,378,420],[2,388,428,426,416],[2,418,378,434,342],[2,420,384,432,414],[2,444,418,468,410],[2,462,380,474,350],[2,466,380,472,412],[2,484,406,500,406],[0,500,158],[2,608,154,658,230],[2,740,342,700,550],[2,666,680,784,856],[2,726,846,718,854],[2,716,826,700,782],[2,718,818,714,856],[2,690,848,664,862],[2,668,820,656,790],[2,668,828,658,856],[2,660,862,610,850],[2,636,812,630,758],[2,620,664,624,574],[2,634,460,626,416],[2,620,374,600,346],[2,618,382,620,414],[2,612,428,574,416],[2,582,378,566,342],[2,580,384,568,414],[2,556,418,532,410],[2,538,380,526,350],[2,534,380,528,412],[2,516,406,500,406]],
        fixed: true,
    },
    {
        name: '飘动',
        center: [500,136],
        outline:[[0,500,312],[2,428,308,392,334],[2,378,274,382,336],[2,402,378,374,456],[2,358,488,326,528],[2,280,614,346,672],[2,266,594,300,526],[2,360,430,326,386],[2,364,446,268,460],[2,312,440,304,402],[2,282,414,242,430],[2,270,400,268,372],[2,258,374,206,370],[2,272,330,272,272],[2,286,182,362,124],[2,436,84,500,90],[0,500,312],[2,572,308,608,334],[2,622,274,618,336],[2,598,378,626,456],[2,642,488,674,528],[2,720,614,654,672],[2,734,594,700,526],[2,640,430,674,386],[2,636,446,732,460],[2,688,440,696,402],[2,718,414,758,430],[2,730,400,732,372],[2,742,374,794,370],[2,728,330,728,272],[2,714,182,638,124],[2,564,84,500,90]],
        fixed: true,
    },
    {
        name: '贵妃',
        center: [500,236],
        outline:[[0,500,120],[2,254,150,338,272],[2,182,484,298,516],[2,252,596,284,718],[2,262,632,306,590],[2,304,620,294,638],[2,316,634,334,574],[2,348,508,352,552],[2,376,508,364,460],[2,352,420,374,450],[2,374,412,376,400],[2,384,394,392,414],[2,394,404,404,388],[2,454,372,500,372],[0,500,120],[2,746,150,662,272],[2,818,484,702,516],[2,748,596,716,718],[2,738,632,694,590],[2,696,620,706,638],[2,684,634,666,574],[2,652,508,646,552],[2,624,508,636,460],[2,646,420,626,450],[2,626,412,624,400],[2,616,394,608,414],[2,604,404,596,388],[2,546,372,500,372]],
        fixed: true, // 不随机造型
    },
    {
        name: '学生1',
        center: [500,236],
        outline:[[0,500,220],[2,404,218,338,272],[2,280,336,272,422],[2,252,572,386,778],[2,368,758,392,694],[2,360,618,366,444],[2,486,440,500,444],[0,500,220],[2,596,218,662,272],[2,718,336,722,416],[2,752,572,616,772],[2,628,758,610,694],[2,640,658,640,444],[2,514,440,500,444]],
        fixed: true, // 不随机造型
    },
    {
        name: '学生2',
        center: [500,218],
        outline:[[0,500,334],[2,446,442,360,442],[2,362,474,334,490],[2,376,822,284,934],[2,236,812,304,490],[2,286,454,296,442],[2,252,346,334,236],[2,424,164,500,186],[0,500,334],[2,554,442,640,442],[2,638,474,666,490],[2,622,822,716,934],[2,764,812,696,490],[2,714,454,704,442],[2,748,346,666,236],[2,574,164,500,186]],
        fixed: true,
    },
    {
        name: '波波1',
        center: [500,336],
        outline:[[0,500,328],[2,388,320,312,400],[2,248,484,260,628],[2,280,720,420,744],[2,336,708,336,672],[2,356,712,412,720],[2,360,700,348,656],[2,356,688,400,700],[2,360,680,364,648],[2,360,676,392,676],[2,368,660,372,644],[2,380,580,436,520],[2,488,512,500,520],[0,500,328],[2,616,320,688,400],[2,752,484,740,628],[2,720,720,580,744],[2,668,708,668,672],[2,644,712,592,720],[2,644,700,652,656],[2,644,688,604,700],[2,640,680,640,648],[2,640,676,612,676],[2,636,660,628,644],[2,624,580,564,520],[2,512,512,500,520]],
        fixed: true,
    },
    {
        name: '波波2',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,456],[2,338,586,430,706],[2,388,684,340,618],[2,378,678,412,710],[2,342,684,324,630],[2,344,678,382,716],[2,318,688,294,630],[2,306,674,344,700],[2,290,670,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,456],[2,662,586,570,706],[2,612,684,660,618],[2,622,678,588,710],[2,658,684,676,630],[2,656,678,618,716],[2,682,688,706,630],[2,694,674,656,700],[2,710,670,730,570],[2,784,360,608,252],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '波波3',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,452],[2,376,478,376,510],[2,384,602,412,606],[2,392,610,364,566],[2,408,638,338,760],[2,368,684,340,618],[2,376,694,292,724],[2,342,684,324,630],[2,344,678,258,702],[2,318,688,294,630],[2,302,680,230,670],[2,282,670,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,452],[2,624,478,624,510],[2,616,602,588,606],[2,608,610,636,566],[2,592,638,662,760],[2,632,684,660,618],[2,624,694,708,724],[2,658,684,676,630],[2,656,678,742,702],[2,682,688,706,630],[2,698,680,770,670],[2,718,670,730,570],[2,784,360,600,250],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '波波4',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,452],[2,362,524,404,636],[2,380,634,360,638],[2,348,602,346,592],[2,356,646,354,638],[2,338,632,324,642],[2,326,620,312,594],[2,322,612,318,644],[2,294,642,274,668],[2,282,612,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,452],[2,638,524,596,636],[2,620,634,640,638],[2,652,602,654,592],[2,644,646,646,638],[2,662,632,676,642],[2,674,620,688,594],[2,678,612,682,644],[2,706,642,726,668],[2,718,612,730,570],[2,784,360,600,250],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '高麻花',
        center: [500,296],
        outline:[[0,500,416],[2,452,460,386,458],[2,368,612,342,650],[2,366,680,332,712],[2,352,736,326,740],[2,344,770,332,792],[2,316,800,324,822],[2,268,796,300,772],[2,284,756,312,740],[2,290,728,308,712],[2,276,678,316,652],[2,280,536,284,456],[2,288,384,342,328],[2,416,268,500,268],[0,500,416],[2,548,460,614,458],[2,632,612,658,650],[2,634,680,668,712],[2,648,736,674,740],[2,656,770,668,792],[2,684,800,676,822],[2,732,796,700,772],[2,716,756,688,740],[2,710,728,692,712],[2,724,678,684,652],[2,720,536,716,456],[2,712,384,658,328],[2,584,268,500,268]],
        fixed: true,
    },
    {
        name: '低麻花',
        center: [500,241],
        outline:[[0,500,218],[2,364,226,304,338],[2,244,512,280,666],[2,300,772,354,770],[2,326,796,350,824],[2,332,842,354,862],[2,330,892,358,936],[2,356,914,392,900],[2,406,884,386,866],[2,404,844,388,824],[2,412,806,396,762],[2,412,740,390,700],[2,354,604,390,432],[2,454,412,500,412],[0,500,218],[2,636,226,696,338],[2,756,512,720,666],[2,700,772,646,770],[2,674,796,650,824],[2,668,842,646,862],[2,670,892,642,936],[2,644,914,608,900],[2,594,884,614,866],[2,596,844,612,824],[2,588,806,604,762],[2,588,740,610,700],[2,646,604,610,432],[2,546,412,500,412]],
        fixed: true,
    },
    {
        name: '散长',
        center: [500,279],
        outline:[[0,500,228],[2,394,240,324,314],[2,282,374,284,434],[2,278,550,244,642],[2,208,720,118,766],[2,272,696,314,508],[2,304,686,184,812],[2,132,886,146,916],[2,142,860,200,816],[2,326,692,334,514],[2,320,700,212,848],[2,180,920,204,972],[2,202,886,244,834],[2,348,726,356,520],[2,350,708,264,850],[2,234,922,272,966],[2,252,892,296,844],[2,400,716,392,540],[2,414,446,500,414],[0,500,228],[2,604,240,676,314],[2,718,374,716,434],[2,722,550,756,642],[2,792,720,882,766],[2,728,696,686,508],[2,696,686,814,812],[2,868,886,854,916],[2,856,860,800,816],[2,674,692,666,514],[2,680,700,786,848],[2,820,920,796,972],[2,798,886,756,834],[2,652,726,644,520],[2,650,708,736,850],[2,766,922,728,966],[2,748,892,704,844],[2,600,716,608,540],[2,586,446,500,414]],
        fixed: true,
    },
    {
        name: '贵妇',
        center: [500,349],
        outline: [[0,500,216],[2,458,222,444,276],[2,462,316,500,320],[2,366,344,290,424],[2,270,506,336,566],[2,428,566,500,486],[0,500,216],[2,542,222,556,276],[2,538,316,500,320],[2,634,344,710,424],[2,730,506,664,566],[2,572,566,500,486]],
        fixed: true,
    },
    {
        name: '公主切',
        center: [500,231],
        outline:[[0,500,210],[2,396,206,322,282],[2,282,338,282,444],[2,298,736,300,910],[2,322,874,344,872],[2,340,508,348,420],[2,344,576,346,630],[2,382,576,416,580],[2,388,498,396,424],[2,402,384,422,362],[2,400,402,398,424],[1,440,424],[1,446,368],[1,440,424],[1,470,424],[1,476,366],[1,472,424],[1,500,424],[0,500,210],[0,500,210],[2,604,206,678,282],[2,718,338,718,444],[2,702,736,700,910],[2,678,874,656,872],[2,660,508,652,420],[2,656,576,654,630],[2,618,576,584,580],[2,612,498,604,424],[2,598,384,578,362],[2,600,402,602,424],[1,560,424],[1,554,368],[1,560,424],[1,530,424],[1,524,366],[1,528,424],[1,500,424],[0,500,210]],
        fixed: true,
    },
    {
        name: '贵族卷',
        center: [500,218],
        outline:[[0,500,182],[2,368,184,314,254],[2,266,328,280,424],[2,310,532,268,538],[2,238,534,254,508],[2,272,498,270,524],[2,282,508,256,494],[2,226,492,226,540],[2,238,574,286,566],[2,314,562,330,532],[2,320,598,306,634],[2,282,690,238,682],[2,220,674,234,656],[2,248,652,258,662],[2,248,642,226,646],[2,198,664,214,688],[2,224,710,274,710],[2,322,712,326,662],[2,308,740,268,750],[2,244,744,258,732],[2,266,742,262,732],[2,264,738,254,744],[2,284,722,262,718],[2,246,718,240,728],[2,230,748,240,762],[2,252,776,276,772],[2,314,772,340,704],[2,318,762,260,830],[2,250,856,268,868],[2,294,874,302,838],[2,304,822,292,816],[2,278,824,278,840],[2,280,846,288,846],[2,274,838,276,824],[2,290,814,298,824],[2,290,800,310,786],[2,284,788,302,828],[2,322,832,348,808],[2,348,780,334,780],[2,314,796,318,802],[2,320,786,328,778],[2,346,786,350,804],[2,346,842,318,822],[2,288,868,302,884],[2,320,904,340,888],[2,350,858,336,864],[2,318,868,332,878],[2,316,866,332,860],[2,342,868,346,868],[2,358,832,364,746],[2,354,828,368,858],[2,394,876,414,852],[2,426,828,408,812],[2,378,806,374,840],[2,382,858,398,832],[2,378,860,374,840],[2,374,818,378,818],[2,374,784,392,710],[2,404,644,386,590],[2,398,620,414,618],[2,434,620,430,590],[2,426,568,404,568],[2,402,588,414,592],[2,394,570,404,570],[2,372,550,372,524],[2,388,372,462,364],[2,438,384,442,412],[2,448,438,470,426],[2,494,410,480,396],[2,464,382,452,396],[2,454,406,460,410],[2,444,400,452,394],[2,464,372,500,362],[0,500,182],[2,632,184,686,254],[2,734,328,720,424],[2,690,532,732,538],[2,762,534,746,508],[2,728,498,730,524],[2,718,508,744,494],[2,774,492,774,540],[2,762,574,714,566],[2,686,562,670,532],[2,680,598,694,634],[2,718,690,762,682],[2,780,674,766,656],[2,752,652,742,662],[2,752,642,774,646],[2,802,664,786,688],[2,776,710,726,710],[2,678,712,674,662],[2,692,740,732,750],[2,756,744,742,732],[2,734,742,738,732],[2,736,738,746,744],[2,716,722,738,718],[2,754,718,760,728],[2,770,748,760,762],[2,748,776,724,772],[2,686,772,660,704],[2,682,762,740,830],[2,750,856,732,868],[2,706,874,698,838],[2,696,822,708,816],[2,722,824,722,840],[2,720,846,712,846],[2,726,838,724,824],[2,710,814,702,824],[2,710,800,690,786],[2,716,788,698,828],[2,678,832,652,808],[2,652,780,666,780],[2,686,796,682,802],[2,680,786,672,778],[2,654,786,650,804],[2,654,842,682,822],[2,712,868,698,884],[2,680,904,660,888],[2,650,858,664,864],[2,682,868,668,878],[2,684,866,668,860],[2,658,868,654,868],[2,642,832,636,746],[2,646,828,632,858],[2,606,876,586,852],[2,574,828,592,812],[2,622,806,626,840],[2,618,858,602,832],[2,622,860,626,840],[2,626,818,622,818],[2,626,784,608,710],[2,596,644,614,590],[2,602,620,586,618],[2,566,620,570,590],[2,574,568,596,568],[2,598,588,586,592],[2,606,570,596,570],[2,628,550,628,524],[2,612,372,538,364],[2,562,384,558,412],[2,552,438,530,426],[2,506,410,520,396],[2,536,382,548,396],[2,546,406,540,410],[2,556,400,548,394],[2,536,372,500,362]],
        fixed: true,
    },
    {
        name: '老师',
        center: [500,200],
        outline:[[0,440,190],[2,480,142,562,148],[2,718,174,724,426],[2,720,522,742,628],[2,762,734,824,762],[2,772,778,750,738],[2,762,764,796,778],[2,716,762,704,738],[2,724,766,752,774],[2,636,762,630,618],[2,624,406,542,336],[2,500,300,428,368],[2,380,312,442,186],[2,396,174,344,210],[2,254,322,288,598],[2,284,758,236,768],[2,292,772,310,724],[2,308,760,280,772],[2,358,732,364,610],[2,360,500,370,418],[2,384,356,426,368],[2,380,320,440,186],[0,426,364],[2,506,298,556,348],[2,614,390,620,636],[2,600,442,544,376],[2,502,348,428,360]],
        fixed:true,
    },
    {
        name: '舞女',
        center: [500,250],
        outline:[[0,500,198],[2,358,200,310,290],[2,274,362,274,446],[2,280,502,272,532],[2,250,584,280,604],[2,306,626,286,642],[2,266,666,280,682],[2,310,700,278,722],[2,260,740,274,760],[2,280,766,266,788],[2,254,820,300,852],[2,266,820,282,794],[2,306,782,298,758],[2,284,740,316,720],[2,336,696,318,680],[2,294,662,334,634],[2,384,600,364,568],[2,344,550,358,516],[2,366,506,378,496],[2,418,472,408,420],[2,420,460,392,478],[2,426,474,460,456],[2,496,428,500,400],[0,500,198],[2,638,198,694,286],[2,726,362,726,446],[2,720,502,728,532],[2,750,584,720,604],[2,694,626,714,642],[2,734,666,720,682],[2,688,700,722,722],[2,740,740,726,760],[2,720,766,734,788],[2,746,820,698,852],[2,734,820,718,794],[2,694,782,702,758],[2,716,740,684,720],[2,662,696,682,680],[2,706,662,666,634],[2,632,620,644,564],[2,654,538,636,518],[2,626,488,640,462],[2,624,412,540,394],[2,576,452,492,514],[2,548,440,500,400]],
        fixed:true,
    },
    {
        name: '复古1',
        center: [500,250],
        outline:[[0,500,220],[2,334,210,284,358],[2,266,402,260,462],[2,250,540,210,588],[2,150,650,204,736],[2,230,768,276,788],[2,254,778,230,724],[2,260,780,328,774],[2,296,772,274,726],[2,314,786,356,772],[2,318,776,306,708],[2,334,768,374,780],[2,366,780,348,730],[2,366,760,380,754],[2,360,748,348,704],[2,342,624,366,578],[2,392,528,384,448],[2,382,400,410,382],[2,450,356,500,368],[0,500,220],[2,666,210,716,358],[2,734,402,740,462],[2,750,540,790,588],[2,850,650,796,736],[2,770,768,724,788],[2,746,778,770,724],[2,740,780,672,774],[2,704,772,726,726],[2,686,786,644,772],[2,682,776,694,708],[2,666,768,626,780],[2,634,780,652,730],[2,634,760,620,754],[2,640,748,652,704],[2,658,624,634,578],[2,608,528,616,448],[2,618,400,590,382],[2,550,356,500,368]],
        fixed:true,
    },
    {
        name: '复古2',
        center: [500,270],
        outline:[[0,500,244],[2,382,240,318,318],[2,272,376,256,496],[2,248,534,222,552],[2,188,588,214,620],[2,230,640,276,652],[2,254,648,240,604],[2,260,648,312,648],[2,296,644,278,614],[2,314,652,356,650],[2,326,640,306,610],[2,334,638,374,648],[2,366,648,342,620],[2,366,638,380,634],[2,360,632,348,608],[2,336,576,360,554],[2,392,522,398,484],[2,398,462,438,424],[2,464,408,500,408],[0,500,244],[2,618,240,682,318],[2,728,376,744,496],[2,752,534,778,552],[2,812,588,786,620],[2,770,640,724,652],[2,746,648,760,604],[2,740,648,688,648],[2,704,644,722,614],[2,686,652,644,650],[2,674,640,694,610],[2,666,638,626,648],[2,634,648,658,620],[2,634,638,620,634],[2,640,632,652,608],[2,664,576,640,554],[2,608,522,602,484],[2,602,462,562,424],[2,536,408,500,408]],
        fixed:true,
    },
    {
        name: '自然',
        center: [500,250],
        outline:[[0,500,230],[2,424,232,364,274],[2,318,302,288,368],[2,270,420,298,500],[2,296,572,336,588],[2,298,562,320,498],[2,332,484,370,434],[2,356,458,334,480],[2,360,474,398,430],[2,384,458,364,478],[2,414,466,428,428],[2,422,442,386,480],[2,428,464,456,414],[2,476,376,514,392],[2,510,402,516,420],[2,526,394,532,392],[2,564,396,556,438],[2,554,472,582,494],[2,598,502,594,528],[2,602,490,584,474],[2,570,458,578,432],[2,584,410,564,388],[2,582,412,588,436],[2,592,448,602,458],[2,614,476,648,472],[2,622,464,606,436],[2,604,420,592,404],[2,590,392,592,398],[2,624,474,654,484],[2,682,500,684,536],[2,688,568,676,584],[2,704,550,696,506],[2,724,440,714,360],[2,710,316,658,272],[2,590,230,500,230]],
        fixed:true,
    },
    {
        name: '稚嫩1',
        center: [500,330],
        outline:[[0,500,282],[2,424,280,360,308],[2,288,358,276,454],[2,268,548,266,606],[2,266,676,302,728],[2,302,678,320,658],[2,320,586,320,560],[2,328,486,350,408],[2,306,556,326,696],[2,332,652,362,640],[2,350,512,378,440],[2,360,486,362,556],[2,380,518,392,534],[2,396,508,432,444],[2,396,498,390,558],[2,412,520,438,528],[2,440,486,478,442],[2,440,480,434,552],[2,494,530,500,456],[0,500,282],[2,576,280,640,308],[2,712,358,724,454],[2,732,548,734,606],[2,734,676,698,728],[2,698,678,680,658],[2,680,586,680,560],[2,672,486,650,408],[2,694,556,674,696],[2,668,652,638,640],[2,650,512,622,440],[2,640,486,638,556],[2,620,518,608,534],[2,604,508,568,444],[2,604,498,610,558],[2,588,520,562,528],[2,560,486,522,442],[2,560,480,566,552],[2,506,530,500,456]],
        fixed:true,
    },
    {
        name: '稚嫩2',
        center: [500,280],
        outline:[[0,500,250],[2,384,252,328,320],[2,284,400,304,510],[2,308,478,340,478],[2,348,430,374,376],[2,332,450,342,494],[2,352,478,372,478],[2,366,470,412,370],[2,364,476,370,516],[2,396,478,414,476],[2,418,442,454,378],[2,414,436,408,500],[2,434,474,442,478],[2,444,446,480,392],[2,444,444,440,494],[2,484,460,500,408],[0,500,250],[2,612,246,660,308],[2,716,366,694,504],[2,692,478,658,472],[2,660,432,626,376],[2,668,450,654,490],[2,648,478,628,478],[2,634,470,588,370],[2,636,476,630,516],[2,604,478,586,476],[2,582,442,546,378],[2,586,436,592,500],[2,566,474,558,478],[2,556,446,520,392],[2,556,444,560,494],[2,516,460,500,408]],
        fixed:true,
    },
    {
        name: '平凡',
        center: [500,265],
        outline:[[0,512,260],[2,580,238,638,270],[2,704,320,718,388],[2,744,518,646,720],[2,652,710,656,692],[2,646,710,626,726],[2,646,688,646,680],[2,640,700,612,710],[2,630,686,632,674],[2,622,694,596,700],[2,632,646,638,600],[2,650,492,620,442],[2,578,410,484,430],[2,526,360,506,258],[2,464,248,386,260],[2,310,286,286,364],[2,274,462,290,564],[2,324,690,358,732],[2,350,722,350,710],[2,362,726,384,738],[2,380,728,362,694],[2,376,720,394,724],[2,380,712,378,690],[2,392,706,408,712],[2,372,626,372,560],[2,372,490,398,448],[2,420,428,482,430],[2,528,348,508,258]],
        fixed:true,
    },
    {
        name: '刺客',
        center: [500,335],
        outline:[[0,500,300],[2,348,310,298,406],[2,266,502,238,558],[2,222,594,180,624],[2,232,628,232,616],[2,240,628,212,652],[2,274,642,272,628],[2,278,656,248,680],[2,290,668,302,634],[2,314,680,290,704],[2,330,690,342,644],[2,378,546,374,480],[2,378,528,378,542],[2,474,542,500,542],[0,500,300],[2,652,310,702,406],[2,734,502,762,558],[2,778,594,820,624],[2,768,628,768,616],[2,760,628,788,652],[2,726,642,728,628],[2,722,656,752,680],[2,710,668,698,634],[2,686,680,710,704],[2,670,690,658,644],[2,622,546,626,480],[2,622,528,622,542],[2,526,542,500,542]],
        fixed:true,
    },
    {
        name: '木双灵',
        center: [500,229],
        outline: [[0,500,180],[2,348,184,300,346],[2,232,338,204,618],[2,188,780,104,858],[2,212,772,230,626],[2,248,442,298,368],[2,274,452,264,702],[2,264,820,244,884],[2,266,896,288,874],[2,284,842,280,810],[2,300,878,304,874],[2,290,794,300,788],[2,300,840,314,870],[2,352,840,382,858],[2,326,774,340,638],[2,342,670,374,682],[2,408,688,422,650],[2,376,710,346,602],[2,342,532,376,448],[2,452,470,500,396],[0,500,180],[2,654,182,694,338],[2,768,338,796,618],[2,812,780,896,858],[2,788,772,770,626],[2,752,442,702,364],[2,726,452,736,702],[2,736,820,756,884],[2,734,896,712,874],[2,716,842,720,810],[2,700,878,696,874],[2,710,794,700,788],[2,700,840,686,870],[2,646,840,618,858],[2,674,774,660,638],[2,664,672,634,678],[2,604,680,580,648],[2,644,702,656,600],[2,658,532,628,440],[2,536,468,500,396]],
        fixed: true,
    },
    {
        name: '唐雅雯',
        center: [500,241],
        outline: [[0,500,226],[2,308,216,290,428],[2,286,550,274,618],[2,212,764,310,844],[2,290,808,288,764],[2,310,836,358,874],[2,314,770,332,680],[2,356,602,340,444],[2,348,528,350,570],[2,374,556,400,554],[2,360,500,376,430],[2,384,392,412,362],[2,382,406,376,464],[2,440,454,500,454],[0,500,226],[2,702,216,710,428],[2,714,550,726,618],[2,788,764,690,844],[2,710,808,712,764],[2,690,836,642,874],[2,686,770,668,680],[2,644,602,660,444],[2,652,528,650,570],[2,626,556,600,554],[2,640,500,624,430],[2,616,392,588,362],[2,618,406,624,464],[2,560,454,500,454]],
        fixed: true,
    },
    {
        name: '万绣',
        center: [500,178],
        outline: [[0,500,62],[2,412,56,376,146],[2,422,152,448,168],[2,380,182,322,242],[2,252,332,282,534],[2,298,620,254,760],[2,314,878,444,790],[2,330,540,394,610],[2,336,440,392,476],[2,384,338,500,324],[0,500,62],[2,588,56,624,140],[2,578,152,552,168],[2,628,178,680,234],[2,750,326,718,562],[2,710,638,766,762],[2,704,880,576,790],[2,690,536,622,608],[2,672,430,614,476],[2,630,360,562,326],[2,546,376,504,388],[2,456,404,392,392],[2,446,400,498,370],[2,516,356,534,326],[2,524,348,490,370],[2,472,380,430,384],[2,466,378,490,352],[2,518,320,500,324]],
        fixed: true,
    },
];

export const generalBangsTemplates = [
    {
        name: '空气刘海',
        center: [500,248],
        outline:[[0,356,336],[2,324,392,364,428],[0,376,336],[2,352,376,380,412],[0,396,336],[2,372,368,396,404],[0,412,336],[2,396,356,416,396],[0,424,340],[2,416,356,428,388],[0,444,332],[2,432,356,452,380],[0,436,336],[2,428,352,440,376],[0,464,332],[2,456,356,472,372],[0,456,332],[2,444,352,460,380],[0,488,332],[2,476,356,496,372],[0,472,332],[2,464,352,484,372],[0,480,496],[0,644,336],[2,676,392,636,428],[0,624,336],[2,648,376,620,412],[0,604,336],[2,628,368,604,404],[0,588,336],[2,604,356,584,396],[0,576,340],[2,584,356,572,388],[0,556,332],[2,568,356,548,380],[0,564,336],[2,572,352,560,376],[0,536,332],[2,544,356,528,372],[0,544,332],[2,556,352,540,380],[0,512,332],[2,524,356,504,372],[0,528,332],[2,536,352,516,372],[0,520,496]]
    },
    {
        name: '卷',
        center: [500,288],
        outline:[[0,484,344],[2,462,376,494,404],[0,456,344],[2,438,376,494,404],[0,438,346],[2,412,378,472,404],[0,406,346],[2,398,376,464,400],[0,388,348],[2,382,378,444,402],[0,358,350],[2,352,386,448,404],[0,514,344],[2,538,376,506,404],[0,544,344],[2,562,376,506,404],[0,562,346],[2,588,378,528,404],[0,594,346],[2,602,376,534,400],[0,612,348],[2,618,378,556,402],[0,642,350],[2,648,386,552,404]]
    },
    {
        name: '左斜狗啃',
        center: [500,322],
        outline:[[0,500,336],[2,620,328,642,408],[2,654,450,626,482],[2,578,484,550,474],[2,584,448,594,428],[2,574,466,536,474],[2,512,482,484,474],[2,520,450,544,428],[2,502,474,470,474],[2,446,474,424,474],[2,470,454,484,424],[2,464,460,418,474],[2,386,474,362,474],[2,406,454,412,432],[2,394,458,352,474],[2,314,474,290,474],[2,336,452,352,426],[2,406,352,500,336]]
    },
    {
        name: '右斜狗啃',
        center: [500,322],
        outline:[[0,500,336],[2,386,328,364,408],[2,352,450,380,482],[2,424,484,452,474],[2,420,448,410,428],[2,428,466,466,474],[2,488,482,516,474],[2,472,450,458,428],[2,498,474,520,474],[2,552,474,570,474],[2,520,454,516,424],[2,534,460,578,474],[2,608,474,632,474],[2,590,454,584,432],[2,600,458,640,474],[2,678,474,698,474],[2,654,452,640,426],[2,590,352,500,336]]
    },
];
export const maleBangsTemplates = [
    {
        name: '左斜',
        center: [500,263],
        outline:[[0,612,366],[2,602,404,524,448],[2,570,396,576,364],[2,562,398,510,446],[2,542,386,542,364],[2,532,396,480,442],[2,518,380,516,364],[2,502,404,454,434],[2,502,380,500,364],[2,476,404,424,428],[2,472,384,472,362],[2,444,400,402,434],[2,440,384,440,364],[2,410,408,374,434],[2,416,382,410,364],[2,400,396,354,428],[2,348,444,352,474],[2,332,412,362,324],[2,372,298,458,282],[2,596,266,624,292],[2,670,330,636,398],[2,624,434,598,450],[2,630,390,632,366],[2,622,402,580,472],[2,614,388,612,366],[0,520,512]]
    },
    {
        name: '右斜',
        center: [500,263],
        outline:[[0,380,366],[2,390,404,468,448],[2,422,396,416,364],[2,430,398,482,446],[2,450,386,450,364],[2,460,396,512,442],[2,474,380,476,364],[2,490,404,538,434],[2,490,380,492,364],[2,516,404,568,428],[2,520,384,520,362],[2,548,400,590,434],[2,552,384,552,364],[2,582,408,618,434],[2,576,382,582,364],[2,592,396,638,428],[2,644,444,640,474],[2,660,412,630,324],[2,620,298,534,282],[2,396,266,368,292],[2,322,330,356,398],[2,368,434,394,450],[2,362,390,360,366],[2,370,402,412,472],[2,378,388,380,366],[0,472,512]]
    },
    {
        name: '犬牙',
        center: [500,143],
        outline:[[0,416,240],[2,408,294,436,372],[2,368,286,380,240],[2,370,304,402,324],[2,340,286,340,240],[0,578,246],[2,578,300,556,312],[2,590,298,598,250],[2,604,288,586,342],[2,638,270,620,240]]
    },
    {
        name: '螳螂',
        center: [500,208],
        outline:[[0,486,318],[2,522,360,614,288],[2,532,410,506,440],[2,674,300,648,212],[2,550,308,514,298],[0,642,266],[2,662,268,672,256],[2,664,308,584,404],[2,638,310,634,296]]
    },
];
export const femaleBangsTemplates = [
    {
        name: '齐刘海1',
        center: [502,226],
        outline: [[0,500,240],[2,442,250,396,292],[2,380,328,376,388],[1,414,382],[1,426,332],[1,418,382],[1,444,378],[1,454,318],[1,448,378],[1,472,372],[1,476,318],[1,474,374],[1,498,374],[1,502,316],[0,500,240],[2,558,250,604,292],[2,620,328,624,388],[1,586,382],[1,574,332],[1,582,382],[1,556,378],[1,544,318],[1,548,378],[1,528,372],[1,520,318],[1,524,374],[1,502,374],[1,502,322]]
    },
    {
        name: '齐刘海2',
        center: [500,385],
        outline: [[0,500,416],[2,414,418,386,466],[2,382,518,338,554],[1,376,554],[1,398,512],[1,380,546],[1,410,546],[1,418,508],[1,414,544],[1,440,544],[1,448,504],[1,440,544],[1,470,544],[1,474,506],[1,470,544],[1,488,544],[1,496,508],[1,488,544],[1,500,542],[0,496,444],[0,500,416],[2,586,418,614,466],[2,618,518,662,554],[1,624,554],[1,602,512],[1,620,546],[1,590,546],[1,582,508],[1,586,544],[1,560,544],[1,552,504],[1,560,544],[1,530,544],[1,526,506],[1,530,544],[1,512,544],[1,504,508],[1,512,544],[1,500,542],[0,504,444]]
    },
    {
        name: '桃花瓣',
        center: [500,302],
        outline: [[0,500,380],[2,494,438,420,448],[2,400,408,426,382],[2,402,412,374,414],[2,366,378,378,370],[0,500,380],[2,506,438,580,448],[2,600,408,574,382],[2,598,412,626,414],[2,634,378,622,370]]
    },
    {
        name: '中分（女）',
        center: [500,202],
        outline:[[0,500,332],[2,416,390,398,370],[2,372,442,398,494],[2,284,354,366,250],[2,428,192,500,186],[0,500,332],[2,584,390,598,370],[2,614,442,592,494],[2,716,354,636,248],[2,570,192,500,186]]
    },
    {
        name: '月牙',
        center: [500,272],
        outline: [[0,500,254],[2,398,244,336,346],[2,280,438,328,516],[2,370,570,400,564],[2,354,534,378,448],[2,402,414,440,412],[2,484,404,500,396],[0,500,254],[2,602,244,664,346],[2,720,438,672,516],[2,630,570,600,564],[2,646,534,622,448],[2,598,414,560,412],[2,516,404,500,396]],
    },
    {
        name: '左三七',
        center: [500,330],
        outline:[[0,406,394],[2,348,426,358,462],[2,370,482,346,504],[2,448,494,528,416],[2,514,444,470,478],[2,524,458,554,418],[2,550,454,648,494],[2,670,440,618,394]]
    },
    {
        name: '右三七',
        center: [500,330],
        outline:[[0,594,394],[2,652,426,642,462],[2,630,482,654,504],[2,552,494,472,416],[2,486,444,530,478],[2,476,458,446,418],[2,450,454,352,494],[2,330,440,382,394]]
    },
    {
        name: '柱',
        center: [500,408],
        outline:[[0,500,388],[2,452,394,428,450],[2,424,528,456,572],[2,466,558,466,554],[2,468,562,468,572],[2,480,556,474,552],[2,480,562,480,568],[2,480,550,480,552],[2,480,556,484,564],[2,482,552,490,552],[2,490,558,492,560],[2,494,562,496,558],[2,498,556,500,554],[0,500,388],[2,548,394,572,450],[2,576,528,544,572],[2,534,558,534,554],[2,532,562,532,572],[2,520,556,526,552],[2,520,562,520,568],[2,520,550,520,552],[2,520,556,516,564],[2,518,552,510,552],[2,510,558,508,560],[2,506,562,504,558],[2,502,556,500,554]],
        fixed: true,
    },
    {
        name: '波浪',
        center: [500,198],
        outline: [[0,322,286],[2,282,354,320,400],[2,346,424,308,460],[2,262,486,304,518],[2,342,534,300,562],[2,290,584,316,590],[2,334,610,312,626],[2,294,638,316,650],[2,330,660,320,674],[2,312,676,308,684],[2,294,698,314,732],[2,304,698,326,688],[2,352,652,330,640],[2,322,630,334,622],[2,362,604,342,586],[2,320,570,342,558],[2,370,534,346,516],[2,306,492,340,470],[2,386,442,366,406],[2,330,358,364,322],[2,386,306,354,278],[0,678,286],[2,718,354,680,400],[2,654,424,692,460],[2,738,486,696,518],[2,658,534,700,562],[2,710,584,684,590],[2,666,610,688,626],[2,706,638,684,650],[2,670,660,680,674],[2,688,676,692,684],[2,706,698,686,732],[2,696,698,674,688],[2,648,652,670,640],[2,678,630,666,622],[2,638,604,658,586],[2,680,570,658,558],[2,630,534,654,516],[2,694,492,660,470],[2,614,442,634,406],[2,670,358,636,322],[2,614,306,646,278]],
        fixed: true,
    },
];

export const generalBackHairTemplates = [
    {
        name: '圣诞树',
        center: [500,142],
        outline:[[0,500,304],[2,416,320,364,394],[2,302,480,218,492],[2,280,520,368,498],[2,346,542,230,566],[2,324,600,352,594],[2,302,672,248,658],[2,344,678,380,654],[2,366,704,278,762],[2,366,764,424,706],[2,402,814,350,830],[2,402,842,446,784],[2,442,848,334,910],[2,382,916,454,878],[2,450,916,412,944],[2,442,948,466,912],[2,480,942,452,964],[2,490,954,500,930],[0,500,304],[2,584,320,636,394],[2,698,480,782,492],[2,720,520,632,498],[2,654,542,770,566],[2,676,600,648,594],[2,698,672,752,658],[2,656,678,620,654],[2,634,704,722,762],[2,634,764,576,706],[2,598,814,650,830],[2,598,842,554,784],[2,558,848,666,910],[2,618,916,546,878],[2,550,916,588,944],[2,558,948,534,912],[2,520,942,548,964],[2,510,954,500,930]]
    },
    {
        name: '彗星',
        center: [500,308],
        outline:[[0,500,324],[1,390,324],[1,378,826],[1,412,728],[1,424,826],[1,454,712],[1,450,844],[1,474,704],[1,492,848],[1,516,704],[1,542,830],[1,542,708],[1,600,844],[1,592,698],[1,622,844],[1,618,324],[1,500,324]]
    },
    {
        name: '异形',
        center: [500,308],
        outline:[[1,582,492],[1,398,494],[2,318,704,244,696],[2,324,758,392,620],[2,344,806,250,828],[2,356,880,408,726],[2,362,974,324,1004],[2,468,822,488,708],[2,468,882,386,1090],[2,498,930,514,724],[2,536,836,652,1054],[2,562,852,556,714],[2,590,864,668,896],[2,614,820,592,702],[2,640,820,740,838],[2,650,754,626,616],[2,654,706,738,678],[2,634,562,616,492],[1,574,492]]
    },
    {
        name: '水母',
        center: [500,308],
        outline:[[0,500,358],[2,372,384,358,502],[2,362,682,296,796],[2,318,780,336,764],[2,336,780,334,784],[2,352,764,356,762],[2,356,784,360,796],[2,386,754,386,754],[2,394,790,386,798],[2,410,782,414,766],[2,428,784,428,792],[2,436,764,446,740],[2,448,770,446,786],[2,454,764,456,752],[2,460,782,460,796],[2,488,776,488,764],[2,492,782,492,786],[2,498,766,500,766],[0,500,358],[2,632,382,642,502],[2,638,682,704,796],[2,682,780,662,764],[2,662,780,666,784],[2,646,764,644,762],[2,644,784,640,796],[2,614,754,614,754],[2,604,790,614,798],[2,590,782,586,766],[2,570,784,570,792],[2,562,764,554,740],[2,552,770,554,786],[2,546,764,544,752],[2,540,782,540,796],[2,512,776,512,764],[2,508,782,508,786],[2,502,766,500,766]]
    },
    {
        name: '扫帚',
        center: [500,108],
        outline:[[0,500,314],[2,424,314,394,370],[2,372,428,376,540],[2,378,604,364,654],[2,390,624,392,578],[2,404,608,394,650],[2,424,592,428,586],[2,436,602,434,646],[2,456,586,462,590],[2,470,604,462,650],[2,482,594,478,594],[2,486,622,484,644],[2,500,584,500,590],[0,500,314],[2,576,314,606,370],[2,628,428,624,540],[2,622,604,636,654],[2,610,624,608,578],[2,596,608,606,650],[2,576,592,572,586],[2,564,602,566,646],[2,544,586,538,590],[2,530,604,538,650],[2,518,594,522,594],[2,514,622,516,644],[2,500,584,500,590]]
    },
    {
        name: '高马尾',
        center: [500,288],
        outline:[[0,500,200],[2,464,196,436,242],[2,422,266,462,294],[2,478,298,500,298],[0,500,200],[2,536,196,564,242],[2,578,266,538,294],[2,522,298,500,298],[0,466,294],[2,454,472,414,576],[2,370,686,398,782],[2,436,868,500,888],[0,534,294],[2,546,472,586,576],[2,630,686,602,782],[2,564,868,500,888]]
    },
    {
        name: '左菠萝',
        center: [500,328],
        outline:[[0,484,468],[2,488,408,394,326],[2,352,276,362,252],[2,340,296,380,362],[2,320,280,310,232],[2,308,300,362,366],[2,308,282,232,308],[2,282,292,340,362],[2,282,332,188,388],[2,268,348,352,400],[2,310,372,212,416],[2,264,388,348,428],[2,380,452,392,472],[2,412,520,456,508],[2,484,496,484,468]]
    },
    {
        name: '右菠萝',
        center: [500,328],
        outline:[[0,516,470],[2,512,412,600,334],[2,640,286,632,264],[2,652,306,614,368],[2,672,290,680,244],[2,682,310,632,372],[2,682,292,756,318],[2,708,300,652,368],[2,708,340,798,394],[2,720,356,640,404],[2,680,378,772,420],[2,724,394,644,432],[2,614,454,602,474],[2,584,520,542,508],[2,516,496,516,470]]
    },
];
export const maleBackHairTemplates = [
    // {
    // 	name: '螳螂',
    // 	center: [500,308],
    // 	outline:[[0,524,342],[2,558,378,636,318],[2,564,422,544,446],[2,688,328,666,252],[2,582,334,552,326],[0,662,298],[2,678,300,686,290],[2,680,334,610,416],[2,658,336,654,324]]
    // },
];
export const femaleBackHairTemplates = [
    {
        name: '泥石流',
        center: [500,308],
        outline: [[0,502,368],[2,446,386,414,440],[2,394,514,388,576],[2,388,622,386,690],[2,380,728,364,758],[2,320,816,282,852],[2,258,890,264,922],[2,290,934,372,936],[2,432,938,478,938],[2,502,938,498,932],[0,498,366],[2,554,386,586,440],[2,606,514,612,576],[2,612,622,614,690],[2,620,728,636,758],[2,680,816,718,852],[2,742,890,736,922],[2,710,934,628,936],[2,568,938,522,938],[2,498,938,498,932],[0,502,368]]
    },
    {
        name: '瀑布',
        center: [500,308],
        outline: [[0,500,340],[2,422,350,408,368],[2,358,552,342,914],[2,456,922,500,914],[0,500,340],[2,578,350,592,368],[2,642,552,658,914],[2,544,922,500,914]]
    },
    {
        name: '高弯双马尾',
        center: [500,288],
        outline:[[0,404,286],[2,380,266,352,276],[2,330,312,340,346],[2,358,360,384,356],[2,414,322,402,284],[0,340,346],[2,268,408,228,518],[2,196,624,236,756],[2,260,828,258,894],[2,312,790,292,714],[2,304,812,292,866],[2,348,774,346,708],[2,338,786,328,820],[2,378,772,384,690],[2,378,638,336,590],[2,298,526,310,478],[2,334,392,364,356],[0,500,348],[0,594,286],[2,620,266,648,276],[2,670,312,660,346],[2,642,360,614,356],[2,586,322,598,284],[0,660,346],[2,732,408,772,518],[2,804,624,764,756],[2,740,828,742,894],[2,688,790,708,714],[2,694,812,708,866],[2,652,774,654,708],[2,662,786,672,820],[2,622,772,616,690],[2,622,638,664,590],[2,702,526,690,478],[2,666,392,636,356],[0,500,348]]
    },
    {
        name: '低弯双马尾',
        center: [500,142],
        outline:[[0,400,188],[2,416,138,354,142],[2,296,176,308,236],[2,332,260,360,252],[2,420,198,394,188],[0,308,236],[2,224,344,176,532],[2,136,716,184,944],[2,212,1068,212,1180],[2,276,1004,252,872],[2,264,1040,252,1136],[2,320,972,316,860],[2,308,996,296,1052],[2,356,972,360,828],[2,356,740,304,656],[2,260,548,272,464],[2,300,312,336,252],[0,500,240],[0,618,192],[2,628,128,670,154],[2,704,176,692,236],[2,672,260,636,252],[2,606,208,624,186],[0,692,236],[2,780,344,828,532],[2,864,716,816,944],[2,788,1068,792,1180],[2,728,1004,752,872],[2,732,1040,752,1136],[2,684,972,684,860],[2,696,996,708,1052],[2,648,972,640,828],[2,648,740,696,656],[2,744,548,728,464],[2,700,312,664,252],[0,500,240]]
    },
    {
        name: '短双马尾',
        center: [500,282],
        outline:[[0,412,534],[2,364,558,332,626],[2,306,632,310,660],[2,210,766,286,1002],[2,428,842,340,662],[2,358,666,344,630],[2,450,620,446,574],[0,588,534],[2,636,558,668,626],[2,694,632,688,660],[2,790,766,714,1002],[2,572,842,660,662],[2,642,666,654,630],[2,550,620,554,574]]
    },
    {
        name: '短双炮',
        center: [500,232],
        outline:[[0,336,630],[2,324,602,332,576],[2,352,538,400,552],[2,424,582,414,612],[2,388,636,358,642],[2,338,640,336,630],[2,310,612,180,700],[2,236,688,284,672],[2,256,696,224,742],[2,284,698,302,684],[2,266,732,264,790],[2,278,738,318,704],[2,294,772,302,808],[2,302,738,334,714],[2,324,764,308,820],[2,332,742,350,724],[2,350,756,324,798],[2,360,776,368,734],[2,378,768,356,820],[2,426,706,376,638],[0,500,596],[0,664,630],[2,676,602,668,576],[2,648,538,600,552],[2,576,582,586,612],[2,612,636,642,642],[2,662,640,664,630],[2,690,612,820,700],[2,764,688,716,672],[2,744,696,776,742],[2,716,698,698,684],[2,734,732,736,790],[2,722,738,682,704],[2,706,772,698,808],[2,698,738,666,714],[2,676,764,692,820],[2,668,742,650,724],[2,650,756,676,798],[2,640,776,632,734],[2,622,768,644,820],[2,574,706,624,638],[0,500,596]]
    },
    {
        name: '瓢',
        center: [500,142],
        outline:[[0,500,400],[2,418,390,356,452],[2,308,544,318,630],[2,476,636,500,638],[0,500,400],[2,582,390,644,452],[2,692,544,682,630],[2,524,636,500,638]],
    },
    {
        name: '幽灵',
        center: [500,288],
        outline:[[0,500,262],[2,408,250,316,324],[2,232,422,400,760],[2,404,778,366,806],[2,418,776,386,834],[2,406,818,416,798],[2,426,812,404,844],[2,434,820,442,794],[2,446,820,434,848],[2,452,826,462,810],[2,476,826,464,846],[2,478,824,484,808],[2,490,832,490,840],[2,498,812,500,800],[0,500,262],[2,592,250,684,324],[2,768,422,618,760],[2,612,778,640,808],[2,594,766,614,852],[2,594,818,582,792],[2,574,812,584,850],[2,566,820,558,794],[2,554,820,558,856],[2,548,826,538,810],[2,524,826,534,840],[2,522,824,516,808],[2,510,832,510,840],[2,502,812,500,800]]
    },
    {
        name: '左单马尾',
        center: [500,308],
        outline:[[0,408,318],[2,450,308,446,356],[2,444,382,408,400],[2,368,414,360,380],[2,346,348,410,316],[2,382,268,306,262],[2,240,254,198,344],[2,152,446,190,616],[2,226,728,288,744],[2,244,710,260,640],[2,252,690,276,736],[2,274,682,266,652],[2,274,694,276,734],[2,294,660,290,634],[2,296,580,264,500],[2,240,404,264,344],[2,284,304,328,316],[2,358,322,366,348]]
    },
    {
        name: '右单马尾',
        center: [500,308],
        outline:[[0,592,318],[2,550,308,554,356],[2,556,382,592,400],[2,632,414,640,380],[2,654,348,590,316],[2,618,268,694,262],[2,760,254,802,344],[2,848,446,810,616],[2,774,728,712,744],[2,756,710,740,640],[2,748,690,724,736],[2,726,682,734,652],[2,726,694,724,734],[2,706,660,710,634],[2,704,580,736,500],[2,760,404,736,344],[2,716,304,672,316],[2,642,322,634,348]]
    },
    {
        name: '扇子',
        center: [500,108],
        outline:[[0,500,272],[2,308,298,220,572],[2,252,542,252,544],[2,250,554,238,580],[2,266,568,272,550],[2,268,574,264,582],[2,278,562,288,550],[2,286,596,286,606],[2,306,570,308,562],[2,306,594,306,594],[2,322,570,322,566],[2,326,586,328,590],[2,340,568,342,554],[2,342,604,340,596],[2,360,586,364,556],[2,358,594,358,602],[2,364,590,376,560],[2,370,612,372,612],[2,388,578,388,578],[2,388,618,398,622],[2,400,592,406,590],[2,412,636,412,648],[2,432,594,428,600],[2,440,626,446,650],[2,450,592,452,604],[2,468,656,464,658],[2,468,602,468,600],[2,470,628,474,632],[2,484,604,486,602],[2,492,626,492,628],[2,494,602,500,602],[0,500,272],[2,692,298,780,572],[2,748,542,748,544],[2,750,554,762,580],[2,734,568,728,550],[2,730,574,736,582],[2,722,562,712,550],[2,714,596,714,606],[2,694,570,692,562],[2,694,594,694,594],[2,678,570,678,566],[2,674,586,672,590],[2,660,568,658,554],[2,658,604,660,596],[2,640,586,636,556],[2,642,594,642,602],[2,636,590,624,560],[2,630,612,628,612],[2,610,578,610,578],[2,610,618,602,622],[2,600,592,594,590],[2,588,636,588,648],[2,566,594,570,600],[2,560,626,554,650],[2,550,592,548,604],[2,532,656,536,658],[2,532,602,532,600],[2,530,628,520,632],[2,516,604,514,602],[2,508,626,508,628],[2,506,602,500,602]]
    },
];

/* 眼睛款式 */
export const glassTemplates = [
    {
        name: '会长',
        center: [500,320],
        lineWidthRange: [1,2],
        outline: [[0,478,322],[2,472,240,412,240],[2,336,242,336,322],[2,338,398,412,398],[2,472,400,478,322],[1,500,322],[0,474,304],[1,500,304],[0,336,306],[1,122,114],[0,506,322],[0,522,322],[2,528,240,588,240],[2,664,242,664,322],[2,662,398,588,398],[2,528,400,522,322],[1,500,322],[0,526,304],[1,500,304],[0,664,306],[1,896,96],[0,494,322]]
    },
    {
        name: '框',
        center: [500,376],
        lineWidthRange: [3,4],
        outline: [[0,456,334],[2,478,334,476,352],[2,478,410,476,410],[2,472,428,460,426],[2,350,426,350,426],[2,330,418,332,400],[2,332,332,332,352],[2,330,332,346,330],[2,458,332,456,334],[0,474,372],[1,500,372],[0,330,350],[1,184,222],[0,544,334],[2,522,334,524,352],[2,522,410,524,410],[2,528,428,540,426],[2,650,426,650,426],[2,670,418,668,400],[2,668,332,668,352],[2,670,332,654,330],[2,542,332,544,334],[0,526,372],[1,500,372],[0,670,350],[1,830,212]]
    },
];

/* 衣服 */
const ANCHOR_MAP = {
    c1: 2,
    d1: 2,
    e1: 2,
    f1: 2,
    g1: 2,
    h1: 1,
    i11: 2,
    i21: 2,
    j1: 2,
    k1: 2,

    c2: 2,
    d2: 2,
    e2: 2,
    f2: 2,
    g2: 2,
    h2: 1,
    i12: 2,
    i22: 2,
    j2: 2,
    k2: 2,
};
const BODY_CURVEPOINT_MAP = {
    d: 'cp2',
    e: 'cp3',
    f: 'cp4',
    g: 'cp5',
    i1: 'cp6',
    i2: 'cpi',
    j: 'cp7',
    k: 'cp8',
};
export const generalClothTemplates = [
    {
        name: '基本款',
        data:[{"outline":[[0,500,706],["c1",438,718,394,686],["d1",408,840,346,900],["e1",280,894,260,920],["f1",196,950,152,966],["g1",134,1080,148,1200],["h1",246,1200],["i11",258,1112,264,1062],["i21",272,1038,274,1058],["j1",274,1100,290,1116],["k1",312,1164,314,1200],[1,500,1200],[0,500,706],["c2",562,718,606,686],["d2",592,840,654,900],["e2",720,894,740,920],["f2",804,950,848,966],["g2",866,1080,852,1200],["h2",754,1200],["i12",742,1112,736,1062],["i22",728,1038,726,1058],["j2",726,1100,710,1116],["k2",688,1164,686,1200],[1,500,1200]],"color":{"r":255,"g":192,"b":203}},{"outline":[[0,404,1004],[2,502,1046,596,992],[1,514,1154],[1,404,1004]],"color":{"r":0,"g":150,"b":0},"noStroke":true}],
    },
];
export const maleClothTemplates = [

];
export const femaleClothTemplates = [

];

export function genRandomAvatar(person){ // 随机生成肖像
    let res;
    let { personalities, gender, age, } = person;
    let emotion = Math.round(personalities[2]*.25+personalities[4]*.75); // 0-100
    let bald = (r(0,100)<5&&gender==1);
    // 生成发色
    let hairColor = genHairColor(gender);
    let { color, grd, } = hairColor;

    // 生成基本脸
    let faceData = genFaceData(gender,age,bald);
    // 生成双耳
    let earsData = genEarsData(faceData,gender,age);
    // 生成双眉
    let browsData = genBrowsData(faceData,gender,color);
    // 生成双眼
    let eyesData = genEyesData(faceData,gender,age,personalities);
    // 生成双眼皮
    let eyeskinsData;
    if(r(0,100)<90&&(gender==1||age<60)){
        eyeskinsData = genEyeSkinsData(eyesData,gender);
    }
    // 生成睫毛
    let lashData;
    if(gender==2){
        lashData = genLashData(eyesData,gender,age);
    }
    // 生成外双瞳
    let eyeoutballsData = genEyeoutballsData(eyesData,gender,age);
    let eyeinballsData;
    if(r(0,100)<90){ // 生成内双瞳
        eyeinballsData = genEyeinballsData(eyesData,eyeoutballsData,gender,age);
    }

    // 生成鼻子
    let noseData = genNoseData(faceData,gender,age);
    // 生成嘴唇
    let lipData = genLipData(faceData,gender,age,emotion);
    let bottomLipData;
    if(!lipData.strokeColor){ // 生成下嘴唇
        bottomLipData = genBottomLipData(faceData,lipData,gender);
    }
    let topMoustacheData;
    if((r(0,100)<age&&age>=30&&gender==1)){ // 生成上胡子
        topMoustacheData = genTopMoustacheData(faceData,lipData,color,grd);
    }
    let nasoData;
    if(age>=50){ // 生成法令纹
        nasoData = genNasoData(faceData,eyesData,gender,age);
    }
    let bracketsData;
    if(age>=60){ // 生成括号
        bracketsData = genBracketsData(faceData,lipData);
    }
    // 生成身体
    let bodyData = genBodyData(faceData,gender,age);
    // 生成锁骨
    let collarData = genCollarData(bodyData,gender,age);
    // 生成乳房&乳房轮廓
    let breastData,breastOutlineData,breastShadowData;
    if(gender==2&&(age>=14||(age>=10&&r(3,20)<age))){
    // if(gender==2){
        breastData = genBreastData(bodyData,gender,age);
        breastOutlineData = genBreastOutlineData(breastData,gender,age);
        breastShadowData = genBreastShadowData(bodyData,breastData,gender,age);
    }
    else if(gender==1&&age>=14&&bodyData.muscle>=3){
        breastData = genBreastData(bodyData,gender,age);
        breastOutlineData = genBreastOutlineData(breastData,gender,age);
    }
    // 生成乳晕
    let areolaData, areolaData1, areolaData2;
    areolaData = genAreolaData(bodyData,breastData,gender,age);
    areolaData1 = areolaData.res1;
    areolaData2 = areolaData.res2;
    // 生成乳头
    let nippleData, nippleData1, nippleData2;
    nippleData = genNippleData(bodyData,areolaData.nipple,gender,age);
    nippleData1 = nippleData.res1;
    nippleData2 = nippleData.res2;

    let backHairData,foreHairData,bangsData;
    if(!bald){
        // 生成前发
        foreHairData = genForeHairData(faceData,gender,color,grd);
        // 生成刘海
        // if(r(0,100)<20){
        //     bangsData = genBangsData(faceData,gender,color,grd);
        // }
    }
    // 生成背发
    if(r(0,100)<10){
        backHairData = genBackHairData(faceData,gender,color,grd);
    }

    let eyeShadowData, eyeShadowData1, eyeShadowData2;
    // 生成眼影
    if(r(0,30)<(50-age)&&gender==2&&age>18&&age<55){
        eyeShadowData = genEyeShadowData(faceData,eyesData);
        eyeShadowData1 = eyeShadowData.res1;
        eyeShadowData2 = eyeShadowData.res2;
    }

    let cheekData, cheekData1, cheekData2;
    // 生成腮红
    if(r(0,180)<(50-age)&&gender==2&&age>15&&age<60){
        cheekData = genCheekData(faceData);
        cheekData1 = cheekData.res1;
        cheekData2 = cheekData.res2;
    }

    let glassData;
    // 生成眼镜
    if(r(0,100)<5){
        glassData = genGlassData(faceData,gender);
    }

    let clothData;
    // 生成衣服
    if(r(0,100)<=100){
        clothData = genClothData(bodyData,gender);
    }

    res = {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        clothData,
        eyeShadowData1,
        eyeShadowData2,
        cheekData1,
        cheekData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        hairColor,
    }
    return res;
}
export function paintAvatar(ctx,avatarData,canvasWidth,canvasHeight,showBg){ // 根据肖像数据进行绘制
    let fill = (data,mode) =>{ // 填充
        let {
            color, strokeColor, alpha,
            grd, topY, bottomY, leftX, rightX,
            rgrd, radial,
            noStroke,
        } = data;
        if(!noStroke){
            ctx.stroke();
        }
        if(color){
            let grdStyle;
            if(grd){ // 线性渐变
                if(data.test) console.log(`画`,data.topY,data.bottomY);
                grdStyle = ctx.createLinearGradient(leftX||500,topY||0,rightX||500,bottomY||1000);
                grdStyle.addColorStop(0,grd);
                grdStyle.addColorStop(1,`rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`);
            }
            else if(rgrd){ // 扩散渐变
                // console.log(`扩散渐变`,radial,rgrd);
                grdStyle = ctx.createRadialGradient(radial.x1,radial.y1,radial.r1,radial.x2,radial.y2,radial.r2);
                grdStyle.addColorStop(0,rgrd);
                grdStyle.addColorStop(1,`rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`);
            }
            else{
                grdStyle = `rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`;
            }
            ctx.fillStyle = grdStyle;
            ctx.fill();
        }
    };
    let drawData = (data,mode) =>{ // 画
        let { color, outline, topY, bottomY, grd, rgrd, radial, lineWidth, strokeColor, alpha, noStroke, } = data;
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.lineWidth = lineWidth||1;
        if(strokeColor){
            ctx.strokeStyle = `rgba(${strokeColor.r},${strokeColor.g},${strokeColor.b},${strokeColor.alpha||1})`;
        }
        else{
            ctx.strokeStyle = '#000';
        }
        for(let option of outline){
            let mode = option[0];
            switch(mode){
                case 0: // 移动
                    ctx.moveTo(option[1],option[2],);
                break;
                case 1: // 直线
                    ctx.lineTo(option[1],option[2],);
                break;
                case 2: // 曲线
                    ctx.quadraticCurveTo(option[1],option[2],option[3],option[4],);
                break;
                case 3: // 圆
                    ctx.moveTo(option[2]+option[1],option[3],);
                    ctx.arc(option[2],option[3],option[1],0,2*Math.PI);
                    ctx.closePath();
                break;
            }
        }
        fill(data,mode);
    }
    let drawClothData = (data,mode) =>{ // 画衣服
        for(let i=0;i<data.length;i++){
            let frag = data[i];
            drawData(frag);
        }
    }
    let transferedData = transferAvatarSize(avatarData,canvasWidth);
    let {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        clothData,
        eyeShadowData1,
        eyeShadowData2,
        cheekData1,
        cheekData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        hairColor,
    } = transferedData;

    ctx.clearRect(0,0,canvasWidth,canvasHeight);
    // 绘制BG
    if(showBg){
        let midWidth = canvasWidth/2;
        let rd1 = canvasWidth/5, rd2 = canvasWidth*4/5;
        let bggrd = ctx.createRadialGradient(midWidth,midWidth,rd1,midWidth,midWidth,rd2);
        bggrd.addColorStop(0,`rgba(${hairColor.color.r},${hairColor.color.g},${hairColor.color.b},.1)`);
        bggrd.addColorStop(1,`rgba(${hairColor.color.r},${hairColor.color.g},${hairColor.color.b},.9)`);
        ctx.fillStyle = bggrd;
        ctx.fillRect(0,0,canvasWidth,canvasHeight);
    }

    if(backHairData){
        drawData(backHairData);
    }
    drawData(earsData);
    drawData(bodyData);
    drawData(collarData);
    if(breastData){
        // 画乳房阴影
        ctx.save();
        drawData({ // 身体裁剪
            outline: bodyData.outline,
            noStroke: true,
        });
        ctx.clip();
        if(breastShadowData){
            drawData(breastShadowData);
        }
        ctx.restore();

        // 画乳房
        drawData(breastData);

        // 画乳晕和乳头
        ctx.save();
        drawData(breastOutlineData);
        ctx.clip();
        drawData(areolaData1);
        drawData(areolaData2);
        drawData(nippleData1);
        drawData(nippleData2);

        ctx.restore();
    }
    else{
        drawData(areolaData1);
        drawData(areolaData2);
        drawData(nippleData1);
        drawData(nippleData2);
    }

    if(clothData){ // 画衣服
        drawClothData(clothData);
    }

    drawData(faceData); // 画脸

    ctx.save();
    drawData({ // 脸部裁剪
        outline: faceData.outline,
        noStroke: true,
    });
    ctx.clip();
    if(cheekData1){
        drawData(cheekData1);
    }
    if(cheekData2){
        drawData(cheekData2);
    }

    if(eyeShadowData1){
        drawData(eyeShadowData1);
    }
    if(eyeShadowData2){
        drawData(eyeShadowData2);
    }
    if(eyeskinsData){
        drawData(eyeskinsData);
    }
    if(lashData){
        drawData(lashData);
    }
    drawData(noseData);
    drawData(lipData);
    if(bottomLipData){
        drawData(bottomLipData);
    }
    if(bracketsData){
        drawData(bracketsData);
    }
    if(nasoData){
        drawData(nasoData);
    }
    if(topMoustacheData){
        drawData(topMoustacheData);
    }
    ctx.restore();

    drawData(eyesData);
    ctx.save();
    ctx.clip();
    drawData(eyeoutballsData);
    if(eyeinballsData){
        drawData(eyeinballsData);
    }
    ctx.restore();
    drawData(browsData);

    ctx.save();
    drawData({ // 脸部裁剪
        outline: faceData.outline,
        noStroke: true,
    });
    ctx.clip();
    if(glassData){
        drawData(glassData);
    }
    ctx.restore();

    if(foreHairData){
        drawData(foreHairData);
    }
    if(bangsData){
        drawData(bangsData);
    }
}

function transferAvatarSize(data,canvasWidth){
    let faceData = cloneObj(data.faceData);
    let earsData = cloneObj(data.earsData);
    let browsData = cloneObj(data.browsData);
    let eyesData = cloneObj(data.eyesData);
    let eyeskinsData = cloneObj(data.eyeskinsData);
    let lashData = cloneObj(data.lashData);
    let eyeoutballsData = cloneObj(data.eyeoutballsData);
    let eyeinballsData = cloneObj(data.eyeinballsData);
    let noseData = cloneObj(data.noseData);
    let lipData = cloneObj(data.lipData);
    let bottomLipData = cloneObj(data.bottomLipData);
    let topMoustacheData = cloneObj(data.topMoustacheData);
    let bracketsData = cloneObj(data.bracketsData);
    let nasoData = cloneObj(data.nasoData);
    let collarData = cloneObj(data.collarData);
    let breastData = cloneObj(data.breastData);
    let breastOutlineData = cloneObj(data.breastOutlineData);
    let breastShadowData = cloneObj(data.breastShadowData);
    let bodyData = cloneObj(data.bodyData);
    let backHairData = cloneObj(data.backHairData);
    let foreHairData = cloneObj(data.foreHairData);
    let bangsData = cloneObj(data.bangsData);
    let cheekData1 = cloneObj(data.cheekData1);
    let cheekData2 = cloneObj(data.cheekData2);
    let areolaData1 = cloneObj(data.areolaData1);
    let areolaData2 = cloneObj(data.areolaData2);
    let nippleData1 = cloneObj(data.nippleData1);
    let nippleData2 = cloneObj(data.nippleData2);
    let glassData = cloneObj(data.glassData);
    let eyeShadowData1 = cloneObj(data.eyeShadowData1);
    let eyeShadowData2 = cloneObj(data.eyeShadowData2);
    let clothData = cloneObj(data.clothData);
    let hairColor = cloneObj(data.hairColor);

    faceData.outline = formatPx(faceData.outline,canvasWidth);
    faceData.leftX = formatPx(faceData.leftX,canvasWidth);
    faceData.topY = formatPx(faceData.topY,canvasWidth);
    faceData.rightX = formatPx(faceData.rightX,canvasWidth);
    faceData.bottomY = formatPx(faceData.bottomY,canvasWidth);
    faceData.radial.x1 = formatPx(faceData.radial.x1,canvasWidth);
    faceData.radial.y1 = formatPx(faceData.radial.y1,canvasWidth);
    faceData.radial.r1 = formatPx(faceData.radial.r1,canvasWidth);
    faceData.radial.x2 = formatPx(faceData.radial.x2,canvasWidth);
    faceData.radial.y2 = formatPx(faceData.radial.y2,canvasWidth);
    faceData.radial.r2 = formatPx(faceData.radial.r2,canvasWidth);

    earsData.outline = formatPx(earsData.outline,canvasWidth);

    browsData.outline = formatPx(browsData.outline,canvasWidth);

    eyesData.outline = formatPx(eyesData.outline,canvasWidth);
    eyesData.lineWidth = formatPx(eyesData.lineWidth,canvasWidth);

    if(eyeskinsData){
        eyeskinsData.outline = formatPx(eyeskinsData.outline,canvasWidth);
        eyeskinsData.lineWidth = formatPx(eyeskinsData.lineWidth,canvasWidth);
    }

    if(lashData){
        lashData.outline = formatPx(lashData.outline,canvasWidth);
        lashData.lineWidth = formatPx(lashData.lineWidth,canvasWidth);
    }

    eyeoutballsData.outline = formatPx(eyeoutballsData.outline,canvasWidth);
    eyeoutballsData.topY = formatPx(eyeoutballsData.topY,canvasWidth);
    eyeoutballsData.bottomY = formatPx(eyeoutballsData.bottomY,canvasWidth);

    if(eyeinballsData){
        eyeinballsData.outline = formatPx(eyeinballsData.outline,canvasWidth);
        eyeinballsData.topY = formatPx(eyeinballsData.topY,canvasWidth);
        eyeinballsData.bottomY = formatPx(eyeinballsData.bottomY,canvasWidth);
    }

    noseData.outline = formatPx(noseData.outline,canvasWidth);

    lipData.outline = formatPx(lipData.outline,canvasWidth);

    if(bottomLipData){
        bottomLipData.outline = formatPx(bottomLipData.outline,canvasWidth);
    }

    if(topMoustacheData){
        topMoustacheData.outline = formatPx(topMoustacheData.outline,canvasWidth);
    }

    if(nasoData){
        nasoData.outline = formatPx(nasoData.outline,canvasWidth);
    }
    if(collarData){
        collarData.outline = formatPx(collarData.outline,canvasWidth);
    }

    if(breastData&&breastOutlineData){
        breastData.outline = formatPx(breastData.outline,canvasWidth);
        breastOutlineData.outline = formatPx(breastOutlineData.outline,canvasWidth);
        if(breastShadowData){
            breastShadowData.outline = formatPx(breastShadowData.outline,canvasWidth);
            breastShadowData.radial.x1 = formatPx(breastShadowData.radial.x1,canvasWidth);
            breastShadowData.radial.y1 = formatPx(breastShadowData.radial.y1,canvasWidth);
            breastShadowData.radial.r1 = formatPx(breastShadowData.radial.r1,canvasWidth);
            breastShadowData.radial.x2 = formatPx(breastShadowData.radial.x2,canvasWidth);
            breastShadowData.radial.y2 = formatPx(breastShadowData.radial.y2,canvasWidth);
            breastShadowData.radial.r2 = formatPx(breastShadowData.radial.r2,canvasWidth);
        }

        breastData.nipple[0] = formatPx(breastData.nipple[0],canvasWidth);
        breastData.nipple[1] = formatPx(breastData.nipple[1],canvasWidth);
        if(breastData.leftX||breastData.leftX==0){
            breastData.leftX = formatPx(breastData.leftX,canvasWidth);
            breastData.topY = formatPx(breastData.topY,canvasWidth);
            breastData.rightX = formatPx(breastData.rightX,canvasWidth);
            breastData.bottomY = formatPx(breastData.bottomY,canvasWidth);
        }
    }
    if(bracketsData){
        bracketsData.outline = formatPx(bracketsData.outline,canvasWidth);
    }

    bodyData.outline = formatPx(bodyData.outline,canvasWidth);
    bodyData.radial.x1 = formatPx(bodyData.radial.x1,canvasWidth);
    bodyData.radial.y1 = formatPx(bodyData.radial.y1,canvasWidth);
    bodyData.radial.r1 = formatPx(bodyData.radial.r1,canvasWidth);
    bodyData.radial.x2 = formatPx(bodyData.radial.x2,canvasWidth);
    bodyData.radial.y2 = formatPx(bodyData.radial.y2,canvasWidth);
    bodyData.radial.r2 = formatPx(bodyData.radial.r2,canvasWidth);
    bodyData.cp1[0] = formatPx(bodyData.cp1[0]);
    bodyData.cp1[1] = formatPx(bodyData.cp1[1]);
    bodyData.cpi[0] = formatPx(bodyData.cpi[0]);
    bodyData.cpi[1] = formatPx(bodyData.cpi[1]);

    if(foreHairData){
        foreHairData.outline = formatPx(foreHairData.outline,canvasWidth);
        foreHairData.topY = formatPx(foreHairData.topY,canvasWidth);
        foreHairData.bottomY = formatPx(foreHairData.bottomY,canvasWidth);
    }

    if(bangsData){
        bangsData.outline = formatPx(bangsData.outline,canvasWidth);
        bangsData.topY = formatPx(bangsData.topY,canvasWidth);
        bangsData.bottomY = formatPx(bangsData.bottomY,canvasWidth);
    }

    if(backHairData){
        backHairData.outline = formatPx(backHairData.outline,canvasWidth);
        backHairData.topY = formatPx(backHairData.topY,canvasWidth);
        backHairData.bottomY = formatPx(backHairData.bottomY,canvasWidth);
    }

    if(glassData){
        glassData.outline = formatPx(glassData.outline,canvasWidth);
    }

    if(eyeShadowData1){
        eyeShadowData1.outline = formatPx(eyeShadowData1.outline,canvasWidth);
        eyeShadowData1.topY = formatPx(eyeShadowData1.topY,canvasWidth);
        eyeShadowData1.bottomY = formatPx(eyeShadowData1.bottomY,canvasWidth);
        eyeShadowData1.leftX = formatPx(eyeShadowData1.leftX,canvasWidth);
        eyeShadowData1.rightX = formatPx(eyeShadowData1.rightX,canvasWidth);
    }
    if(eyeShadowData2){
        eyeShadowData2.outline = formatPx(eyeShadowData2.outline,canvasWidth);
        eyeShadowData2.topY = formatPx(eyeShadowData2.topY,canvasWidth);
        eyeShadowData2.bottomY = formatPx(eyeShadowData2.bottomY,canvasWidth);
        eyeShadowData2.leftX = formatPx(eyeShadowData2.leftX,canvasWidth);
        eyeShadowData2.rightX = formatPx(eyeShadowData2.rightX,canvasWidth);
    }

    if(cheekData1){
        cheekData1.outline = formatPx(cheekData1.outline,canvasWidth);
        cheekData1.radial.x1 = formatPx(cheekData1.radial.x1,canvasWidth);
        cheekData1.radial.y1 = formatPx(cheekData1.radial.y1,canvasWidth);
        cheekData1.radial.r1 = formatPx(cheekData1.radial.r1,canvasWidth);
        cheekData1.radial.x2 = formatPx(cheekData1.radial.x2,canvasWidth);
        cheekData1.radial.y2 = formatPx(cheekData1.radial.y2,canvasWidth);
        cheekData1.radial.r2 = formatPx(cheekData1.radial.r2,canvasWidth);
    }
    if(cheekData2){
        cheekData2.outline = formatPx(cheekData2.outline,canvasWidth);
        cheekData2.radial.x1 = formatPx(cheekData2.radial.x1,canvasWidth);
        cheekData2.radial.y1 = formatPx(cheekData2.radial.y1,canvasWidth);
        cheekData2.radial.r1 = formatPx(cheekData2.radial.r1,canvasWidth);
        cheekData2.radial.x2 = formatPx(cheekData2.radial.x2,canvasWidth);
        cheekData2.radial.y2 = formatPx(cheekData2.radial.y2,canvasWidth);
        cheekData2.radial.r2 = formatPx(cheekData2.radial.r2,canvasWidth);
    }

    if(areolaData1){
        areolaData1.outline = formatPx(areolaData1.outline,canvasWidth);
        areolaData1.radial.x1 = formatPx(areolaData1.radial.x1,canvasWidth);
        areolaData1.radial.y1 = formatPx(areolaData1.radial.y1,canvasWidth);
        areolaData1.radial.r1 = formatPx(areolaData1.radial.r1,canvasWidth);
        areolaData1.radial.x2 = formatPx(areolaData1.radial.x2,canvasWidth);
        areolaData1.radial.y2 = formatPx(areolaData1.radial.y2,canvasWidth);
        areolaData1.radial.r2 = formatPx(areolaData1.radial.r2,canvasWidth);
    }
    if(areolaData2){
        areolaData2.outline = formatPx(areolaData2.outline,canvasWidth);
        areolaData2.radial.x1 = formatPx(areolaData2.radial.x1,canvasWidth);
        areolaData2.radial.y1 = formatPx(areolaData2.radial.y1,canvasWidth);
        areolaData2.radial.r1 = formatPx(areolaData2.radial.r1,canvasWidth);
        areolaData2.radial.x2 = formatPx(areolaData2.radial.x2,canvasWidth);
        areolaData2.radial.y2 = formatPx(areolaData2.radial.y2,canvasWidth);
        areolaData2.radial.r2 = formatPx(areolaData2.radial.r2,canvasWidth);
    }


    if(nippleData1){
        nippleData1.outline = formatPx(nippleData1.outline,canvasWidth);
        nippleData1.radial.x1 = formatPx(nippleData1.radial.x1,canvasWidth);
        nippleData1.radial.y1 = formatPx(nippleData1.radial.y1,canvasWidth);
        nippleData1.radial.r1 = formatPx(nippleData1.radial.r1,canvasWidth);
        nippleData1.radial.x2 = formatPx(nippleData1.radial.x2,canvasWidth);
        nippleData1.radial.y2 = formatPx(nippleData1.radial.y2,canvasWidth);
        nippleData1.radial.r2 = formatPx(nippleData1.radial.r2,canvasWidth);
    }
    if(nippleData2){
        nippleData2.outline = formatPx(nippleData2.outline,canvasWidth);
        nippleData2.radial.x1 = formatPx(nippleData2.radial.x1,canvasWidth);
        nippleData2.radial.y1 = formatPx(nippleData2.radial.y1,canvasWidth);
        nippleData2.radial.r1 = formatPx(nippleData2.radial.r1,canvasWidth);
        nippleData2.radial.x2 = formatPx(nippleData2.radial.x2,canvasWidth);
        nippleData2.radial.y2 = formatPx(nippleData2.radial.y2,canvasWidth);
        nippleData2.radial.r2 = formatPx(nippleData2.radial.r2,canvasWidth);
    }

    if(clothData){
        for(let frag of clothData){
            frag.outline = formatPx(frag.outline,canvasWidth);
            if(frag.radial){
                frag.radial.x1 = formatPx(frag.radial.x1,canvasWidth);
                frag.radial.y1 = formatPx(frag.radial.y1,canvasWidth);
                frag.radial.r1 = formatPx(frag.radial.r1,canvasWidth);
                frag.radial.x2 = formatPx(frag.radial.x2,canvasWidth);
                frag.radial.y2 = formatPx(frag.radial.y2,canvasWidth);
                frag.radial.r2 = formatPx(frag.radial.r2,canvasWidth);
            }
            if(frag.topY){
                frag.topY = formatPx(frag.topY,canvasWidth);
            }
            if(frag.bottomY){
                frag.bottomY = formatPx(frag.bottomY,canvasWidth);
            }
            if(frag.leftX){
                frag.leftX = formatPx(frag.leftX,canvasWidth);
            }
            if(frag.rightX){
                frag.rightX = formatPx(frag.rightX,canvasWidth);
            }
            if(frag.lineWidth){
                frag.lineWidth = formatPx(frag.lineWidth,canvasWidth);
            }
        }
    }

    return {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        eyeShadowData1,
        eyeShadowData2,
        cheekData1,
        cheekData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        clothData,
        hairColor,
    };
}
function _scale(x,y,ox,oy,rate){
    let offset = [x-ox,y-oy];
    if(rate>=1){
        return [Math.round(x+offset[0]*(rate-1)),Math.round(y+offset[1]*(rate-1))];
    }
    else if(rate>0){
        return [Math.round(x-offset[0]*rate),Math.round(y-offset[1]*rate)];
    }
}
function formatPx(data,canvasWidth){
    let rate = 1000/canvasWidth;
    if(typeof data === 'object'){
        return Array.from(data,item=>{
            let res = [];
            if(item[0]==0||item[0]==1||item[0]==4){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate)];
            }
            else if(item[0]==2){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate),parseInt(item[3]/rate),parseInt(item[4]/rate)];
            }
            else if(item[0]==3){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate),parseInt(item[3]/rate)];
            }
            else{
                res = cloneObj(item);
            }
            return res;
        });
    }
    else{
        return parseInt(data/rate);
    }
}
function mirX(x){
    return x+2*(500-x);
}
function mid(val1,val2){
    return Math.round((val1+val2)/2);
}

export function genForeHairData(faceData,gender,color,grd,hairName){ // 生成前发型
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalForeHairTemplates,...maleForeHairTemplates,...femaleForeHairTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleForeHairTemplates = [...generalForeHairTemplates,...maleForeHairTemplates,];
        let _femaleForeHairTemplates = [...generalForeHairTemplates,...femaleForeHairTemplates,];
        if(gender==1){ // 男
            rHair = _maleForeHairTemplates[r(0,_maleForeHairTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleForeHairTemplates[r(0,_femaleForeHairTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a;
    let offset = [a[0]-center[0],a[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-faceData.c[0])*2; // 头部宽度
    let height = faceData.b[1]-faceData.a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,107)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
                option[2] = vector[1];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[2] = vector1[1];
                option[3] = vector2[0];
                option[4] = vector2[1];
            }
        }
    }
    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        name: rHair.name,
    }
    return res;
}
export function genBangsData(faceData,gender,color,grd,hairName){ // 生成刘海
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalBangsTemplates,...maleBangsTemplates,...femaleBangsTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleBangsTemplates = [...generalBangsTemplates,...maleBangsTemplates,];
        let _femaleBangsTemplates = [...generalBangsTemplates,...femaleBangsTemplates,];
        if(gender==1){ // 男
            rHair = _maleBangsTemplates[r(0,_maleBangsTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleBangsTemplates[r(0,_femaleBangsTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a, b = faceData.b, c = faceData.c;
    let offset = [b[0]-center[0],b[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-c[0])*2; // 头部宽度
    let height = b[1]-a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,104)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
                option[2] = vector[1];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[2] = vector1[1];
                option[3] = vector2[0];
                option[4] = vector2[1];
            }
        }
    }
    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        alpha: .96,
        name: rHair.name,
    }
    return res;
}
export function genBackHairData(faceData,gender,color,grd,hairName){ // 生成后发型
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalBackHairTemplates,...maleBackHairTemplates,...femaleBackHairTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleBackHairTemplates = [...generalBackHairTemplates,...maleBackHairTemplates,];
        let _femaleBackHairTemplates = [...generalBackHairTemplates,...femaleBackHairTemplates,];
        if(gender==1){ // 男
            rHair = _maleBackHairTemplates[r(0,_maleBackHairTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleBackHairTemplates[r(0,_femaleBackHairTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a;
    let offset = [a[0]-center[0],a[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-faceData.c[0])*2; // 头部宽度
    let height = faceData.b[1]-faceData.a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    widthScaleRate *= r(90,110)/100;
    heightScaleRate *= r(80,120)/100;
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,104)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[3] = vector2[0];
            }
        }
    }

    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        name: rHair.name,
    }
    return res;
}
export function genGlassData(faceData,gender,glassName){ // 生成眼镜
    let res,rGlass;
    if(glassName){
        for(let glass of glassTemplates){
            if(glass.name==glassName){
                rGlass = glass;
                break;
            }
        }
    }
    else{
        rGlass = glassTemplates[r(0,glassTemplates.length-1)];
    }
    let center = [...rGlass.center];
    let lineWidthRange = rGlass.lineWidthRange;
    let const_outline = [...rGlass.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let e = faceData.e;
    let offset = [0,e[1]-center[1]];
    for(let option of outline){
        if(option[0]==0||option[0]==1){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else if(option[0]==2){
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // // 缩放
    let width = (500-faceData.e[0])*2; // 脸宽
    let height = faceData.e[1]-faceData.d[1]; // 眼高
    let widthScaleRate = width/170; // 水平缩放比率
    let heightScaleRate = height/95; // 垂直缩放比率
    for(let option of outline){
        if(option[0]==0||option[0]==1){
            option[1] = 500-Math.round((500-option[1])*widthScaleRate);
            option[2] = e[1]-Math.round((e[1]-option[2])*heightScaleRate);
        }
        else if(option[0]==2){
            option[1] = 500-Math.round((500-option[1])*widthScaleRate);
            option[2] = e[1]-Math.round((e[1]-option[2])*heightScaleRate);
            option[3] = 500-Math.round((500-option[3])*widthScaleRate);
            option[4] = e[1]-Math.round((e[1]-option[4])*heightScaleRate);
        }
    }

    // 输出
    res = {
        outline,
        strokeColor: genGlassColor(gender),
        lineWidth: r(lineWidthRange[0],lineWidthRange[1]),
        name: rGlass.name,
    }
    return res;
}
export function genClothData(bodyData,gender,clothName){ // 生成衣服
    let res,rCloth;
    let {a,b,c,d,e,f,g,h,i1,i2,j,k,l,cp1,cp2,cp3,cp4,cp5,cp6,cpi,cp7,cp8,} = bodyData;
    if(clothName){
        let clothTemplates = [...generalClothTemplates,...maleClothTemplates,...femaleClothTemplates,];
        for(let cloth of clothTemplates){
            if(cloth.name==clothName){
                rCloth = cloth;
                break;
            }
        }
    }
    else{
        let _maleClothTemplates = [...generalClothTemplates,...maleClothTemplates,];
        let _femaleClothTemplates = [...generalClothTemplates,...femaleClothTemplates,];
        if(gender==1){ // 男
            rCloth = _maleClothTemplates[r(0,_maleClothTemplates.length-1)];
        }
        else{ // 女
            rCloth = _femaleClothTemplates[r(0,_femaleClothTemplates.length-1)];
        }
    }

    // 校准锚点
    let data = cloneObj(rCloth.data);
    for(let frag of data){
        for(let option of frag.outline){
            if(isNaN(option[0])){
                let mode = ANCHOR_MAP[option[0]];
                let pname = option[0].substring(0,option[0].length-1); // a,b,c,d,e,f,g,h,i1,i2,j,k
                let pside = option[0][option[0].length-1]; // 1 或 2
                let bodyPoint = bodyData[pname];
                if(mode!=1){ // 除了 h 点，曲线
                    let bodyCurvePointName = BODY_CURVEPOINT_MAP[pname];
                    let bodyCurvePoint = bodyData[bodyCurvePointName];
                    if(pside==1){
                        option[3] = bodyPoint[0];
                    }
                    else{
                        option[3] = mirX(bodyPoint[0]);
                    }
                    option[4] = bodyPoint[1];
                    if(bodyCurvePoint){ // 如果有曲点（即不是 c 点）
                        if(pside==1){
                            option[1] = bodyCurvePoint[0];
                        }
                        else{
                            option[1] = mirX(bodyCurvePoint[0]);
                        }
                        option[2] = bodyCurvePoint[1];
                    }
                }
                else{ // h点，直线
                    if(pside==1){
                        option[1] = bodyPoint[0];
                    }
                    else{
                        option[1] = mirX(bodyPoint[0]);
                    }
                    option[2] = bodyPoint[1];
                }
                option[0] = mode;
            }
        }
    }

    // 输出
    res = data;
    return res;
}

function genHairColor(gender){ // 生成发色
    let color, grd;
    let basicColor = [{ // 黑
        r: r(10,30),
        g: r(10,30),
        b: r(10,30),
    },{ // 橙黄
        r: r(234,254),
        g: r(154,174),
        b: r(86,106),
    }];
    if(r(0,100)<50){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,gender==1?50:255),
            g: r(0,gender==1?50:155),
            b: r(0,200),
        };
    }
    if(r(0,100)<90){
        let grds = ['#222','#fff','#A0522D'];
        grd = grds[r(0,grds.length-1)];
    }
    return { color, grd, };
}
function genEyeColor(flag){ // 生成瞳色
    let color, grd;
    let basicColor = [];
    if(flag==1){
        basicColor = [{
            r: r(40,60),
            g: r(40,60),
            b: r(40,60),
        },{
            r: r(240,250),
            g: r(240,250),
            b: r(240,250),
        },];
    }
    else if(flag==2){
        basicColor = [{
            r: r(40,60),
            g: r(40,60),
            b: r(40,60),
        },];
    }
    if(r(0,100)<90){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,200),
            g: r(0,200),
            b: r(0,200),
        };
    }
    let grds = flag==1?['#777','#fff']:['#111','#777'];
    grd = grds[r(0,grds.length-1)];
    return { color, grd, };
}
function genGlassColor(gender){ // 生成瞳色
    let color;
    let basicColor = [{ // 黑
        r: r(10,30),
        g: r(10,30),
        b: r(10,30),
    },{ // 纯黑
        r: 0,
        g: 0,
        b: 0,
    }];
    if(r(0,100)<90){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,gender==1?50:255),
            g: r(0,gender==1?50:155),
            b: r(0,200),
        };
    }
    return color;
}
function genLipColor(){ // 生成唇色
    let color = {
        r: r(255,255),
        g: r(89,109),
        b: r(61,81),
    };
    return { color, };
}
function genCheekColor(){ // 生成腮红色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rgrd = `rgba(${r(255,255)},${r(189,209)},${r(151,181)},${r(40,50)/100})`;
    return { color, rgrd };
}
function genAreolaColor(){ // 生成乳晕色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rcolor = {
        r: r(255,255),
        g: r(199,209),
        b: r(171,181),
    }
    let rgrd = `rgba(${rcolor.r},${rcolor.g},${rcolor.b},${r(80,90)/100})`;
    return { color, rgrd };
}
function genNippleColor(){ // 生成乳头色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rcolor = {
        r: r(255,255),
        g: r(169,179),
        b: r(131,141),
    }
    let rgrd = `rgba(${rcolor.r},${rcolor.g},${rcolor.b},1)`;
    return { color, rgrd };
}
function genEyeShadowColor(){ // 生成眼影色
    let grd = `rgba(${r(255,255)},${r(10,84)},${r(10,155)},${r(60,100)/100})`;
    return { grd };
}

function shrinkYoung(age){
    let pct;
    if(age>=18){
        pct = 100;
    }
    else if(age>=15){
        pct = age*5;
    }
    else{
        pct = age*4;
    }
    return pct/100;
}
function genFaceData(gender,age,bald){ // 生成脸
    let a,b,c,d,e,f,g,h,i;
    let color;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    // let ysr = 0; // 年幼影响比率
    if(gender==2){ // 女
        a = [500,r(220,240)+ysr*145]; // 头顶 千分比
        b = [500,a[1]+r(47,53)]; // 刘海中心
        c = [r(317,330)+ysr*15,b[1]+r(125,135)]; // 脸左
        d = [r(425,445)+ysr*10,b[1]+r(152,158)]; // 左眉毛中心
        e = [d[0],d[1]+r(52,58-ysr*8)+ysr*20]; // 左眼下
        f = [500,e[1]+r(117,127-ysr*10)-ysr*30]; // 鼻下
        g = [500,f[1]+r(32,39-ysr*5)-ysr*30]; // 唇上
        h = [r(412,422-ysr*10)+ysr*12,c[1]+r(258,267-ysr*5)-ysr*30]; // 颊左
        i = [500,h[1]+r(40,50-ysr*5)-ysr*20]; // 下巴

        let colorDeep = r(2,7);
        color = {
            r: 255,
        };
        color.g = color.r-r(10,15)-colorDeep;
        color.b = color.g-10-colorDeep;
        if(r(0,100)<1){ // 黑人
            color.r -= 30;
            color.g /= 1.4;
            color.b /= 1.7;
        }
    }
    else{ // 男
        a = [500,r(220,240)+ysr*145]; // 头顶 千分比
        b = [500,a[1]+r(45,55)-ysr*1]; // 刘海中心
        c = [r(309,321)+ysr*25,b[1]+r(132,138)-ysr*10]; // 脸左
        d = [r(415,440)+ysr*10,b[1]+r(145,155)-ysr*10]; // 左眉毛中心
        e = [d[0],d[1]+r(50,60-ysr*8)+ysr*20]; // 左眼下
        f = [500,e[1]+r(129,134-ysr*8)-ysr*30]; // 鼻下
        g = [500,f[1]+r(37,56-ysr*5)-ysr*30]; // 唇上
        h = [r(390+ysr*15,402-ysr*10)+ysr*22,c[1]+r(265,275-ysr*11)-ysr*40]; // 颊左
        i = [500,h[1]+r(35+ysr*18,75-ysr*18)-ysr*12]; // 下巴

        let colorDeep = r(2,30);
        color = {
            r: 255,
        };
        color.g = color.r-r(10,15)-colorDeep;
        color.b = color.g-10-colorDeep;
        if(r(0,100)<3){ // 黑人
            color.r -= 30;
            color.g /= 1.4;
            color.b /= 1.7;
        }
    }

    // 生成头部轮廓
    let cp1,cp2,cp3;
    let oldImpact = 0;
    if(gender==2){ // 女
        if(age>60){
            oldImpact = Math.round(age*.9);
        }
        cp1 = [r(c[0]+5,c[0]+10),r(a[1],a[1]+20)];
        cp2 = [r(c[0]+0,c[0]+15-ysr*15)+oldImpact*.6,r(h[1]-90,h[1]-65+ysr*10)+oldImpact];
        cp3 = [r(h[0]+14,h[0]+23),r(h[1]+15,h[1]+27-ysr*20)];
    }
    else{ // 男
        if(age>60){
            oldImpact = Math.round(age*1.4);
        }
        cp1 = [r(c[0]+5,c[0]+10),r(a[1],a[1]+20)];
        cp2 = [r(c[0]+1,c[0]+10-ysr*9)+oldImpact*.2,r(h[1]-100,h[1]-75+ysr*10)+oldImpact];
        cp3 = [r(h[0]+22,h[0]+29),r(h[1]+40-ysr*20,h[1]+35-ysr*20)];
    }

    let radialX, radialY;
    radialX = 500;
    radialY = a[1]-r(0,(i[1]-a[1])/10)-60;
    let res = {
        a,b,c,d,e,f,g,h,i,
        topY: a[1],
        bottomY: i[1],
        leftX: c[0],
        rightX: mirX(c[0]),
        outline: [],
        color,
        radial: {
            x1: radialX,
            y1: radialY,
            r1: 1,
            x2: radialX,
            y2: radialY,
            r2: 300,
        },
    };
    if(bald){
        res.rgrd = `#fafafa`;
    }
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 a-c1
    res.outline.push([2,cp2[0],cp2[1],h[0],h[1]]); // 曲线 c1-h1
    res.outline.push([2,cp3[0],cp3[1],i[0],i[1]]); // 曲线 h1-i
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(h[0]),h[1]]); // 曲线 i-h2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 h2-c2
    res.outline.push([2,mirX(cp1[0]),cp1[1],a[0],a[1]]); // 曲线 c2-a

    return res;
}
function genBodyData(faceData,gender,age){ // 生成身体
    let a,b,c,d,e,f,g,h,i1,i2,j,k,l;
    let { topY, bottomY, leftX, rightX, } = faceData;
    let faceWidth = Math.round(rightX-leftX); // 脸宽
    let faceHeight = Math.round(bottomY-topY); // 脸高
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let muscle = r(-5,5); // 肌肉量
    let shoulderWidth;
    let armWidth;
    if(gender==2){ // 女
        shoulderWidth = faceWidth-330;
        armWidth = 98-ysr*30+r(-1,1);
        a = [faceData.g[0],faceData.g[1]];
        b = [faceData.h[0]+r(5,7)+ysr*30,faceData.g[1]];
        c = [b[0]+(r(20,25)/100)*(500-b[0]),b[1]+r(55+ysr*25,80)-ysr*30];
        d = [b[0]-(r(15,20)/100)*30-73+ysr*30,c[1]+r(80,90)-ysr*20];
        e = [d[0]-(r(10+ysr*4,20-ysr*4)/100)*30-shoulderWidth-ysr*30,d[1]+6+r(1,3)-ysr*7];
        f = [e[0]-(r(1,40)/100)*20-110+ysr*5,e[1]+r(40,75)-ysr*5];
        g = [f[0]-10+r(-5,5),1200];
        h = [g[0]+armWidth,1200];
        i1 = [g[0]+armWidth+3,e[1]+225+r(-5,5)-ysr*60];
        i2 = [i1[0]+5+ysr*5,i1[1]];
        j = [g[0]+armWidth+25-ysr*15,i2[1]+120];
        k = [g[0]+armWidth+29-ysr*15,1200];
        l = [faceData.g[0],1200];
    }
    else{ // 男
        shoulderWidth = faceWidth-320+ysr*30;
        armWidth = 125+muscle*(2.5-ysr*3)-ysr*63;
        a = [faceData.g[0],faceData.g[1]];
        b = [faceData.h[0]+r(5,7)+ysr*30,faceData.g[1]];
        c = [b[0]+(r(18,24)/100)*(500-b[0])-muscle*(2-ysr*2),b[1]+r(70,80)-ysr*30];
        d = [b[0]-(r(15,20)/100)*30-110+ysr*70,c[1]+r(80,90)-ysr*20];
        e = [d[0]-(r(10,20)/100)*10-shoulderWidth,d[1]+8+r(2,5)-ysr*10];
        f = [e[0]-(r(5,10)/100)*30-100+ysr*15-muscle*(4-ysr*4.5),e[1]+85-ysr*15];
        g = [f[0]-15+ysr*12+r(-6,6),1200];
        h = [g[0]+armWidth,1200];
        i1 = [g[0]+armWidth+3,e[1]+245+r(-5,5)-ysr*60];
        i2 = [i1[0]+5+ysr*12-muscle*(.2-ysr*.2),i1[1]];
        j = [g[0]+armWidth+19-muscle*(.1-ysr*.1),i2[1]+120-ysr*120];
        k = [g[0]+armWidth+20-muscle*(.2-ysr*.2),1200];
        l = [faceData.g[0],1200];
    }
    // 生成身体轮廓
    let cp1,cp2,cp3,cp4,cp5,cp6,cpi,cp7,cp8;
    if(gender==2){ // 女
        cp1 = [c[0]+r(-2,10),b[1]+r(0,20)];
        cp2 = [c[0]+r(-10,5),d[1]-r(0,20)];
        cp3 = [d[0]-r(0,4),d[1]+r(0,4)];
        cp4 = [f[0]+r(15,26),e[1]+r(0,15)];
        cp5 = [f[0]-r(2,10-ysr*10)-10+ysr*5,f[1]+(g[1]-f[1])*.2];
        cp6 = [i1[0]-ysr*7,i1[1]+50];
        cpi = [i1[0]+1,i1[1]-50];
        cp7 = [i2[0]-5+ysr*5,i2[1]+30];
        cp8 = [k[0],j[1]+30];
    }
    else{ // 男
        cp1 = [c[0]+r(-2,10),b[1]+r(0,20)];
        cp2 = [c[0]+r(-10,5),d[1]-r(0,20)-muscle*3.8+ysr*10];
        cp3 = [d[0]-r(0,3),d[1]+r(0,3)];
        cp4 = [f[0]+r(15,26),e[1]+8-muscle*(1-ysr*1.2)];
        cp5 = [g[0]-2-ysr*2-muscle*(2-ysr*2.2),mid(g[1],f[1])+r(-15,25)];
        cp6 = [i1[0]+muscle*(.8-ysr*1),i1[1]+50];
        cpi = [i1[0]+1,i1[1]-50];
        cp7 = [i2[0]+ysr*2,i2[1]+30];
        cp8 = [k[0]-ysr*5,j[1]+30];
    }
    let res = {
        a,b,c,d,e,f,g,h,i1,i2,j,k,l,
        cp1,cp2,cp3,cp4,cp5,cp6,cpi,cp7,cp8,
        color: faceData.color,
        outline: [],
        rgrd: `#222`,
        muscle,
        radial: {
            x1: 500,
            y1: a[1]-100,
            r1: 1,
            x2: 500,
            y2: a[1]-100,
            r2: 220,
        },
    };
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([1,b[0],b[1]]); // 直线 a-b1
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp2[0],cp2[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([2,cp4[0],cp4[1],f[0],f[1]]); // 曲线 e1-f1
    res.outline.push([2,cp5[0],cp5[1],g[0],g[1]]); // 曲线 f1-g1
    res.outline.push([1,h[0],h[1]]); // 直线 g1-h1
    res.outline.push([2,cp6[0],cp6[1],i1[0],i1[1]]); // 曲线 h1-i11
    res.outline.push([2,cpi[0],cpi[1],i2[0],i2[1]]); // 曲线 i11-i21
    res.outline.push([2,cp7[0],cp7[1],j[0],j[1]]); // 曲线 i21-j1
    res.outline.push([2,cp8[0],cp8[1],k[0],k[1]]); // 曲线 j1-k1
    res.outline.push([1,l[0],l[1]]); // 直线 k1-l
    res.outline.push([1,mirX(k[0]),k[1]]); // 直线 l-k2
    res.outline.push([2,mirX(cp8[0]),cp8[1],mirX(j[0]),j[1]]); // 曲线 k2-j2
    res.outline.push([2,mirX(cp7[0]),cp7[1],mirX(i2[0]),i2[1]]); // 曲线 j2-i12
    res.outline.push([2,mirX(cpi[0]),cpi[1],mirX(i1[0]),i1[1]]); // 曲线 i12-i22
    res.outline.push([2,mirX(cp6[0]),cp6[1],mirX(h[0]),h[1]]); // 曲线 i22-h2
    res.outline.push([1,mirX(g[0]),g[1]]); // 直线 h2-g2
    res.outline.push([2,mirX(cp5[0]),cp5[1],mirX(f[0]),f[1]]); // 曲线 g2-f2
    res.outline.push([2,mirX(cp4[0]),cp4[1],mirX(e[0]),e[1]]); // 曲线 f2-e2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 e2-d2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 d2-c2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 c2-b2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线 b2-a

    return res;
}
function genEarsData(faceData,gender,age){ // 生成双耳朵
    let a,b,c,d;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==2){ // 女
        a = [faceData.c[0]+5,faceData.c[1]+50];
        b = [faceData.c[0]-r(10,18),a[1]+r(5,20)];
        c = [faceData.c[0]+(faceData.h[0]-faceData.c[0])/3+ysr*20,a[1]+r(80,105)-ysr*40];
        d = [a[0]+30,a[1]+40];
    }
    else{ // 男
        a = [faceData.c[0]+5,faceData.c[1]+50];
        b = [faceData.c[0]-r(20,25),a[1]+r(15,25)];
        c = [faceData.c[0]+10+(faceData.h[0]-faceData.c[0])/4+ysr*20,a[1]+r(100,125)-ysr*40];
        d = [a[0]+30,a[1]+40];
    }

    let res = {
        a,b,c,d,
        color: faceData.color,
        outline: [],
    };

    // 生成双耳轮廓
    let cp1,cp2,cp3;
    cp1 = [r(a[0]-5,b[0]+5),r(a[1]-17,a[1]-22)];
    cp2 = [r(c[0]-5,b[0]+2),r(c[1]-10,c[1]+10)];
    cp3 = [r(c[0]+5,c[0]+20),r(c[1]-5,c[1]-20)];

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([1,a[0],a[1]]); // 直线
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 c2-d2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线

    return res;
}
function genBrowsData(faceData,gender,color){ // 生成双眉
    let a,b,c,d;
    if(gender==2){ // 女
        a = [faceData.d[0]+r(25,35),faceData.d[1]+r(-5,20)];
        b = [faceData.d[0]+r(-5,5),faceData.d[1]-r(0,5)];
        c = [faceData.d[0]-r(50,55),faceData.d[1]+r(-15,5)];
        d = [faceData.d[0]+r(-5,5),faceData.d[1]+r(0,8)];
    }
    else{ // 男
        a = [faceData.d[0]+r(25,35),faceData.d[1]+r(-5,20)];
        b = [faceData.d[0]+r(-5,5),faceData.d[1]-r(0,10)];
        c = [faceData.d[0]-r(70,95),faceData.d[1]+r(-15,5)];
        d = [faceData.d[0]+r(-5,5),faceData.d[1]+r(0,8)];
    }

    let res = {
        a,b,c,d,
        outline: [],
        color,
        alpha: 1,
    };

    // 生成双眉轮廓
    let cp1,cp2,cp3;
    cp1 = [r(a[0]-10,a[0]-5),r(a[1]-8,a[1]-3)];
    cp2 = [r(c[0],c[0]+3),r(c[1]-10,c[1]-5)];
    cp3 = [r(d[0]-20,d[0]-10),r(d[1],c[1])];

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([1,a[0],a[1]]); // 直线
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 c2-d2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线

    return res;
}
function genEyesData(faceData,gender,age,personalities){ // 生成双眼
    let a,b,c,lineWidth;
    let min,max;
    let calmness = personalities[3],
        libidinal = personalities[0];
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==2){ // 女
        a = [faceData.e[0]+r(40,55),faceData.e[1]-r(-15,15)];
        b = [faceData.e[0]-r(50,70),faceData.e[1]-r(-10,10)];
        if(a[1]>b[1]){
            min = b[1];
            max = a[1];
        }
        else{
            min = a[1];
            max = b[1];
        }
        lineWidth = r(2,7);
    }
    else{ // 男
        a = [faceData.e[0]+r(45,55),faceData.e[1]-r(-15,15)];
        b = [faceData.e[0]-r(55,70),faceData.e[1]-r(-10,10)];
        if(a[1]>b[1]){
            min = b[1];
            max = a[1];
        }
        else{
            min = a[1];
            max = b[1];
        }
        lineWidth = r(1,4);
    }
    if(a[0]>485){
        a[0] = 485;
    }
    if(b[1]>a[1]){
        b[1] = a[1]-r(0,5);
    }
    c = [Math.round((a[0]+b[0])/2),min+Math.round((max-min)/2)];

    // 生成双眼轮廓
    let cp1,cp2;
    if(gender==2){ // 女
        let cpTop = r(b[1]-15,a[1]-35);
        let cpBottom = r(b[1]+15,a[1]+35);
        // 欲望值修正
        if(libidinal>70){
            cpTop += Math.round(15*r(15,45)/100);
            cpBottom -= Math.round(15*r(15,45)/100);
        }
        cp1 = [r(b[0]+15,a[0]-15),cpTop];
        cp2 = [r(b[0]+15,a[0]-15),cpBottom];
    }
    else{ // 男
        let cpTop = r(b[1]-20,a[1]-35);
        let cpBottom = r(b[1]+20,a[1]+35);
        // 欲望值修正
        if(libidinal>70){
            cpTop += Math.round(15*r(15,45)/100);
            cpBottom -= Math.round(15*r(15,45)/100);
        }
        cp1 = [r(b[0]+15,a[0]-15),cpTop];
        cp2 = [r(b[0]+15,a[0]-15),cpBottom];
    }
    if(cp1[0]<c[0]){
        cp1[0] = c[0]+r(5,15);
    }
    if(cp2[0]<c[0]){
        cp2[0] = c[0]+r(5,15);
    }

    let res = {
        a,b,c,
        cp1,cp2,
        outline: [],
        lineWidth,
        color: {
            r: 255,
            g: 255,
            b: 255,
        },
        alpha: 1,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],a[0],a[1]]); // 曲线 b1-a1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(a[0]),a[1]]); // 曲线 b2-a2

    return res;
}
function genEyeSkinsData(eyeData){ // 生成双眼皮
    let { lineWidth, cp1, cp2, a, b, c, } = eyeData;
    let d,e;
    let dw = r(3,9);
    let ew = dw+r(5,10);
    d = [a[0],a[1]-dw];
    e = [b[0],a[1]-ew];

    let res = {
        d,e,
        outline: [],
        lineWidth: Math.floor(lineWidth/2),
        alpha: 1,
    };
    if(res.lineWidth<1){
        res.lineWidth = 1;
    }

    // 生成双眼皮轮廓
    res.outline.push([0,d[0],d[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1]-dw,e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([0,mirX(d[0]),d[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1]-dw,mirX(e[0]),e[1]]); // 曲线 d2-e2

    return res;
}
function genLashData(eyeData,gender,age){ // 生成睫毛
    let { lineWidth, cp1, cp2, a, b, c, } = eyeData;
    let eyeWidth = a[0]-b[0];
    let eyeHeight = cp2[1]-cp1[1];
    let lashMode = r(0,1); // [0:上部|1:下部]
    let lashCount;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(age<=13){
        lashMode = 0;
    }
    if(lashMode==0){ // 睫毛在上部
        lashCount = r(6,9);
    }
    else{ // 睫毛在下部
        lashCount = r(2,3);
    }
    let xRange,yRange,xItv,yItv;
    if(lashMode==0){ // 睫毛在上部
        xRange = [b[0]-12,a[0]-5];
        yRange = [cp1[1]-eyeHeight/5,cp1[1]+eyeHeight/5];
    }
    else{ // 睫毛在下部
        xRange = [b[0]-12,c[0]];
        yRange = [c[1]+4,cp2[1]+5];
    }
    // 起始点为 a，终点为 ep
    let eps = [];
    if(lashMode==0){ // 睫毛在上部
        xItv = Math.round((xRange[1]-xRange[0])/(lashCount+0));
        yItv = Math.round((yRange[1]-yRange[0])/(lashCount+0));
        for(let i=0;i<lashCount;i++){
            let newEp = [xRange[1]-i*xItv-i*3,yRange[0]+i*yItv];
            eps.push(newEp);
        }
        for(let i=0;i<2;i++){
            eps[i][1] += Math.round((c[1]-eps[i][1])*.4);
        }
    }
    else{ // 睫毛在下部
        xItv = Math.round((xRange[1]-xRange[0])/(lashCount+0));
        yItv = Math.round((yRange[1]-yRange[0])/(lashCount+2));
        for(let i=0;i<lashCount;i++){
            let newEp = [xRange[0]+i*xItv,yRange[0]+i*yItv];
            eps.push(newEp);
        }
    }

    let res = {
        lashCount,
        outline: [],
        lineWidth: 1,
        alpha: .5,
    };

    // 生成睫毛轮廓
    for(let i=0;i<eps.length;i++){
        let ep = eps[i];
        if(lashMode==0){ // 上部
            res.outline.push([0,a[0],a[1]]); // 移动
            res.outline.push([2,c[0],c[1],ep[0],ep[1]]); // 曲线
        }
        else{ // 下部
            res.outline.push([0,a[0],a[1]]); // 移动
            res.outline.push([1,ep[0],ep[1]]); // 直线
        }
    }
    for(let i=0;i<eps.length;i++){
        let ep = eps[i];
        if(lashMode==0){ // 上部
            res.outline.push([0,mirX(a[0]),a[1]]); // 移动
            res.outline.push([2,mirX(c[0]),c[1],mirX(ep[0]),ep[1]]); // 曲线
        }
        else{ // 下部
            res.outline.push([0,mirX(a[0]),a[1]]); // 移动
            res.outline.push([1,mirX(ep[0]),ep[1]]); // 直线
        }
    }

    return res;
}
function genEyeoutballsData(eyeData,gender,age){ // 生成外双瞳
    let radius;
    let c = eyeData.c;
    let oldImpact = 0;
    if(gender==2){ // 女
        if(age>=50){
            oldImpact = age*.14;
        }
        radius = r(12,25-oldImpact);
    }
    else{ // 男
        if(age>=50){
            oldImpact = age*.19;
        }
        radius = r(7,24-oldImpact);
    }
    let eyeColor = genEyeColor(1);
    let {color,grd,} = eyeColor;

    let res = {
        radius,
        outline: [],
        color,
        grd,
        topY: c[1]-15,
        bottomY: c[1]+15,
        alpha: 1,
    };

    // 生成双瞳
    res.outline.push([0,c[0],c[1]]); // 移动
    res.outline.push([3,radius,c[0],c[1]]); // 左外瞳
    res.outline.push([0,mirX(c[0]),c[1]]); // 移动
    res.outline.push([3,radius,mirX(c[0]),c[1]]); // 右外瞳
    return res;
}
function genEyeinballsData(eyeData,eyeoutballsData,gender,age){ // 生成内双瞳
    let radius;
    let outRadius = eyeoutballsData.radius;
    let c = eyeData.c;
    if(gender==2){ // 女
        radius = Math.round(outRadius*r(40,80)/100);
    }
    else{ // 男
        radius = Math.round(outRadius*r(20,80)/100);
    }
    let eyeColor = genEyeColor(2);
    let {color,grd,} = eyeColor;

    let res = {
        radius,
        outline: [],
        color,
        grd,
        topY: c[1]-5,
        bottomY: c[1]+5,
        alpha: 1,
    };

    // 生成双瞳
    res.outline.push([0,c[0],c[1]]); // 移动
    res.outline.push([3,radius,c[0],c[1]]); // 左内瞳
    res.outline.push([0,mirX(c[0]),c[1]]); // 移动
    res.outline.push([3,radius,mirX(c[0]),c[1]]); // 右内瞳
    return res;
}
function genNoseData(faceData,gender,age){ // 生成鼻子
    let a,b,c,lineWidth;
    let dir;
    let ysr = 1-shrinkYoung(age);
    if(gender==2){ // 女
        a = [faceData.f[0],faceData.e[1]+r(10,25)+ysr*50];
        b = [faceData.f[0]-r(-7,7),faceData.f[1]-r(0,5)-ysr*50];
        dir = b[0]<0?-1:1; // 鼻子方向：[0:向左|1:向右]
        c = [(faceData.f[0]+r(0,6))*dir,faceData.f[1]-ysr*40];
        lineWidth = 1;
    }
    else{ // 男
        a = [faceData.f[0],faceData.e[1]+r(10,30)+ysr*50];
        b = [faceData.f[0]-r(-9,9),faceData.f[1]-r(0,8)-ysr*50];
        dir = b[0]<0?0:1; // 鼻子方向：[0:向左|1:向右]
        c = [(faceData.f[0]+r(0,12))*dir,faceData.f[1]-ysr*40];
        lineWidth = 1;
    }
    if(b[0]==0){
        b[0] = 5;
    }
    if(b[0]<2&&b[0]>-2){
        b[0] *= 2;
    }
    // 生成鼻子轮廓
    let cp1,cp2;
    if(gender==2){ // 女
        cp1 = [r(a[0],(a[0]+9)*dir),r(b[1]-50,b[1])];
        cp2 = [r(c[0],(c[0]+4)*dir),r(b[1],b[1]+10)];
    }
    else{ // 男
        cp1 = [r(a[0],(a[0]+10)*dir),r(b[1]-50,b[1])];
        cp2 = [r(c[0],(c[0]+7)*dir),r(b[1],b[1]+16)];
    }

    let res = {
        a,b,c,
        outline: [],
        lineWidth,
        strokeColor: '#747443',
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b-c

    return res;
}
function genLipData(faceData,gender,age,emotion){ // 生成嘴唇
    let a,b,lineWidth;
    let lipWidth;
    let lipColor = genLipColor();
    let strokeColor,color;
    let ysr = 1-shrinkYoung(age);
    if(gender==2){ // 女
        lipWidth = r(25,50-ysr*10);
        a = [faceData.g[0]+lipWidth,faceData.g[1]];
        b = [faceData.g[0]-lipWidth,faceData.g[1]];
        lineWidth = 1;
        if(age>=18&&age<50&&r(0,100)<10){
            strokeColor = lipColor.color;
            lineWidth = r(1,3);
        }
        if(age>=16&&age<60){
            color = {
                r: 255,
                g: 99,
                b: 71,
            };
        }
    }
    else{ // 男
        lipWidth = r(30,80-ysr*30);
        a = [faceData.g[0]+lipWidth,faceData.g[1]];
        b = [faceData.g[0]-lipWidth,faceData.g[1]];
        lineWidth = 1;
    }
    // 生成嘴唇轮廓
    if(!emotion){
        emotion = r(0,100);
    }
    let arcDeg = Math.round(emotion/100*24-9); // (-9 - 15)
    let cp1;
    if(gender==2){ // 女
        cp1 = [faceData.g[0]+r(-25,25),faceData.g[1]+arcDeg];
    }
    else{ // 男
        cp1 = [faceData.g[0]+r(-25,25),faceData.g[1]+arcDeg];
    }

    let res = {
        a,b,
        outline: [],
        lineWidth,
        lipWidth,
        strokeColor,
        color,
        emotion,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b

    return res;
}
function genBottomLipData(faceData,lipData,gender){ // 生成下嘴唇
    let a,b,lineWidth;
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let lipWidth = lipData.lipWidth/3+r(-4,4);
    let marginTop = r(9,15);
    if(gender==2){ // 女
        a = [faceData.g[0]+lipWidth,faceData.g[1]+marginTop];
        b = [faceData.g[0]-lipWidth,faceData.g[1]+marginTop];
        lineWidth = 1;
    }
    else{ // 男
        a = [faceData.g[0]+lipWidth,faceData.g[1]+marginTop];
        b = [faceData.g[0]-lipWidth,faceData.g[1]+marginTop];
        lineWidth = 1;
    }
    // 生成嘴唇轮廓
    let cp1;
    if(gender==2){ // 女
        cp1 = [faceData.g[0],r(a[1]-9,a[1]+4)];
    }
    else{ // 男
        cp1 = [faceData.g[0],r(a[1]-9,a[1]+4)];
    }

    let res = {
        a,b,
        outline: [],
        lineWidth,
        strokeColor,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b

    return res;
}
function genTopMoustacheData(faceData,lipData,color,grd){ // 生成上胡子
    let { lineWidth, lipWidth, } = lipData;
    let halfLipWidth = lipWidth/2;
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let a,b,c;
    a = [faceData.g[0]-halfLipWidth-r(40,60),faceData.g[1]-r(14,22)];
    b = [a[0]+r(-7,0),a[1]+r(15,35)];
    c = [faceData.g[0]+r(-10,0),a[1]+r(-12,12)];

    let res = {
        a,b,c,
        outline: [],
        color,
        strokeColor,
    };
    if(res.lineWidth<1){
        res.lineWidth = 1;
    }
    let cp1 = [r(b[0],b[0]+10),r(a[1],parseInt((b[1]+a[1])/2))];

    // 生成上胡子轮廓
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([1,b[0],b[1]]); // 直线 a1-b1
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([1,mirX(b[0]),b[1]]); // 直线 a2-b2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(c[0]),c[1]]); // 曲线 b2-c2

    return res;
}
function genNasoData(faceData,eyeData,gender,age){ // 生成法令纹
    let a,b;
    a = [eyeData.a[0]+r(0,10),eyeData.a[1]+r(5,20)];
    b = [a[0]-r(35,60),a[1]+r(70,100)+age*.4];
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let res = {
        a,b,
        outline: [],
        alpha: .8,
        strokeColor,
    };
    let cp1 = [a[0]-r(0,15),a[1]+r(20,40)+age*1.2];

    // 生成上胡子轮廓
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a1-b1

    return res;
}
function genCheekData(faceData){ // 生成腮红
    let radial1 = {},radial2 = {};
    let { c, e, } = faceData;

    let weight = e[0]-r(10,40);
    let yShift = e[1]+r(55,65);
    let radius = r(55,85);

    radial1.x1 = weight;
    radial1.y1 = yShift;
    radial1.r1 = 0;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(weight);
    radial2.y1 = yShift;
    radial2.r1 = 0;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genCheekColor(2);
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: faceData.color,
        rgrd,
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: faceData.color,
        rgrd,
        noStroke:true,
    };

    // 生成双瞳
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左内瞳
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右内瞳
    return { res1, res2, };
}
function genEyeShadowData(faceData,eyeData){ // 生成眼影
    let res1 = {}, res2 = {};
    let { a, b, c, cp1, cp2, } = eyeData;
    let { color, } = faceData;

    let _a = [a[0],a[1]];
    let _b = [b[0]-r(15,25),b[1]+r(-7,7)];
    let _cp1 = [cp1[0],cp1[1]-r(-5,16)];
    let _cp2 = [cp2[0],cp2[1]+r(-5,16)];

    let leftX = _b[0];
    let rightX = _a[0];
    let topY = _cp1[1];
    let bottomY = _cp2[1];

    if(_b[0]<faceData.c[0]+10){
        _b[0] = faceData.c[0]+10;
    }

    let grd = genEyeShadowColor().grd;

    res1 = {
        outline: [],
        color,
        grd,
        leftX,
        rightX,
        topY,
        bottomY,
        noStroke: true,
    }
    res2 = {
        outline: [],
        color,
        grd,
        leftX: mirX(leftX),
        rightX: mirX(rightX),
        topY,
        bottomY,
        noStroke: true,
    }

    res1.outline.push([0,_a[0],_a[1]]); // 移动
    res1.outline.push([2,_cp1[0],_cp1[1],_b[0],_b[1]]); // 曲线 a1-b1
    res1.outline.push([2,_cp2[0],_cp2[1],_a[0],_a[1]]); // 曲线 b1-a1
    res2.outline.push([0,mirX(_a[0]),_a[1]]); // 移动
    res2.outline.push([2,mirX(_cp1[0]),_cp1[1],mirX(_b[0]),_b[1]]); // 曲线 a2-b2
    res2.outline.push([2,mirX(_cp2[0]),_cp2[1],mirX(_a[0]),_a[1]]); // 曲线 b2-a2

    return { res1, res2, };
}
function genBracketsData(faceData,lipData){ // 生成括号
    let res;
    let { a, b, } = lipData;
    let _a, _b, cp1;
    let strokeColor = {
        r: 40,
        g: 40,
        b: 40,
    };
    let halfHeight = r(10,15);
    let top = r(15,18);
    _a = [a[0]+r(0,9),a[1]-halfHeight*2+top];
    _b = [_a[0],a[1]+halfHeight+top];
    cp1 = [_a[0]+r(25,35),a[1]];

    res = {
        outline: [],
        alpha: .8,
        strokeColor,
    }

    res.outline.push([0,_a[0],_a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],_b[0],_b[1]]); // 曲线 a1-b1
    res.outline.push([0,mirX(_a[0]),_a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(_b[0]),_b[1]]); // 曲线 a2-b2

    return res;
}
function genCollarData(bodyData,gender,age){ // 生成锁骨
    let res;
    let a,b,c,d,e,f,g,h,i,j;
    let cp1,cp2,cp3,cp4,cp5,cp6;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let width = bodyData.c[0]-bodyData.e[0];

    a = [bodyData.e[0]+width*.2,bodyData.e[1]+width*.16];
    b = [a[0]+width*.8,a[1]+width*.25];
    c = [b[0]+width*.3,b[1]+width*.13];
    d = [bodyData.b[0],bodyData.b[1]];
    e = [bodyData.c[0],bodyData.c[1]];
    f = [bodyData.c[0]-width*.18,bodyData.d[1]-width*.01];
    // g = [f[0]-width*.03,f[1]-width*.06];
    i = [bodyData.cpi[0],bodyData.cpi[1]+25];
    j = [i[0]-width*.05,i[1]-width*.17];

    if(c[0]>492){
        c[0] = 492;
    }
    // if(f[0]>bodyData.c[0]-20){
    //     f[0] = bodyData.c[0]-20;
    // }

    let arc = [20,10];
    let arc2 = bodyData.c[0]-bodyData.d[0];
    cp1 = [mid(a[0],b[0])-arc[0]*1.5,a[1]+arc[1]*1.8];
    cp2 = [mid(b[0],c[0])+arc[0],b[1]+arc[1]*.43];
    // h = [cp2[0]+width*.05,cp2[1]-width*.01];
    cp3 = [bodyData.cp1[0],bodyData.cp1[1]];
    cp4 = [bodyData.c[0]-arc2*.12,f[1]-arc[1]*.8];
    // cp5 = [f[0]-arc2*.22,f[1]+arc2*.14];
    cp6 = [mid(i[0],j[0])+arc2*.05,j[1]+arc2*.05];

    res = {
        outline: [],
        strokeColor: {
            r: 80,
            g: 80,
            b: 80,
        },
    }

    res.outline.push([0,a[0],a[1]]); // 移动 a1
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([0,d[0],d[1]]); // 移动 d1
    res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([2,cp4[0],cp4[1],f[0],f[1]]); // 曲线 e1-f1
    // res.outline.push([0,g[0],g[1]]); // 移动到 g1
    // res.outline.push([2,cp5[0],cp5[1],h[0],h[1]]); // 曲线 f1-g1
    res.outline.push([0,i[0],i[1]]); // 移动到 i1
    res.outline.push([2,cp6[0],cp6[1],j[0],j[1]]); // 曲线 j1-j1

    res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(e[0]),e[1]]); // 曲线 d2-e2
    res.outline.push([2,mirX(cp4[0]),cp4[1],mirX(f[0]),f[1]]); // 曲线 e2-f2
    // res.outline.push([0,mirX(g[0]),g[1]]); // 移动到 g2
    // res.outline.push([2,mirX(cp5[0]),cp5[1],mirX(h[0]),h[1]]); // 曲线 g2-h2
    res.outline.push([0,mirX(i[0]),i[1]]); // 移动到 i1
    res.outline.push([2,mirX(cp6[0]),cp6[1],mirX(j[0]),j[1]]); // 曲线 j1-j1

    return res;
}
function genBreastData(bodyData,gender,age){ // 生成乳房
    let res;
    let a,b,c,d,e;
    let { muscle, color, } = bodyData;
    let cp1,cp2,cp3;
    let base = bodyData.cpi; // 腋窝坐标
    let shoulderWidth = bodyData.f[0]-bodyData.e[0]; // 肩宽
    let nipple; // 乳头坐标
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==1){ // 胸肌
        res = {
            outline: [],
            color,
            strokeColor: {
                r: 0,
                g: 0,
                b: 0,
            },
            lineWidth: 1.5,
            nipple: [bodyData.i2[0]+75-ysr*40,bodyData.i2[1]+25-ysr*25+r(-5,5)],
        }
        a = [base[0]-14+ysr*30,base[1]-32+ysr*64];
        b = [a[0]+90-ysr*40,a[1]+150-ysr*94];
        c = [b[0]+150-ysr*80,b[1]-12];
        if(c[0]>490){
            c[0] = 490;
        }
        d = [c[0]+80,a[1]+5];
        e = [c[0]+40,a[1]+75-ysr*75];
        if(d[0]>497){
            d[0] = 497;
        }
        if(e[0]>495){
            e[0] = 495;
        }
        cp1 = [b[0]-60+ysr*40,b[1]-3];
        cp2 = [e[0]+10,d[1]-18];

        res.outline.push([0,a[0],a[1]]); // 移动 a1
        res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
        res.outline.push([1,c[0],c[1]]); // 直线 b1-c1
        res.outline.push([0,d[0],d[1]]); // 移动 d1
        res.outline.push([1,e[0],e[1]]); // 直线 d1-e1
        res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
        res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
        res.outline.push([1,mirX(c[0]),c[1]]); // 直线 b2-c2
        res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d1
        res.outline.push([1,mirX(e[0]),e[1]]); // 直线 d1-e1
    }
    else if(gender==2){ // 乳房
        let size; // [1.25,5.3]
        if(age>=50){
            size = r(30,150-age)*.05;
        }
        else if(age>=18){
            size = r(50,106)*.05;
        }
        else if(age>=14){
            size = r(25,80)*.05;
        }
        else{
            size = r(25,40)*.05;
        }

        let qtSize = Math.round(size); // [1,3.16]
        let left = (3.2-qtSize)*8;
        let weight = r(1,10); // [1,10]
        if(age>=50){
            weight += age/5;
        }
        if(weight>10){
            weight = 10;
        }

        // weight = 10; //  TODO

        let top = 35-size*10;
        let round = qtSize*6+5;
        let showGap = false;

        a = [base[0]+left,base[1]+top];
        b = [base[0]+left+(5-size)*7+weight*3,base[1]+15+size*35+top];
        c = [base[0]+left+130+weight*1.5,base[1]+10+size*33+top];
        if(b[0]<base[0]+10||b[1]>base[1]+140){
            showGap = true;
        }
        if(showGap){
            d = [c[0]+(500-c[0])*.8,base[1]+size*7+30+top*.5];
            e = [500-(30-qtSize*5)+5+weight*1,base[1]+top*.5];
            if(d[0]>496){
                d[0] = 496;
            }
            if(e[0]>500){
                e[0] = 500;
            }
        }
        nipple = [b[0]+20-ysr*1+r(-20+ysr*20,20-ysr*20),b[1]-qtSize*3-20-ysr*20+r(-20+ysr*20,20-ysr*20)];

        cp1 = [mid(a[0],b[0])-round*1.6,mid(a[1],b[1])+qtSize*8];
        cp2 = [mid(b[0],c[0]),mid(b[1],c[1])+round*1.3];
        if(showGap){
            cp3 = [mid(d[0],e[0])+round*.2,mid(d[1],e[1])];
            if(cp3[0]>510){
                cp3[0] = 510;
            }
        }
        // let topY = cp2[1]-20-size*2.2;
        // if(topY>1199){
        //     topY = 1199;
        // }
        res = {
            outline: [],
            color,
            strokeColor: {
                r: 0,
                g: 0,
                b: 0,
                alpha: 0,
            },
            lineWidth: 1,
            noStroke: size<3&&r(8,16)>age,
            nipple,
            size,
            showGap,
        }

        res.outline.push([0,a[0],a[1]]); // 移动 a1
        res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
        res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
        if(showGap){
            res.outline.push([0,d[0],d[1]]); // 移动 d1
            res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
        }

        res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
        res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
        res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
        if(showGap){
            res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d2
            res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(e[0]),e[1]]); // 曲线 d2-e2
        }
    }
    return res;
}
function genBreastOutlineData(breastData,gender,age){ // 生成乳房轮廓
    let res;
    let { showGap, outline, } = breastData;
    if(gender==1){
        let a = [outline[0][1],outline[0][2],];
        let c = [outline[2][1],outline[2][2],];
        res = {
            outline: [],
            strokeColor: {
                r: 255,
                g: 0,
                b: 100,
            },
            noStroke: true,
        };
        for(let i=0;i<3;i++){
            res.outline.push(outline[i]);
        }
        let rX = c[0]+150;
        if(rX>500){
            rX = 500;
        }
        res.outline.push([1,rX,c[1]]); // 直线
        res.outline.push([1,rX,a[1]-100]); // 直线
        res.outline.push([1,a[0],a[1]-100]); // 直线
        res.outline.push([1,a[0],a[1]]); // 直线
        for(let i=5;i<8;i++){
            res.outline.push(outline[i]);
        }
        res.outline.push([1,mirX(rX),c[1]]); // 直线
        res.outline.push([1,mirX(rX),a[1]-100]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]-100]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]]); // 直线
    }
    else if(gender==2){
        let a = [outline[0][1],outline[0][2],];
        let c = [outline[2][3],outline[2][4],];
        res = {
            outline: [],
            strokeColor: {
                r: 255,
                g: 0,
                b: 100,
            },
            // test: 2,
            noStroke: true,
        };
        for(let i=0;i<3;i++){
            res.outline.push(outline[i]);
        }
        res.outline.push([1,500,c[1]]); // 直线
        res.outline.push([1,500,a[1]-130]); // 直线
        res.outline.push([1,a[0],a[1]-130]); // 直线
        res.outline.push([1,a[0],a[1]]); // 直线
        if(showGap){
            for(let i=5;i<8;i++){
                res.outline.push(outline[i]);
            }
        }
        else{
            for(let i=3;i<6;i++){
                res.outline.push(outline[i]);
            }
        }
        res.outline.push([1,500,c[1]]); // 直线
        res.outline.push([1,500,a[1]-130]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]-130]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]]); // 直线
    }

    return res;
}
function genBreastShadowData(bodyData,breastData,gender,age){ // 生成乳房阴影
    let res;
    let { showGap, outline, size, nipple, } = breastData;
    let _a = [outline[0][1],outline[0][2]];
    let _b = [outline[1][3],outline[1][4]];
    let _c = [outline[2][3],outline[2][4]];
    let _cp1 = [outline[1][1],outline[1][2]];
    let _cp2 = [outline[2][1],outline[2][2]];
    let a,b,c;
    let cp1,cp2,cp3;
    let radial = {}, radius = 0;
    let bodyColor = bodyData.color;

    radius = Math.sqrt(size)*180;

    a = [_a[0],_a[1]];
    b = [_b[0],_b[1]];
    c = [_c[0],_c[1]];
    cp1 = [_cp1[0],_cp1[1]];
    cp2 = [_cp2[0],_cp2[1]];
    cp3 = [_cp1[0]-size*3,b[1]+size*31];

    if(size<2.5){
        cp3[1] -= 9*(2.5-size);
    }

    radial.x1 = 500;
    radial.y1 = nipple[1];
    radial.r1 = 0;
    radial.x2 = radial.x1;
    radial.y2 = radial.y1;
    radial.r2 = radius;

    res = {
        outline: [],
        color: bodyData.color,
        rgrd: `rgba(${20},${20},${20})`,
        radial,
        noStroke: true,
        // strokeColor: {
        //     r: 255,
        //     g: 20,
        //     b: 0,
        // }
    }

    res.outline.push([0,a[0],a[1]]); // 移动 a1
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],a[0],a[1]]); // 曲线 c1-a1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(a[0]),a[1]]); // 曲线 c2-a2

    return res;
}
function genAreolaData(bodyData,breastData,gender,age){ // 生成乳晕
    let nipple;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(breastData&&breastData.nipple){
        nipple = breastData.nipple;
    }
    else{
        nipple = [bodyData.i2[0]+75-ysr*40,bodyData.i2[1]+25-ysr*25+r(-5,5)];
    }
    let radial1 = {},radial2 = {};

    let radius;
    if(gender==1){ // 男
        radius = r(15,25);
    }
    else if(gender==2){ // 女
        radius = r(15,45);
    }

    radial1.x1 = nipple[0];
    radial1.y1 = nipple[1];
    radial1.r1 = 0;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(nipple[0]);
    radial2.y1 = nipple[1];
    radial2.r1 = 0;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genAreolaColor();
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: bodyData.color,
        rgrd,
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: bodyData.color,
        rgrd,
        noStroke:true,
    };

    // 生成乳晕
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左乳晕
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右乳晕
    return { res1, res2, nipple, };
}
function genNippleData(bodyData,nipple,gender,age){ // 生成乳头
    let radial1 = {},radial2 = {};

    let radius = r(8,10);

    radial1.x1 = nipple[0];
    radial1.y1 = nipple[1];
    radial1.r1 = radius*3/5;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(nipple[0]);
    radial2.y1 = nipple[1];
    radial2.r1 = radius*3/5;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genNippleColor();
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: bodyData.color,
        rgrd,
        strokeColor: {
            r: 255,
            g: 10,
            b: 10,
            alpha: .9,
        },
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: bodyData.color,
        rgrd,
        strokeColor: {
            r: 255,
            g: 10,
            b: 10,
            alpha: .9,
        },
        noStroke:true,
    };

    // 生成乳头
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左乳头
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右乳头
    return { res1, res2, };
}



























//
