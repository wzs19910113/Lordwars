import { r, cloneObj, } from '../tools/utils';

/* 发型款式 */
export const generalForeHairTemplates = [
    {
        name: '散长',
        center: [500,255],
        outline:[[0,500,236],[2,418,228,364,262],[2,292,330,288,478],[2,288,548,268,602],[2,242,688,174,744],[2,280,670,314,508],[2,306,662,206,770],[2,166,822,172,852],[2,172,806,220,772],[2,314,666,330,514],[2,318,670,230,800],[2,204,862,232,902],[2,214,872,256,802],[2,340,698,366,516],[2,352,642,298,748],[2,250,840,290,910],[2,262,836,340,712],[2,388,638,398,538],[2,404,448,442,396],[2,460,438,500,450],[2,466,446,442,400],[2,430,418,420,438],[2,440,420,500,450],[2,460,392,440,348],[2,384,390,366,516],[2,378,396,436,352],[2,464,394,500,450],[0,500,236],[2,586,224,646,276],[2,710,320,712,472],[2,712,548,730,602],[2,758,688,826,744],[2,720,670,686,508],[2,694,662,794,770],[2,834,822,828,852],[2,828,806,780,772],[2,686,666,670,514],[2,682,670,770,800],[2,796,862,768,902],[2,786,872,744,802],[2,660,698,634,516],[2,646,642,702,748],[2,750,840,710,910],[2,738,836,660,712],[2,612,638,602,538],[2,596,448,558,396],[2,540,438,500,450],[2,534,446,558,400],[2,570,418,580,438],[2,562,424,500,450],[2,540,392,560,348],[2,616,390,634,516],[2,622,396,562,352],[2,536,394,500,450]],
        fixed: true,
    },
    {
        name: '混混',
        center: [500,228],
        outline:[[0,398,216],[1,404,160],[1,436,206],[1,466,140],[1,492,194],[1,542,134],[1,550,190],[1,602,144],[1,600,190],[1,660,158],[1,640,202],[1,708,176],[1,668,218],[1,772,224],[1,730,252],[1,794,276],[1,742,286],[1,796,358],[1,734,322],[1,770,404],[1,714,358],[1,752,432],[1,682,382],[1,698,434],[1,636,396],[1,656,458],[1,586,390],[1,600,464],[1,514,388],[1,474,472],[1,458,396],[1,390,462],[1,406,406],[1,356,466],[1,360,406],[1,304,450],[1,332,396],[1,260,446],[1,286,384],[1,228,420],[1,276,338],[1,196,324],[1,266,302],[1,226,252],[1,296,254],[1,286,202],[1,352,226],[1,342,176],[1,398,216],[0,474,328]]
    },
    {
        name: '魔王',
        center: [500,262],
        outline:[[0,500,184],[2,446,184,448,164],[2,388,192,388,224],[2,392,248,362,212],[2,328,268,322,232],[2,280,292,282,316],[2,210,300,266,332],[2,216,360,286,376],[2,216,376,264,388],[2,238,412,234,520],[2,256,432,268,508],[2,300,460,268,564],[2,296,504,350,644],[2,328,560,366,526],[2,366,528,366,456],[2,416,500,412,496],[2,442,464,432,424],[2,488,428,456,472],[2,492,468,500,428],[0,500,184],[2,554,184,572,168],[2,616,192,620,220],[2,608,248,656,232],[2,672,268,710,260],[2,724,292,710,324],[2,794,300,734,332],[2,784,360,730,368],[2,784,376,740,388],[2,762,412,766,520],[2,744,432,730,504],[2,704,460,724,536],[2,708,504,660,624],[2,672,560,638,512],[2,634,528,618,444],[2,584,500,608,532],[2,558,464,580,428],[2,516,428,520,476],[2,508,468,500,428],[0,500,308]]
    },
    {
        name: '渣男',
        center: [500,188],
        outline: [[0,500,166],[2,332,140,284,332],[2,280,442,254,542],[2,280,516,288,506],[2,290,562,268,676],[2,318,644,340,590],[2,360,574,374,638],[2,362,540,364,452],[2,400,348,416,340],[2,452,328,499,328],[0,500,166],[2,668,140,716,332],[2,718,442,746,542],[2,718,516,712,506],[2,708,562,728,676],[2,682,644,660,590],[2,640,574,626,638],[2,638,540,636,452],[2,600,348,584,340],[2,548,328,501,328]],
        fixed: true,
    },
    {
        name: '短发1',
        center: [500,218],
        outline:[[0,492,176],[2,370,196,302,276],[2,260,364,290,468],[2,310,552,360,644],[2,362,468,386,352],[2,378,408,374,448],[2,424,420,480,372],[2,480,376,450,412],[2,530,376,538,352],[2,538,364,496,420],[2,542,412,584,352],[2,588,384,572,408],[2,610,380,618,336],[2,618,352,626,640],[2,728,500,718,308],[2,668,196,572,184],[2,508,168,492,176],[0,496,292]]
    },
    {
        name: '短发2',
        center: [500,218],
        outline:[[0,484,176],[2,380,164,308,244],[2,254,316,284,394],[2,294,434,342,490],[2,342,446,352,352],[2,356,410,348,432],[2,400,420,466,372],[2,466,376,430,412],[2,530,376,538,352],[2,538,364,488,420],[2,542,412,592,352],[2,596,384,576,408],[2,626,380,646,352],[2,670,414,666,482],[2,692,446,712,406],[2,782,188,560,152],[2,494,152,484,176],[0,488,292]]
    },
    {
        name: '短发3',
        center: [500,218],
        outline:[[0,484,176],[2,392,164,320,264],[2,272,358,284,416],[2,300,462,364,496],[2,340,468,366,352],[2,358,408,358,436],[2,408,420,470,372],[2,470,376,438,412],[2,526,376,534,352],[2,534,364,488,420],[2,538,412,584,352],[2,588,384,568,408],[2,614,380,634,352],[2,676,468,632,488],[2,704,482,720,404],[2,730,328,684,246],[2,648,190,570,166],[2,528,156,484,176],[0,488,292]]
    },
    {
        name: '头盔',
        center: [500,236],
        outline:[[0,500,436],[2,408,408,356,428],[2,324,480,324,616],[2,246,404,290,290],[2,332,196,500,182],[0,500,436],[2,586,408,638,424],[2,672,486,666,626],[2,754,404,708,278],[2,646,182,500,182]],
        fixed: true,
    },
    {
        name: '青春',
        center: [500,220],
        outline:[[0,500,190],[2,352,180,286,320],[2,266,404,216,428],[2,252,446,294,424],[2,274,484,236,498],[2,278,502,320,490],[2,294,548,264,562],[2,304,552,324,536],[2,326,566,294,600],[2,328,594,360,544],[2,344,610,328,632],[2,406,578,388,410],[2,448,352,499,356],[0,500,190],[2,646,180,714,320],[2,734,404,784,428],[2,748,446,706,424],[2,726,484,764,498],[2,722,502,678,490],[2,706,548,736,562],[2,696,552,676,536],[2,674,566,706,600],[2,670,594,640,544],[2,654,610,670,632],[2,594,578,610,410],[2,552,352,501,356],[0,500,286]],
        fixed: true, // 不随机造型
    },
    {
        name: '后仰1',
        center: [500,155],
        outline:[[0,500,136],[2,376,140,328,206],[2,292,260,300,364],[2,336,280,380,256],[2,418,226,500,216],[0,499,136],[2,630,136,672,200],[2,712,268,698,364],[2,672,290,628,254],[2,582,226,501,216]],
        fixed: true,
    },
    {
        name: '后仰2',
        center: [500,162],
        outline:[[0,500,154],[2,370,158,320,220],[2,278,266,292,346],[2,300,368,304,384],[2,308,348,340,348],[2,342,304,384,306],[2,396,254,430,268],[2,448,234,470,248],[2,484,230,500,240],[0,500,154],[2,630,158,680,220],[2,722,266,708,346],[2,700,368,696,384],[2,692,348,660,348],[2,658,304,616,306],[2,604,254,570,268],[2,552,234,530,248],[2,516,230,500,240]],
        fixed: true,
    },
    {
        name: '后仰3',
        center: [500,162],
        outline:[[0,500,124],[2,456,122,414,152],[2,348,154,308,206],[2,260,282,274,346],[2,280,370,304,384],[2,310,342,332,358],[2,340,312,374,332],[2,382,286,414,314],[2,422,264,454,292],[2,472,254,500,274],[0,500,124],[2,544,122,586,152],[2,652,154,692,206],[2,740,282,726,346],[2,720,370,696,384],[2,690,342,668,358],[2,660,312,626,332],[2,618,286,586,314],[2,578,264,546,292],[2,528,254,500,274]],
        fixed: true,
    },
    {
        name: '后仰4',
        center: [500,162],
        outline:[[0,500,154],[2,370,158,320,220],[2,278,266,292,346],[2,300,368,306,394],[1,316,326],[1,356,352],[1,348,290],[1,390,318],[1,386,256],[1,422,286],[1,420,236],[1,450,262],[1,454,224],[1,478,250],[1,486,216],[1,500,244],[0,500,154],[2,630,158,680,220],[2,722,266,708,346],[2,700,368,694,394],[1,684,326],[1,644,352],[1,652,290],[1,610,318],[1,614,256],[1,578,286],[1,580,236],[1,550,262],[1,546,224],[1,522,250],[1,514,216],[1,500,244]],
        fixed: true,
    },
    {
        name: '颓废',
        center: [490,146],
        outline:[[0,500,84],[2,308,96,258,304],[2,224,436,254,636],[2,252,610,256,538],[2,264,616,278,652],[2,272,608,268,562],[2,286,626,298,642],[2,294,602,280,536],[2,296,616,322,650],[2,300,590,298,538],[2,296,516,304,392],[2,294,524,302,558],[2,306,532,310,512],[2,310,520,334,544],[2,316,480,316,462],[2,324,500,348,528],[2,340,404,374,320],[2,376,304,368,282],[2,388,376,404,384],[2,400,344,404,328],[2,404,354,428,388],[2,420,330,416,260],[2,416,326,482,398],[2,454,360,456,324],[2,468,374,502,404],[2,498,324,504,270],[2,494,350,548,404],[2,546,318,520,282],[2,546,330,558,374],[2,578,318,556,280],[2,566,314,576,360],[2,588,348,588,284],[2,644,390,614,510],[2,634,476,630,442],[2,640,466,632,514],[2,668,462,652,442],[2,670,474,654,534],[2,678,500,676,482],[2,678,516,678,524],[2,678,430,670,380],[2,686,480,676,542],[2,670,582,644,626],[2,680,596,694,552],[2,712,480,694,398],[2,716,534,692,650],[2,718,600,726,542],[2,726,600,716,642],[2,742,598,742,548],[2,746,600,734,648],[2,774,526,726,304],[2,668,92,500,84]],
        fixed: true,
    },
    {
        name: '乖巧',
        center: [500,255],
        outline: [[0,550,466],[2,512,442,500,394],[2,512,418,524,434],[2,550,456,590,464],[2,628,472,600,530],[2,632,496,626,466],[2,640,538,642,548],[2,640,508,642,468],[2,650,498,650,532],[2,660,500,644,428],[2,666,536,666,608],[2,708,520,674,436],[2,694,490,684,506],[2,746,534,792,534],[2,712,494,710,464],[2,724,516,828,512],[2,744,470,720,428],[2,760,488,820,490],[2,722,450,712,364],[2,700,296,668,266],[2,610,210,500,212],[0,470,480],[0,550,466],[2,496,448,498,394],[2,482,426,476,438],[2,466,458,410,464],[2,372,472,400,530],[2,368,496,374,466],[2,360,538,358,548],[2,360,508,358,468],[2,350,498,350,532],[2,340,500,356,428],[2,334,536,334,608],[2,292,520,326,436],[2,306,490,316,506],[2,254,534,208,534],[2,288,494,290,464],[2,276,516,172,512],[2,256,470,290,426],[2,240,488,180,490],[2,278,450,292,368],[2,304,280,352,248],[2,402,210,500,212],[0,530,480]],
        fixed: true,
    },
    {
        name: '自卑',
        center: [500,95],
        outline: [[0,500,58],[2,374,42,288,188],[2,262,252,268,306],[2,274,356,274,412],[2,284,388,286,358],[2,288,424,288,424],[2,296,398,302,368],[2,306,386,306,428],[2,314,412,316,350],[2,304,398,346,494],[2,326,334,340,300],[2,320,380,358,442],[2,342,350,366,288],[2,362,348,384,374],[2,368,338,390,276],[2,390,290,378,316],[2,396,284,422,270],[0,500,58],[2,626,42,712,190],[2,740,256,734,308],[2,724,350,726,412],[2,718,384,714,358],[2,712,424,712,424],[2,702,382,694,376],[2,694,386,694,428],[2,682,398,674,356],[2,680,410,642,498],[2,670,356,642,282],[2,672,388,628,446],[2,654,388,628,308],[2,640,332,610,358],[2,614,306,598,262],[2,604,306,596,326],[2,594,306,566,266],[2,566,312,530,338],[2,546,310,540,264],[2,538,320,504,338],[2,520,286,502,244],[2,484,292,498,322],[2,468,308,460,254],[2,464,298,488,324],[2,464,320,444,270],[2,448,296,448,308],[2,438,304,422,270],[0,174,208]],
        fixed: true,
    },
    {
        name: '班长',
        center: [500,220],
        outline:[[0,500,206],[2,300,182,270,352],[2,252,480,290,574],[2,306,624,290,666],[2,310,650,312,594],[2,318,628,314,664],[2,330,606,334,584],[2,326,626,330,652],[2,338,608,348,590],[2,348,612,350,642],[2,358,606,358,586],[2,362,612,366,642],[2,366,604,362,544],[2,358,478,372,452],[2,388,414,432,388],[2,390,408,382,476],[2,374,530,422,618],[2,386,536,404,474],[2,414,432,456,396],[2,508,364,536,370],[2,572,420,640,462],[2,664,494,638,560],[2,612,610,600,616],[2,640,594,646,560],[2,652,586,650,644],[2,652,602,664,568],[2,660,600,664,646],[2,670,604,670,586],[2,666,620,694,652],[2,678,626,686,588],[2,678,624,720,658],[2,696,576,708,538],[2,748,372,692,274],[2,600,148,500,206]],
        fixed:true,
    },
    {
        name: '刺客',
        center: [500,295],
        outline:[[0,428,454],[2,388,428,354,476],[2,358,440,360,400],[2,344,536,374,634],[2,294,534,318,430],[2,300,492,332,578],[2,286,528,268,450],[2,260,344,360,322],[2,442,426,428,454],[2,432,372,512,328],[2,626,290,692,346],[2,722,358,736,420],[2,746,456,740,508],[2,730,564,688,610],[2,718,544,712,504],[2,714,590,644,642],[2,692,582,636,420],[2,682,542,640,604],[2,656,554,626,506],[2,586,434,510,406],[2,564,428,590,460],[2,452,414,428,454],[2,432,400,360,322],[2,308,324,280,374],[2,342,270,422,284],[2,522,232,642,286],[2,692,320,696,346],[2,612,286,512,326],[2,434,370,428,454]],
        fixed:true,
    },
    {
        name: '科学家',
        center: [500,175],
        outline: [[0,516,164],[2,470,132,396,140],[2,454,164,426,178],[2,360,134,298,204],[2,352,204,342,240],[2,300,264,282,224],[2,266,272,284,294],[2,276,334,236,358],[2,286,390,240,414],[2,248,432,262,454],[2,248,478,240,448],[2,242,506,268,508],[2,232,570,280,598],[2,266,582,276,550],[2,276,636,346,618],[2,308,582,316,536],[2,306,570,378,612],[2,340,566,352,516],[2,376,476,356,436],[2,386,454,370,408],[2,414,424,400,352],[2,404,400,420,416],[2,426,340,496,342],[0,516,164],[2,534,146,488,106],[2,570,106,592,156],[2,648,118,724,206],[2,688,190,644,224],[2,716,176,754,308],[2,744,280,696,292],[2,766,292,764,386],[2,690,362,754,416],[2,716,416,730,454],[2,744,478,752,448],[2,750,506,724,508],[2,760,570,712,598],[2,726,582,716,550],[2,716,636,646,618],[2,684,582,676,536],[2,686,570,636,594],[2,652,566,640,516],[2,616,476,636,436],[2,606,454,622,408],[2,578,424,594,352],[2,588,400,572,416],[2,562,338,496,342]],
        fixed: true,
    },
    {
        name: '头盔1',
        center: [500,288],
        outline:[[0,500,484],[2,472,486,472,486],[2,462,458,476,426],[2,470,424,466,490],[2,446,492,430,492],[2,426,430,438,416],[2,424,448,424,492],[2,384,508,358,502],[2,354,452,368,408],[2,356,436,350,504],[2,326,498,300,532],[2,278,472,292,404],[2,314,340,370,300],[2,418,262,500,260],[0,500,484],[2,528,486,528,486],[2,538,458,524,426],[2,530,424,534,490],[2,554,492,570,492],[2,574,430,562,416],[2,576,448,576,492],[2,616,508,642,502],[2,646,452,632,408],[2,644,436,650,504],[2,674,498,700,532],[2,722,472,708,404],[2,686,340,630,300],[2,582,262,500,260]],
        fixed: true,
    },
    {
        name: '头盔2',
        center: [500,299],
        outline:[[0,500,484],[2,472,486,472,486],[2,462,460,476,430],[2,470,428,466,490],[2,446,492,420,506],[2,426,434,438,420],[2,424,450,414,502],[2,388,518,354,512],[2,354,454,368,412],[2,356,440,346,516],[2,310,534,314,574],[2,278,474,302,400],[2,326,334,378,300],[2,418,274,500,272],[0,500,484],[2,528,486,528,486],[2,538,460,524,430],[2,530,428,534,490],[2,554,492,580,506],[2,574,434,562,420],[2,576,450,586,502],[2,612,518,648,512],[2,646,454,632,412],[2,644,440,654,516],[2,690,534,686,576],[2,722,474,698,400],[2,674,334,622,300],[2,582,274,500,272]],
        fixed: true,
    },
    {
        name: '头盔3',
        center: [500,132],
        outline:[[0,508,338],[2,474,328,484,274],[2,466,334,496,338],[2,466,334,448,336],[2,434,306,446,282],[2,434,304,440,336],[2,418,332,396,338],[2,386,312,402,270],[2,384,318,390,338],[2,356,350,322,340],[2,314,300,348,258],[2,314,290,318,340],[2,330,346,352,346],[2,312,350,300,372],[2,284,328,290,278],[2,310,172,376,130],[2,436,100,500,100],[0,508,338],[2,488,314,516,274],[2,534,334,504,338],[2,534,334,552,336],[2,566,306,554,282],[2,566,304,560,336],[2,582,332,604,338],[2,614,312,598,270],[2,616,318,610,338],[2,644,350,678,340],[2,686,300,652,258],[2,686,290,682,340],[2,670,346,658,346],[2,686,348,696,370],[2,716,328,710,278],[2,690,172,624,130],[2,564,100,500,100]],
        fixed: true,
    },
    {
        name: '头盔4',
        center: [500,132],
        outline:[[0,500,340],[2,474,328,484,274],[2,466,334,496,338],[2,466,334,448,336],[2,434,306,446,282],[2,434,304,440,336],[2,418,332,396,338],[2,386,312,402,270],[2,384,318,390,338],[2,356,350,322,340],[2,314,300,348,258],[2,314,290,318,340],[2,330,346,352,346],[2,300,352,296,360],[2,262,342,272,258],[2,290,174,356,136],[2,432,96,500,100],[0,500,340],[2,492,304,516,274],[2,534,334,514,340],[2,534,334,552,336],[2,566,306,554,282],[2,566,304,560,336],[2,582,332,604,338],[2,614,312,598,270],[2,616,318,610,338],[2,644,350,678,340],[2,686,300,652,258],[2,686,290,682,340],[2,670,346,658,346],[2,716,338,706,354],[2,740,318,726,246],[2,706,176,634,132],[2,564,100,500,100]],
        fixed: true,
    },
];
export const maleForeHairTemplates = [
    {
        name: '路人男1',
        center: [500,272],
        outline:[[0,488,260],[2,440,224,432,170],[2,424,236,432,260],[2,378,210,356,188],[2,338,222,372,260],[2,318,248,274,220],[2,308,266,338,286],[2,278,306,220,264],[2,238,306,280,322],[2,252,348,160,334],[2,208,374,264,376],[2,226,404,162,388],[2,202,418,240,420],[2,210,456,192,452],[2,220,504,266,454],[2,252,502,244,504],[2,280,518,300,476],[2,280,544,362,562],[2,324,520,340,474],[2,328,518,372,546],[2,356,498,376,466],[2,376,510,404,524],[2,392,492,414,460],[2,460,442,504,474],[2,554,440,594,462],[2,604,494,596,534],[2,634,496,616,456],[2,630,514,624,546],[2,658,500,638,464],[2,668,504,662,532],[2,682,500,660,452],[2,688,512,664,560],[2,730,506,698,458],[2,712,494,764,502],[2,728,462,720,426],[2,756,440,776,414],[2,730,394,726,380],[2,736,388,786,376],[2,756,376,716,334],[2,750,336,794,310],[2,738,310,724,288],[2,748,274,748,222],[2,714,264,688,256],[2,712,242,704,206],[2,678,248,636,244],[2,668,210,644,182],[2,614,234,556,250],[2,550,222,590,176],[2,532,230,520,262],[2,502,232,504,170],[2,472,222,484,254],[0,474,370]]
    },
    {
        name: '路人男2',
        center: [500,258],
        outline:[[0,488,220],[2,462,166,368,146],[2,406,182,428,220],[2,372,156,288,178],[2,330,172,366,220],[2,300,182,216,224],[2,256,206,330,254],[2,226,244,188,268],[2,204,256,268,300],[2,208,320,160,298],[2,168,380,252,370],[2,212,402,160,400],[2,204,444,254,424],[2,196,472,240,528],[2,248,482,284,464],[2,274,506,298,570],[2,282,512,310,476],[2,292,512,324,592],[2,324,536,338,486],[2,350,544,328,572],[2,374,534,368,484],[2,370,524,404,528],[2,382,510,396,476],[2,430,450,498,474],[2,566,448,598,476],[2,610,520,596,524],[2,620,528,622,472],[2,614,550,668,542],[2,632,510,644,482],[2,668,536,652,594],[2,696,532,670,472],[2,698,542,678,552],[2,730,516,686,444],[2,720,486,758,458],[2,740,476,712,406],[2,746,436,768,430],[2,750,412,730,368],[2,742,402,792,370],[2,746,366,738,324],[2,784,320,808,334],[2,778,290,736,274],[2,804,240,754,178],[2,762,210,704,232],[2,742,174,694,142],[2,708,172,662,216],[2,676,150,642,122],[2,634,206,580,218],[2,576,182,604,148],[2,534,166,520,222],[2,502,168,540,138],[2,476,168,484,212],[0,472,364]]
    },
    {
        name: '路人男3',
        center: [500,288],
        outline:[[0,584,252],[2,512,210,480,214],[2,420,222,376,176],[2,408,214,432,232],[2,356,244,320,210],[2,348,240,380,252],[2,340,248,304,278],[2,260,302,232,306],[2,248,316,268,316],[2,252,362,212,382],[2,232,382,248,366],[2,238,390,234,412],[2,230,468,190,448],[2,212,492,244,470],[2,246,498,212,500],[2,216,512,270,498],[2,244,520,244,570],[2,280,534,284,546],[2,296,594,296,616],[2,314,566,310,524],[2,320,588,352,604],[2,332,568,358,488],[2,352,534,384,546],[2,376,520,406,474],[2,388,512,418,544],[2,424,500,456,466],[2,444,496,454,528],[2,452,492,484,462],[2,524,470,524,524],[2,548,462,530,450],[2,560,494,564,532],[2,592,488,586,464],[2,600,458,588,558],[2,634,492,612,464],[2,640,470,622,596],[2,680,504,650,460],[2,668,466,658,592],[2,730,488,648,350],[2,732,508,670,642],[2,756,546,736,460],[2,764,484,766,510],[2,776,466,752,440],[2,776,446,808,410],[2,786,408,768,390],[2,762,376,786,362],[2,758,350,748,328],[2,742,292,700,278],[2,722,272,754,298],[2,728,232,656,264],[2,700,244,752,244],[2,680,202,608,256],[2,676,210,628,156],[2,620,206,588,252],[2,574,208,604,170],[2,566,184,562,216],[2,562,250,580,252]]
    },
    {
        name: '路人男4',
        center: [500,268],
        outline:[[0,490,204],[2,496,188,342,142],[2,404,180,440,218],[2,332,172,306,132],[2,314,182,344,216],[2,306,222,260,174],[2,276,248,300,252],[2,240,250,204,222],[2,210,318,292,296],[2,234,322,136,288],[2,188,368,264,350],[2,212,398,216,482],[2,218,534,180,554],[2,216,544,236,496],[2,264,426,300,404],[2,242,446,280,550],[2,294,448,366,416],[2,280,454,336,598],[2,330,498,372,448],[2,358,488,404,538],[2,378,484,414,428],[2,398,474,444,488],[2,424,484,440,436],[2,454,398,500,418],[2,572,400,594,416],[2,618,432,622,462],[2,642,422,628,402],[2,644,460,632,518],[2,676,436,664,392],[2,692,468,660,570],[2,724,468,688,362],[2,712,418,702,504],[2,784,412,712,306],[2,748,350,750,388],[2,780,300,714,250],[2,760,272,764,278],[2,734,230,682,218],[2,736,224,760,244],[2,714,182,630,210],[2,722,190,762,196],[2,706,160,598,202],[2,616,180,674,158],[2,584,168,552,216],[2,582,146,638,132],[2,534,142,530,216],[2,516,128,556,112],[2,468,136,488,202]]
    },
    {
        name: '刺猬',
        center: [500,118],
        outline:[[0,500,-20],[1,458,100],[1,380,-16],[1,368,104],[1,266,86],[1,294,182],[1,178,226],[1,276,264],[1,224,356],[1,290,356],[1,226,436],[1,296,424],[2,280,458,244,488],[2,268,492,284,482],[2,286,500,266,540],[2,288,518,290,520],[2,308,552,292,606],[2,326,486,326,506],[1,348,628],[1,370,496],[1,402,514],[1,366,394],[1,400,386],[2,370,340,386,290],[2,454,244,500,254],[0,500,-20],[1,542,100],[1,620,-16],[1,632,104],[1,734,86],[1,706,182],[1,822,226],[1,724,264],[1,776,356],[1,708,356],[1,772,436],[1,704,424],[2,718,458,754,488],[2,728,492,716,482],[2,714,500,734,540],[2,712,518,708,520],[2,692,552,704,612],[2,674,486,662,546],[1,640,610],[1,640,440],[1,608,514],[1,634,394],[1,600,386],[2,628,340,614,290],[2,546,244,500,254]],
        fixed: true,
    },
    {
        name: '爆种',
        center: [500,208],
        outline:[[0,500,184],[2,402,148,432,198],[2,360,168,388,134],[2,332,226,304,184],[2,250,260,292,332],[2,246,344,252,294],[2,192,382,290,378],[2,236,458,246,478],[2,236,470,286,416],[2,290,512,272,554],[2,296,520,320,516],[2,310,542,352,584],[2,352,504,366,484],[2,372,454,352,456],[2,402,458,402,406],[2,432,412,456,446],[2,460,400,472,370],[2,488,394,500,432],[0,500,184],[2,604,148,576,122],[2,644,168,620,206],[2,672,226,708,160],[2,754,260,696,274],[2,758,344,780,282],[2,814,382,710,386],[2,768,458,772,488],[2,768,470,720,462],[2,714,512,730,554],[2,708,520,688,516],[2,696,542,644,590],[2,656,504,636,478],[2,632,454,638,452],[2,604,458,614,416],[2,572,412,548,446],[2,548,400,524,370],[2,516,394,500,432],[0,500,294]]
    },
    {
        name: '卷毛',
        center: [500,258],
        outline:[[0,500,240],[2,482,182,448,226],[2,416,188,398,238],[2,356,204,336,268],[2,300,278,308,320],[2,264,320,268,374],[2,242,394,242,442],[2,218,458,278,462],[2,278,494,334,448],[2,326,490,366,460],[2,392,500,440,450],[2,452,482,482,446],[2,490,454,500,442],[0,500,240],[2,518,182,552,226],[2,584,188,602,238],[2,644,204,664,268],[2,700,278,692,320],[2,736,320,732,374],[2,758,394,758,442],[2,782,458,722,462],[2,722,494,666,448],[2,674,490,634,460],[2,608,500,560,450],[2,548,482,518,446],[2,510,454,500,442]]
    },
    {
        name: '超人',
        center: [500,248],
        outline:[[0,458,416],[2,358,420,342,440],[2,334,598,336,584],[2,320,622,282,276],[2,310,420,328,288],[2,358,132,538,64],[2,406,166,386,254],[2,450,114,600,80],[2,490,120,454,256],[2,520,120,638,92],[2,536,132,542,216],[2,556,158,650,128],[2,590,162,574,240],[2,590,182,694,122],[2,646,156,604,252],[2,622,210,708,188],[2,662,204,640,278],[2,666,218,712,198],[2,682,210,674,300],[2,694,408,730,316],[2,662,616,668,570],[2,658,456,646,408],[2,536,388,458,416]]
    },
    {
        name: '草',
        center: [500,308],
        outline:[[0,490,494],[2,606,404,656,518],[2,684,464,684,568],[2,714,372,742,330],[2,690,320,646,334],[2,654,300,668,298],[2,608,300,552,316],[2,550,290,580,274],[2,510,286,466,310],[2,466,282,482,274],[2,432,290,398,310],[2,384,288,384,280],[2,356,298,328,328],[2,310,310,306,290],[2,290,350,312,592],[2,334,444,344,536],[2,380,414,490,494]]
    },
    {
        name: '油腻',
        center: [500,160],
        outline: [[0,532,324],[2,458,318,364,380],[2,302,402,202,400],[2,278,370,332,306],[2,298,356,224,352],[2,264,326,316,264],[2,302,294,208,310],[2,260,264,294,208],[2,294,230,186,258],[2,242,230,270,190],[2,344,118,502,134],[2,588,150,598,236],[2,588,302,532,324],[2,566,348,638,330],[2,670,326,692,382],[2,714,426,750,426],[2,704,406,714,354],[2,708,404,750,410],[2,714,392,722,338],[2,716,382,750,384],[2,718,366,736,318],[2,740,248,676,184],[2,592,118,574,174],[2,638,260,532,324]],
    },
    {
        name: '大牌',
        center: [500,293],
        outline: [[0,464,284],[2,420,252,368,288],[2,334,304,296,296],[2,310,306,346,310],[2,282,344,264,374],[2,250,394,198,416],[2,224,416,272,382],[2,258,424,244,488],[2,238,504,208,516],[2,244,510,254,484],[2,250,514,276,582],[2,290,614,268,642],[2,282,628,298,588],[2,312,618,320,632],[2,330,648,336,698],[2,328,614,352,670],[2,348,656,346,628],[2,350,564,372,530],[2,412,476,500,468],[2,424,520,436,394],[2,406,516,410,520],[2,432,496,494,504],[2,536,490,496,442],[2,510,466,544,488],[2,562,512,504,524],[2,632,516,516,470],[2,596,484,628,540],[2,662,614,626,686],[2,660,668,660,628],[2,654,674,656,716],[2,664,640,700,598],[2,720,570,724,536],[2,730,570,752,584],[2,728,534,728,470],[2,734,416,688,376],[2,738,432,788,444],[2,682,362,644,320],[2,656,328,698,336],[2,620,314,592,290],[2,618,298,686,268],[2,654,276,620,268],[2,580,260,528,286],[2,540,260,564,250],[2,500,262,490,274],[2,470,256,374,232],[2,444,254,460,280]]
    },
    {
        name: '男主角',
        center: [500,205],
        outline:[[0,516,180],[2,446,148,410,94],[2,398,150,416,194],[2,358,194,260,110],[2,284,196,328,224],[2,206,238,166,172],[2,212,274,246,286],[2,140,296,114,278],[2,136,348,236,362],[2,168,394,114,398],[2,168,424,226,426],[2,210,474,190,494],[2,294,442,252,454],[2,264,466,230,520],[2,304,408,284,546],[2,302,506,298,466],[2,306,508,342,550],[2,322,478,332,448],[2,404,432,450,424],[2,420,450,420,490],[2,452,446,500,424],[2,528,416,562,420],[2,618,448,618,464],[2,622,442,598,416],[2,628,406,642,418],[2,676,444,646,522],[2,694,410,670,552],[2,714,410,696,412],[2,708,434,736,454],[2,722,432,722,410],[2,770,424,818,454],[2,786,380,768,356],[2,806,348,864,296],[2,780,290,770,274],[2,800,252,824,178],[2,758,210,742,224],[2,772,204,784,146],[2,744,160,642,178],[2,618,160,710,90],[2,548,116,510,178]],
        fixed: true,
    },
    {
        name: '杂草',
        center: [500,263],
        outline: [[0,418,210],[2,390,176,330,164],[2,380,204,372,246],[2,350,258,254,208],[2,254,254,292,286],[2,230,314,148,296],[2,168,338,256,364],[2,208,414,138,402],[2,190,434,294,412],[2,260,466,238,476],[2,284,470,330,450],[2,318,472,286,504],[2,348,478,386,456],[2,406,466,352,512],[2,436,444,430,446],[2,420,472,378,514],[2,468,466,482,460],[2,532,454,480,508],[2,556,444,556,450],[2,576,450,594,502],[2,590,440,596,438],[2,596,430,656,500],[2,604,422,630,438],[2,630,434,724,502],[2,644,410,694,426],[2,722,426,776,434],[2,700,390,702,362],[2,764,402,850,384],[2,722,346,702,306],[2,750,294,804,240],[2,724,254,658,264],[2,698,224,764,132],[2,686,172,576,214],[2,592,158,590,96],[2,558,136,506,200],[2,498,174,496,94],[2,462,136,454,208],[2,434,164,416,148],[2,428,200,418,210]]
    },
    {
        name: '开分',
        center: [500,263],
        outline: [[0,500,230],[2,420,218,350,266],[2,244,350,246,432],[2,246,510,274,550],[2,300,592,290,642],[2,300,634,310,552],[2,308,582,306,630],[2,334,592,330,550],[2,336,602,334,634],[2,342,598,350,552],[2,376,608,374,630],[2,368,562,372,490],[2,364,518,392,582],[2,372,502,384,484],[2,382,508,394,520],[2,386,470,414,422],[2,454,392,500,392],[0,500,230],[2,580,218,650,266],[2,756,350,754,432],[2,754,510,726,550],[2,698,592,710,642],[2,698,634,688,552],[2,692,582,694,630],[2,666,592,670,550],[2,664,602,666,634],[2,658,598,650,552],[2,624,608,626,630],[2,632,562,628,490],[2,636,518,608,582],[2,628,502,616,484],[2,618,508,604,520],[2,614,470,592,424],[2,560,394,500,392]],
        fixed: true,
    },
    {
        name: '公子',
        center: [500,243],
        outline: [[0,500,208],[2,424,204,368,232],[2,300,282,288,394],[2,272,538,284,694],[2,288,772,300,834],[2,310,782,310,760],[2,316,810,320,824],[2,320,786,324,750],[2,336,796,336,828],[2,344,828,344,750],[2,356,786,356,806],[2,356,778,356,754],[2,364,800,376,834],[2,364,750,364,750],[2,350,688,356,616],[2,356,582,362,546],[2,368,484,400,446],[2,434,394,500,370],[0,500,208],[2,576,204,632,232],[2,700,282,712,394],[2,728,538,716,694],[2,712,772,700,834],[2,690,782,690,760],[2,684,810,680,824],[2,680,786,676,750],[2,664,796,664,828],[2,656,828,656,750],[2,644,786,644,806],[2,644,778,644,754],[2,636,800,624,834],[2,636,750,636,750],[2,650,688,644,616],[2,644,582,638,546],[2,632,484,600,446],[2,566,394,500,370]],
        fixed: true,
    },
    {
        name: '南瓜',
        center: [500,187],
        outline: [[0,500,184],[2,492,218,502,262],[2,490,226,498,184],[2,386,172,324,224],[2,246,294,276,360],[2,304,392,368,392],[2,316,338,388,244],[2,324,334,362,386],[2,394,398,418,374],[2,402,306,444,248],[2,408,294,416,370],[2,452,374,468,350],[2,454,306,472,278],[2,456,300,466,344],[2,492,356,508,344],[2,492,308,504,288],[2,494,326,510,342],[2,536,364,554,350],[2,542,300,546,280],[2,536,316,554,348],[2,582,364,608,358],[2,598,300,580,254],[2,600,298,602,352],[2,620,380,664,370],[2,664,308,632,242],[2,668,308,660,368],[2,676,386,720,358],[2,756,266,676,212],[2,600,172,496,184]]
    },
    {
        name: '狂',
        center: [500,165],
        outline: [[0,500,122],[2,448,64,450,16],[2,400,94,428,132],[2,344,132,364,70],[2,250,174,350,198],[2,222,250,234,150],[2,224,202,262,288],[2,224,348,202,276],[2,226,362,266,356],[2,218,424,242,504],[2,252,412,264,412],[2,262,482,282,550],[2,274,490,288,436],[2,290,450,318,582],[2,320,488,328,444],[2,350,506,350,558],[2,366,508,350,460],[2,356,448,380,542],[2,348,414,368,370],[2,380,344,382,332],[2,424,334,410,324],[2,458,328,440,306],[2,462,340,482,306],[2,482,344,510,380],[2,490,334,500,316],[0,500,122],[2,552,64,670,52],[2,600,94,570,132],[2,654,132,786,198],[2,760,190,706,188],[2,778,250,812,326],[2,780,288,738,288],[2,776,348,790,408],[2,772,362,734,356],[2,780,424,750,458],[2,748,412,736,412],[2,738,482,708,532],[2,726,490,718,436],[2,706,450,702,548],[2,678,488,668,444],[2,646,506,646,558],[2,644,492,646,448],[2,630,470,618,536],[2,658,422,632,370],[2,608,348,616,328],[2,574,334,574,328],[2,572,340,556,316],[2,538,340,470,382],[2,530,348,506,314],[2,494,310,500,340]]
    },
    {
        name: '侠',
        center: [500,200],
        outline: [[0,500,140],[2,326,138,278,318],[2,254,386,282,664],[2,290,752,276,802],[2,258,842,204,890],[2,258,874,282,836],[2,276,864,244,886],[2,376,838,352,660],[2,328,520,350,414],[2,342,474,352,528],[2,376,618,416,654],[2,386,610,378,564],[2,368,474,394,408],[2,450,368,500,420],[0,500,140],[2,674,138,722,318],[2,746,386,718,664],[2,710,752,724,802],[2,742,842,796,890],[2,742,874,718,836],[2,724,864,756,886],[2,624,838,646,660],[2,672,520,650,414],[2,658,474,646,528],[2,624,618,584,654],[2,614,610,622,564],[2,632,474,604,408],[2,550,368,500,420]],
        fixed: true,
    },
    {
        name: '军师',
        center: [500,260],
        outline:[[0,500,170],[2,466,170,446,178],[2,394,190,342,178],[2,362,190,380,206],[2,300,212,290,230],[2,310,232,336,236],[2,324,254,298,276],[2,278,300,240,332],[2,284,314,266,322],[2,252,348,248,384],[2,218,380,206,364],[2,226,410,248,420],[2,224,440,226,464],[2,236,444,260,462],[2,288,492,264,516],[2,310,498,276,554],[2,306,548,328,590],[2,316,534,324,500],[2,328,542,358,544],[2,336,504,332,470],[2,348,502,376,526],[2,352,504,352,464],[2,366,496,414,504],[2,392,498,392,420],[2,400,486,444,494],[2,420,460,432,418],[2,432,450,456,470],[2,458,416,466,414],[0,500,170],[2,534,170,554,178],[2,604,190,640,142],[2,638,190,620,206],[2,698,212,728,252],[2,688,232,662,236],[2,676,254,702,276],[2,722,300,760,326],[2,716,314,734,322],[2,748,348,752,380],[2,766,376,780,364],[2,772,410,752,420],[2,776,440,772,464],[2,764,444,740,462],[2,718,492,746,514],[2,698,498,724,554],[2,692,552,670,590],[2,684,534,666,466],[2,658,498,644,516],[2,660,460,644,442],[2,642,464,628,502],[2,636,458,602,418],[2,626,450,602,496],[2,600,442,582,408],[2,518,422,504,494],[2,500,440,508,406],[2,494,430,488,492],[2,458,444,466,414]],
        fixed:true,
    },
    {
        name: '嘻哈',
        center: [500,255],
        outline: [[0,500,240],[2,416,220,362,266],[2,392,262,394,262],[2,322,278,344,286],[2,358,286,366,286],[2,300,288,288,352],[2,316,328,332,330],[2,236,372,268,442],[2,280,380,324,372],[2,220,414,306,606],[2,274,538,316,410],[2,286,460,328,630],[2,310,442,336,436],[2,324,470,356,678],[2,350,482,356,448],[2,368,490,388,508],[2,382,420,398,394],[2,424,344,502,348],[0,498,240],[2,584,220,638,266],[2,608,262,606,262],[2,678,278,656,286],[2,642,286,634,286],[2,700,288,712,352],[2,684,328,668,330],[2,764,372,732,442],[2,720,380,676,372],[2,780,414,694,606],[2,726,538,684,410],[2,714,460,672,630],[2,690,442,664,436],[2,676,470,644,678],[2,650,482,644,448],[2,632,490,612,508],[2,618,420,602,394],[2,576,344,500,348]],
        fixed: true,
    },
    {
        name: '明星',
        center: [510,255],
        outline: [[0,520,196],[2,510,182,488,186],[2,432,194,388,142],[2,420,184,442,204],[2,368,218,332,180],[2,360,212,392,226],[2,352,222,316,254],[2,272,282,242,286],[2,260,296,280,296],[2,264,348,224,370],[2,242,370,264,356],[2,264,392,248,418],[2,224,462,196,444],[2,224,492,280,458],[2,236,504,188,500],[2,280,566,296,498],[2,286,562,230,558],[2,300,596,314,540],[2,318,584,346,636],[2,344,592,352,510],[2,356,574,388,582],[2,362,538,398,452],[2,400,512,350,546],[2,426,530,462,430],[2,464,518,560,566],[2,506,506,520,460],[2,528,494,486,550],[2,572,494,550,426],[2,598,460,608,554],[2,638,530,646,492],[2,668,524,670,632],[2,698,564,686,524],[2,708,580,754,550],[2,740,552,680,498],[2,726,534,792,550],[2,740,536,720,470],[2,742,530,830,474],[2,750,486,730,422],[2,778,486,824,432],[2,770,412,742,352],[2,782,366,800,418],[2,784,316,730,300],[2,764,320,798,314],[2,760,302,722,274],[2,710,256,686,248],[2,710,254,748,248],[2,728,250,710,238],[2,696,224,658,228],[2,688,220,722,184],[2,668,212,604,198],[2,642,178,662,126],[2,616,178,560,198],[2,554,178,520,156],[2,498,142,476,114],[2,496,168,512,176],[2,520,190,520,196]],
        fixed: true,
    },
    {
        name: '牛头人',
        center: [500,260],
        outline: [[0,500,218],[2,456,202,370,146],[2,456,250,430,272],[2,298,276,376,112],[2,230,238,284,348],[2,232,330,252,256],[2,180,382,248,420],[2,182,474,212,536],[2,222,508,248,492],[2,230,532,258,572],[2,278,482,286,632],[2,310,508,340,698],[2,342,654,370,600],[2,324,558,386,552],[2,320,506,404,488],[2,386,412,500,406],[0,500,218],[2,576,216,516,152],[2,670,230,646,284],[2,702,276,622,108],[2,776,242,716,348],[2,766,330,748,236],[2,820,382,752,420],[2,814,474,782,538],[2,778,508,752,492],[2,770,532,734,570],[2,722,482,694,628],[2,688,508,660,698],[2,658,654,628,600],[2,676,558,614,552],[2,678,506,596,488],[2,614,412,500,406]],
        fixed: true,
    },
    {
        name: '乐观',
        center: [500,275],
        outline: [[0,558,226],[2,500,206,458,222],[2,386,238,332,306],[2,310,344,290,386],[2,256,488,314,602],[2,302,564,306,516],[2,314,572,332,588],[2,318,554,320,516],[2,324,560,344,576],[2,340,560,340,520],[2,352,560,374,560],[2,366,554,370,504],[2,374,550,416,554],[2,394,546,420,458],[2,404,516,454,534],[2,424,516,436,466],[2,450,420,492,398],[2,520,382,554,404],[2,602,336,558,226],[2,596,344,554,406],[2,600,454,554,534],[2,614,492,600,428],[2,610,492,630,516],[2,630,462,630,488],[2,644,504,648,530],[2,660,500,660,496],[2,668,516,676,542],[2,680,508,680,500],[2,694,538,690,600],[2,740,492,724,408],[2,702,256,558,226]],
        fixed: true,
    },
];
export const femaleForeHairTemplates = [
    {
        name: '馒头',
        center: [500,345],
        outline:[[0,500,300],[2,348,310,306,390],[2,274,446,274,558],[2,278,602,260,624],[2,250,642,264,666],[2,274,640,298,628],[2,278,646,272,676],[2,284,696,312,714],[2,304,670,332,632],[2,320,658,322,722],[2,338,740,388,754],[2,362,608,374,480],[2,374,534,376,548],[2,474,542,500,542],[0,500,300],[2,652,310,694,390],[2,726,446,726,558],[2,722,602,740,624],[2,750,642,736,666],[2,726,640,702,628],[2,722,646,728,676],[2,716,696,688,714],[2,696,670,668,632],[2,680,658,678,722],[2,662,740,612,754],[2,638,608,626,480],[2,626,534,624,548],[2,526,542,500,542]],
        fixed:true,
    },
    {
        name: '文艺1',
        center: [500,220],
        outline:[[0,500,172],[2,368,176,304,288],[2,244,488,280,620],[2,320,688,384,680],[2,332,648,352,440],[2,318,450,294,470],[2,336,442,354,438],[2,456,412,514,332],[0,500,172],[2,632,176,696,288],[2,756,488,720,620],[2,680,688,616,680],[2,668,648,648,440],[2,682,450,700,470],[2,664,442,646,438],[2,520,406,484,370],[2,498,352,514,332]],
        fixed: true,
    },
    {
        name: '文艺2',
        center: [497,265],
        outline:[[0,492,222],[2,642,226,700,306],[2,740,396,706,558],[2,728,698,696,722],[2,668,748,618,730],[2,646,730,654,692],[2,660,656,654,620],[2,648,570,638,446],[2,634,468,642,514],[2,630,496,622,476],[2,626,512,630,512],[2,592,486,586,464],[2,580,476,596,506],[2,562,474,566,466],[2,554,476,570,486],[2,542,476,542,450],[2,542,474,548,488],[2,532,472,526,446],[2,522,468,532,482],[2,506,474,498,430],[2,494,468,522,480],[2,482,464,456,362],[2,440,442,366,482],[2,394,468,378,450],[2,364,480,336,494],[2,364,468,364,434],[2,348,462,342,518],[2,340,594,340,656],[2,340,708,380,734],[2,352,746,322,740],[2,288,726,278,694],[2,266,642,290,552],[2,252,382,314,292],[2,368,228,492,222]],
        fixed:true,
    },
    {
        name: '大妈',
        center: [500,205],
        outline: [[0,500,172],[2,436,160,370,184],[2,320,206,324,236],[2,268,326,286,344],[2,254,446,300,426],[2,244,586,298,518],[2,262,640,290,634],[2,290,686,330,694],[2,364,680,344,614],[2,384,656,358,458],[2,394,498,382,378],[2,404,404,400,336],[2,428,352,428,320],[2,484,344,500,306],[0,500,172],[2,562,160,630,184],[2,684,206,676,260],[2,740,338,696,366],[2,768,446,704,454],[2,750,566,704,556],[2,722,656,694,684],[2,664,688,658,656],[2,652,630,668,592],[2,638,618,644,458],[2,610,440,626,374],[2,596,404,596,332],[2,572,352,568,320],[2,520,344,500,306]]
    },
    {
        name: '西瓜1',
        center: [500,276],
        outline:[[0,500,488],[2,418,490,362,482],[2,380,400,428,362],[2,384,390,360,476],[2,350,510,350,610],[2,360,694,410,714],[2,382,722,288,700],[2,208,634,298,384],[2,332,310,390,278],[2,438,254,500,256],[0,500,488],[2,582,490,638,482],[2,620,400,572,362],[2,616,390,640,476],[2,650,510,650,610],[2,640,694,590,714],[2,618,722,712,700],[2,792,634,702,384],[2,668,310,610,278],[2,562,254,500,256]],
        fixed: true, // 不随机造型
    },
    {
        name: '西瓜2',
        center: [500,288],
        outline:[[0,500,484],[2,472,486,472,486],[2,462,462,486,394],[2,470,432,466,490],[2,446,492,430,492],[2,426,438,450,388],[2,424,452,424,492],[2,376,504,360,504],[2,380,402,402,382],[2,384,392,360,482],[2,350,518,340,590],[2,336,666,390,686],[2,362,730,292,700],[2,208,648,252,464],[2,286,354,364,300],[2,438,258,500,260],[0,500,484],[2,528,486,528,486],[2,538,462,514,394],[2,530,432,534,490],[2,554,492,570,492],[2,574,438,550,388],[2,576,452,576,492],[2,624,504,640,504],[2,620,402,598,382],[2,616,392,640,482],[2,650,518,660,590],[2,664,666,610,686],[2,638,730,708,700],[2,792,648,748,464],[2,714,354,636,300],[2,562,258,500,260]],
        fixed: true,
    },
    {
        name: '桃太郎',
        center: [500,280],
        outline:[[0,500,242],[2,414,242,328,350],[2,204,556,296,670],[2,316,698,394,738],[2,422,608,362,472],[2,346,442,362,406],[2,350,458,370,480],[2,400,430,500,432],[0,500,242],[2,586,242,672,350],[2,796,556,704,670],[2,684,698,606,738],[2,578,608,638,472],[2,654,442,638,406],[2,650,458,630,480],[2,600,430,500,432]],
        fixed: true,
    },
    {
        name: '高切',
        center: [500,237],
        outline:[[0,512,190],[2,406,182,320,256],[2,264,350,302,518],[2,332,628,370,666],[2,342,592,374,548],[2,368,432,416,364],[2,402,402,374,460],[2,462,428,480,352],[2,472,408,436,444],[2,504,416,532,360],[2,522,398,502,436],[2,556,406,564,362],[2,566,392,556,400],[2,582,386,606,350],[2,602,400,570,410],[2,644,386,634,358],[2,670,462,628,552],[2,666,592,648,670],[2,804,360,622,202],[2,554,164,512,190]]
    },
    {
        name: '中切',
        center: [500,234],
        outline:[[0,508,190],[2,402,182,316,256],[2,260,350,290,546],[2,306,628,350,764],[2,338,676,376,634],[2,364,432,412,364],[2,398,402,370,460],[2,458,428,476,352],[2,468,408,432,444],[2,500,416,528,360],[2,518,398,498,436],[2,552,406,560,362],[2,562,392,552,400],[2,578,386,602,350],[2,598,400,566,410],[2,640,386,630,358],[2,666,462,626,636],[2,662,676,646,760],[2,800,360,618,202],[2,550,164,508,190]]
    },
    {
        name: '低切',
        center: [500,236],
        outline:[[0,516,190],[2,406,182,316,256],[2,256,350,292,654],[2,304,776,344,964],[2,328,844,380,794],[2,324,432,408,350],[2,370,402,366,460],[2,464,428,486,352],[2,474,408,436,444],[2,508,416,538,360],[2,530,398,506,436],[2,562,406,574,362],[2,576,392,548,428],[2,590,386,618,350],[2,612,400,582,424],[2,656,386,644,368],[2,682,462,624,802],[2,672,824,666,964],[2,794,360,632,208],[2,560,164,516,190]]
    },
    {
        name: '黑长直1',
        center: [500,215],
        outline:[[0,500,414],[2,476,412,464,416],[2,458,386,470,352],[2,448,388,460,416],[2,458,412,416,420],[2,410,388,426,358],[2,406,384,410,420],[2,406,416,376,432],[2,372,398,386,360],[2,368,390,372,430],[1,372,884],[2,358,880,350,856],[2,348,874,344,892],[2,336,874,332,856],[2,322,882,320,892],[2,314,868,310,854],[2,302,894,300,884],[2,298,864,294,854],[2,300,874,284,894],[2,284,810,282,508],[2,278,426,288,354],[2,300,296,328,258],[2,374,182,500,174],[0,500,414],[2,524,412,536,416],[2,542,386,530,352],[2,552,388,540,416],[2,542,412,584,420],[2,590,388,574,358],[2,594,384,590,420],[2,594,416,624,432],[2,628,398,614,360],[2,632,390,628,430],[1,628,884],[2,642,880,650,856],[2,652,874,656,892],[2,664,874,668,856],[2,678,882,680,892],[2,686,868,690,854],[2,698,894,700,884],[2,702,864,706,854],[2,700,874,716,894],[2,716,810,718,508],[2,722,426,712,354],[2,700,296,672,258],[2,626,182,500,174]],
        fixed: true,
    },
    {
        name: '黑长直2',
        center: [500,215],
        outline:[[0,500,414],[2,476,412,464,416],[2,458,386,470,352],[2,448,388,460,416],[2,458,412,416,420],[2,410,388,426,358],[2,406,384,410,420],[2,406,416,378,430],[2,372,398,386,360],[2,368,390,372,430],[1,378,914],[2,342,898,312,908],[2,286,916,290,866],[2,304,782,286,510],[2,278,426,288,354],[2,300,296,328,258],[2,374,182,500,174],[0,500,414],[2,524,412,536,416],[2,542,386,530,352],[2,552,388,540,416],[2,542,412,584,420],[2,590,388,574,358],[2,594,384,590,420],[2,594,416,622,430],[2,628,398,614,360],[2,632,390,628,430],[1,622,914],[2,658,898,688,908],[2,714,916,710,866],[2,696,782,714,510],[2,722,426,712,354],[2,700,296,672,258],[2,626,182,500,174]],
        fixed: true,
    },
    {
        name: '黑长弯1',
        center: [500,205],
        outline:[[0,500,168],[2,388,174,342,238],[2,266,332,306,556],[2,318,690,216,856],[2,274,846,282,854],[2,284,826,300,782],[2,282,818,286,856],[2,310,848,336,862],[2,332,820,344,790],[2,332,828,342,856],[2,340,862,390,850],[2,364,812,376,764],[2,400,664,386,562],[2,366,448,374,416],[2,380,374,400,346],[2,382,382,378,420],[2,388,428,426,416],[2,418,378,434,342],[2,420,384,432,414],[2,444,418,468,410],[2,462,380,474,350],[2,466,380,472,412],[2,484,406,500,406],[0,500,168],[2,616,166,664,234],[2,736,326,700,550],[2,678,692,784,856],[2,726,846,718,854],[2,716,826,700,782],[2,718,818,714,856],[2,690,848,664,862],[2,668,820,656,790],[2,668,828,658,856],[2,660,862,610,850],[2,636,812,624,756],[2,598,634,612,554],[2,624,466,624,412],[2,620,374,600,346],[2,618,382,620,414],[2,612,428,574,416],[2,582,378,566,342],[2,580,384,568,414],[2,556,418,532,410],[2,538,380,526,350],[2,534,380,528,412],[2,516,406,500,406]],
        fixed: true,
    },
    {
        name: '黑长弯2',
        center: [500,266],
        outline:[[0,500,236],[2,404,238,344,300],[2,260,396,300,640],[2,316,710,292,790],[2,270,862,306,898],[2,314,864,350,876],[2,318,814,340,644],[2,326,814,358,876],[2,374,876,382,884],[2,392,896,428,888],[2,376,850,388,756],[2,400,666,390,542],[2,372,446,396,388],[2,384,436,388,484],[2,426,462,500,468],[0,500,236],[2,596,238,656,300],[2,740,396,700,640],[2,684,710,708,790],[2,730,862,694,898],[2,686,864,650,876],[2,682,814,660,644],[2,674,814,642,876],[2,626,876,618,884],[2,608,896,572,888],[2,624,850,612,756],[2,600,666,610,542],[2,628,446,604,388],[2,616,436,612,484],[2,574,462,500,468]],
        fixed: true,
    },
    {
        name: '飘动1',
        center: [500,122],
        outline:[[0,500,326],[2,490,326,470,328],[2,456,298,468,276],[2,456,296,462,328],[2,440,324,416,330],[2,406,304,422,262],[2,404,310,410,330],[2,374,342,338,332],[2,330,292,366,250],[2,330,282,334,332],[2,344,338,370,340],[2,378,360,364,442],[2,352,480,334,512],[2,296,582,348,676],[2,268,600,308,518],[2,360,412,326,372],[2,352,426,308,454],[2,324,424,308,380],[2,288,404,298,432],[2,276,398,290,358],[2,284,378,268,372],[2,290,328,292,232],[2,298,186,334,150],[2,394,100,500,92],[0,500,326],[2,510,326,530,328],[2,544,298,532,276],[2,544,296,538,328],[2,560,324,584,330],[2,594,304,578,262],[2,596,310,590,330],[2,626,342,662,332],[2,670,292,634,250],[2,670,282,666,332],[2,654,338,634,336],[2,626,364,636,436],[2,650,480,672,522],[2,704,582,652,676],[2,730,600,692,518],[2,640,412,674,372],[2,646,426,692,454],[2,676,424,692,380],[2,716,382,716,428],[2,740,392,722,356],[2,734,362,748,362],[2,718,338,714,222],[2,698,160,666,138],[2,600,92,500,92]],
        fixed: true,
    },
    {
        name: '飘动2',
        center: [500,132],
        outline:[[0,512,340],[2,482,336,484,274],[2,466,334,496,338],[2,466,334,448,336],[2,434,306,446,282],[2,434,304,440,336],[2,418,332,396,338],[2,386,312,402,270],[2,384,318,390,338],[2,356,350,322,340],[2,314,300,348,258],[2,314,290,318,340],[2,330,346,370,344],[2,384,386,362,502],[2,344,646,392,644],[2,330,642,346,524],[2,316,628,356,696],[2,272,600,326,506],[2,290,584,288,632],[2,276,592,284,552],[2,286,536,296,516],[2,278,572,276,616],[2,260,584,276,540],[2,314,468,292,390],[2,292,408,272,410],[2,290,392,280,366],[2,270,376,264,400],[2,258,346,298,284],[2,310,172,376,130],[2,436,100,500,100],[0,512,340],[2,498,300,516,274],[2,534,334,520,338],[2,534,334,552,336],[2,566,306,554,282],[2,566,304,560,336],[2,582,332,604,338],[2,614,312,598,270],[2,616,318,610,338],[2,644,350,678,340],[2,686,300,652,258],[2,686,290,682,340],[2,670,346,630,344],[2,616,386,638,502],[2,656,646,608,644],[2,670,642,654,524],[2,684,628,644,696],[2,728,600,674,506],[2,710,584,712,632],[2,724,592,716,552],[2,714,536,704,516],[2,722,572,724,616],[2,740,584,730,536],[2,694,444,702,380],[2,694,400,712,422],[2,714,402,720,366],[2,730,376,736,400],[2,742,346,704,276],[2,702,186,634,130],[2,566,98,500,100]],
        fixed: true,
    },
    {
        name: '飘动3',
        center: [500,132],
        outline:[[0,512,340],[2,482,336,484,274],[2,466,334,496,338],[2,466,334,448,336],[2,434,306,446,282],[2,434,304,440,336],[2,418,332,396,338],[2,386,312,402,270],[2,384,318,390,338],[2,356,350,322,340],[2,314,300,348,258],[2,314,290,318,340],[2,330,346,370,344],[2,384,386,362,502],[2,344,646,392,644],[2,330,642,346,524],[2,316,628,356,696],[2,272,600,326,506],[2,290,584,288,632],[2,276,592,284,552],[2,286,536,296,516],[2,278,572,276,616],[2,260,584,276,540],[2,314,468,300,388],[2,284,328,290,278],[2,310,172,376,130],[2,436,100,500,100],[0,512,340],[2,498,300,516,274],[2,534,334,520,338],[2,534,334,552,336],[2,566,306,554,282],[2,566,304,560,336],[2,582,332,604,338],[2,614,312,598,270],[2,616,318,610,338],[2,644,350,678,340],[2,686,300,652,258],[2,686,290,682,340],[2,670,346,630,344],[2,616,386,638,502],[2,656,646,608,644],[2,670,642,654,524],[2,684,628,644,696],[2,728,600,674,506],[2,710,584,712,632],[2,724,592,716,552],[2,714,536,704,516],[2,722,572,724,616],[2,740,584,730,536],[2,694,444,704,390],[2,716,324,712,280],[2,704,170,630,130],[2,566,98,500,100]],
        fixed: true,
    },
    {
        name: '贵妃1',
        center: [500,236],
        outline:[[0,500,144],[2,316,148,344,274],[2,436,222,502,224],[2,436,222,342,278],[2,160,404,288,518],[2,312,534,338,540],[2,312,536,288,520],[2,300,608,288,630],[2,272,618,290,516],[2,284,512,278,506],[2,246,614,276,686],[2,314,780,340,698],[2,330,582,352,460],[2,330,638,348,714],[2,366,784,348,806],[2,332,836,350,862],[2,368,876,362,906],[2,390,876,370,854],[2,358,836,372,810],[2,398,782,380,712],[2,362,662,366,528],[2,374,428,396,422],[2,446,430,500,376],[0,500,144],[2,684,148,656,274],[2,564,222,498,224],[2,564,222,658,278],[2,840,404,712,518],[2,688,534,662,540],[2,688,536,712,520],[2,700,608,712,630],[2,728,618,710,516],[2,716,512,722,506],[2,754,614,724,686],[2,686,780,660,698],[2,670,582,648,460],[2,670,638,652,714],[2,634,784,652,806],[2,668,836,650,862],[2,632,876,638,906],[2,610,876,630,854],[2,642,836,628,810],[2,602,782,620,712],[2,638,662,634,528],[2,626,428,604,422],[2,554,430,500,376]],
        fixed: true, // 不随机造型
    },
    {
        name: '贵妃2',
        center: [500,178],
        outline: [[0,500,62],[2,412,56,376,146],[2,422,152,448,168],[2,380,182,322,242],[2,252,332,282,534],[2,298,620,254,760],[2,314,878,444,790],[2,330,540,394,610],[2,336,440,392,476],[2,384,338,500,324],[0,500,62],[2,588,56,624,140],[2,578,152,552,168],[2,628,178,680,234],[2,750,326,718,562],[2,710,638,766,762],[2,704,880,576,790],[2,690,536,622,608],[2,672,430,614,476],[2,630,360,562,326],[2,546,376,504,388],[2,456,404,392,392],[2,446,400,498,370],[2,516,356,534,326],[2,524,348,490,370],[2,472,380,430,384],[2,466,378,490,352],[2,518,320,500,324]],
        fixed: true,
    },
    {
        name: '学生1',
        center: [500,250],
        outline:[[0,500,224],[2,376,230,318,298],[2,276,348,268,418],[2,252,540,320,672],[2,352,694,382,696],[2,324,560,332,434],[2,328,556,376,674],[2,402,680,416,678],[2,360,528,380,376],[2,378,412,376,444],[2,452,432,500,436],[0,500,224],[2,596,222,682,298],[2,724,348,732,418],[2,748,540,680,672],[2,648,694,618,696],[2,676,560,672,440],[2,674,552,624,674],[2,598,680,584,678],[2,640,528,620,376],[2,622,412,624,444],[2,548,432,500,436]],
        fixed: true, // 不随机造型
    },
    {
        name: '学生2',
        center: [500,218],
        outline:[[0,500,334],[2,446,442,360,442],[2,362,474,334,490],[2,376,822,284,934],[2,236,812,304,490],[2,286,454,296,442],[2,252,346,334,236],[2,424,164,500,186],[0,500,334],[2,554,442,640,442],[2,638,474,666,490],[2,622,822,716,934],[2,764,812,696,490],[2,714,454,704,442],[2,748,346,666,236],[2,574,164,500,186]],
        fixed: true,
    },
    {
        name: '波波1',
        center: [500,336],
        outline:[[0,500,328],[2,388,320,312,400],[2,248,484,260,628],[2,280,720,420,744],[2,336,708,336,672],[2,356,712,412,720],[2,360,700,348,656],[2,356,688,400,700],[2,360,680,364,648],[2,360,676,392,676],[2,368,660,372,644],[2,380,580,436,520],[2,488,512,500,520],[0,500,328],[2,616,320,688,400],[2,752,484,740,628],[2,720,720,580,744],[2,668,708,668,672],[2,644,712,592,720],[2,644,700,652,656],[2,644,688,604,700],[2,640,680,640,648],[2,640,676,612,676],[2,636,660,628,644],[2,624,580,564,520],[2,512,512,500,520]],
        fixed: true,
    },
    {
        name: '波波2',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,456],[2,338,586,430,706],[2,388,684,340,618],[2,378,678,412,710],[2,342,684,324,630],[2,344,678,382,716],[2,318,688,294,630],[2,306,674,344,700],[2,290,670,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,456],[2,662,586,570,706],[2,612,684,660,618],[2,622,678,588,710],[2,658,684,676,630],[2,656,678,618,716],[2,682,688,706,630],[2,694,674,656,700],[2,710,670,730,570],[2,784,360,608,252],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '波波3',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,452],[2,376,478,376,510],[2,384,602,412,606],[2,392,610,364,566],[2,408,638,338,760],[2,368,684,340,618],[2,376,694,292,724],[2,342,684,324,630],[2,344,678,258,702],[2,318,688,294,630],[2,302,680,230,670],[2,282,670,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,452],[2,624,478,624,510],[2,616,602,588,606],[2,608,610,636,566],[2,592,638,662,760],[2,632,684,660,618],[2,624,694,708,724],[2,658,684,676,630],[2,656,678,742,702],[2,682,688,706,630],[2,698,680,770,670],[2,718,670,730,570],[2,784,360,600,250],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '波波4',
        center: [500,267],
        outline:[[0,500,454],[2,468,456,384,452],[2,362,524,404,636],[2,380,634,360,638],[2,348,602,346,592],[2,356,646,354,638],[2,338,632,324,642],[2,326,620,312,594],[2,322,612,318,644],[2,294,642,274,668],[2,282,612,270,570],[2,216,360,400,250],[2,458,224,500,224],[0,500,454],[2,532,456,616,452],[2,638,524,596,636],[2,620,634,640,638],[2,652,602,654,592],[2,644,646,646,638],[2,662,632,676,642],[2,674,620,688,594],[2,678,612,682,644],[2,706,642,726,668],[2,718,612,730,570],[2,784,360,600,250],[2,542,224,500,224]],
        fixed: true,
    },
    {
        name: '波波5',
        center: [500,263],
        outline:[[0,500,462],[2,436,462,410,454],[2,408,416,422,380],[2,404,416,394,456],[2,394,402,408,376],[2,386,392,376,586],[2,364,694,394,742],[2,362,724,348,714],[2,336,618,348,590],[2,334,624,344,720],[2,338,712,310,694],[2,308,622,310,584],[2,302,610,316,702],[2,304,696,284,674],[2,268,594,268,546],[2,266,314,400,256],[2,460,234,500,234],[0,500,462],[2,562,462,590,454],[2,592,416,578,380],[2,596,416,604,456],[2,604,402,592,376],[2,614,392,624,586],[2,636,694,604,742],[2,638,724,652,714],[2,664,618,652,590],[2,666,624,656,720],[2,662,712,688,694],[2,692,622,688,584],[2,698,610,684,702],[2,696,696,716,674],[2,730,594,730,546],[2,734,314,600,256],[2,540,234,500,234]],
        fixed: true,
    },
    {
        name: '麻花1',
        center: [500,271],
        outline:[[0,484,398],[2,496,434,424,482],[2,462,412,452,400],[2,462,412,414,498],[2,378,458,424,412],[2,406,430,384,492],[2,372,444,388,408],[2,372,442,372,466],[2,388,738,334,716],[2,372,762,324,786],[2,344,814,318,822],[2,348,856,336,890],[2,330,918,332,944],[2,282,916,312,860],[2,274,842,302,822],[2,280,808,298,786],[2,264,746,306,708],[2,220,766,260,518],[2,298,326,370,272],[2,422,224,500,246],[0,484,398],[2,492,432,462,460],[2,536,432,520,378],[2,586,424,598,490],[2,608,446,586,400],[2,604,424,620,482],[2,628,444,612,408],[2,628,442,628,466],[2,616,712,664,716],[2,644,770,676,786],[2,656,814,682,822],[2,652,856,664,890],[2,670,918,668,944],[2,718,916,690,860],[2,726,842,698,822],[2,720,808,702,786],[2,736,746,694,708],[2,784,768,734,512],[2,704,332,650,282],[2,576,222,500,246]],
        fixed: true,
    },
    {
        name: '麻花2',
        center: [500,241],
        outline:[[0,500,220],[2,350,226,284,328],[2,218,486,256,626],[2,280,722,338,720],[2,308,744,334,768],[2,316,786,338,804],[2,314,832,342,870],[2,340,850,380,838],[2,398,822,374,808],[2,394,788,376,768],[2,404,754,384,714],[2,404,692,378,654],[2,302,486,500,382],[0,500,220],[2,650,226,716,328],[2,782,486,744,626],[2,720,722,662,720],[2,692,744,666,768],[2,684,786,662,804],[2,686,832,658,870],[2,660,850,620,838],[2,602,822,626,808],[2,606,788,624,768],[2,596,754,616,714],[2,596,692,622,654],[2,698,486,500,382]],
        fixed: true,
    },
    {
        name: '贵妇1',
        center: [500,349],
        outline: [[0,500,228],[2,464,228,442,262],[2,402,324,454,336],[2,480,332,492,336],[2,364,326,314,414],[2,270,506,298,574],[2,364,672,448,528],[2,424,544,408,554],[2,366,616,330,564],[2,362,578,406,554],[2,276,676,326,562],[2,304,574,298,568],[2,264,726,426,542],[2,486,510,500,480],[0,500,228],[2,536,228,558,262],[2,598,324,546,336],[2,520,332,508,336],[2,636,326,686,414],[2,730,506,702,574],[2,636,672,552,528],[2,576,544,592,554],[2,634,616,670,564],[2,638,578,594,554],[2,724,676,674,562],[2,696,574,702,568],[2,736,726,574,542],[2,514,510,500,480]],
        fixed: true,
    },
    {
        name: '贵妇2',
        center: [500,335],
        outline:[[0,500,456],[2,480,426,436,412],[2,402,412,354,614],[2,320,652,272,618],[2,290,630,298,626],[2,274,598,266,582],[2,252,590,256,620],[2,242,626,252,646],[2,250,678,278,696],[2,360,668,376,580],[2,400,488,452,424],[2,440,436,436,444],[2,476,444,500,456],[0,500,456],[2,520,426,558,406],[2,600,398,646,614],[2,680,652,728,618],[2,710,630,702,626],[2,726,598,734,582],[2,748,590,744,620],[2,758,626,748,646],[2,750,678,722,696],[2,640,668,624,580],[2,600,488,548,424],[2,560,436,564,444],[2,524,444,500,456],[2,452,416,434,408],[2,404,416,354,614],[2,322,650,296,626],[2,276,602,272,588],[2,280,392,368,360],[2,400,304,492,296],[2,604,292,640,362],[2,728,404,724,588],[2,720,604,700,626],[2,680,650,648,610],[2,608,412,564,402],[2,520,424,500,456]],
        fixed:true,
    },
    {
        name: '公主切',
        center: [500,231],
        outline:[[0,500,210],[2,400,206,330,282],[2,292,338,274,484],[2,246,740,266,812],[2,318,834,366,836],[2,366,792,352,708],[2,336,582,356,420],[2,346,514,350,542],[2,368,528,388,520],[2,380,468,390,420],[2,400,388,426,362],[2,396,402,392,434],[1,430,428],[1,448,368],[1,436,424],[1,472,424],[1,478,366],[1,476,424],[1,500,424],[0,500,210],[0,500,210],[2,600,206,670,282],[2,708,338,726,484],[2,754,740,734,812],[2,682,834,634,836],[2,634,792,648,708],[2,664,582,644,420],[2,654,514,650,542],[2,632,528,612,520],[2,620,468,610,420],[2,600,388,574,362],[2,604,402,608,434],[1,570,428],[1,552,368],[1,564,424],[1,528,424],[1,522,366],[1,524,424],[1,500,424],[0,500,210]],
        fixed: true,
    },
    {
        name: '贵族卷',
        center: [500,212],
        outline:[[0,518,156],[2,424,134,342,188],[2,266,258,274,440],[2,274,546,256,542],[2,244,538,248,530],[2,248,522,262,532],[2,256,510,244,514],[2,226,526,236,548],[2,252,570,276,560],[2,280,558,284,544],[2,296,616,288,648],[2,278,700,254,700],[2,236,700,236,678],[2,244,666,264,682],[2,256,658,230,660],[2,204,674,222,704],[2,234,720,252,722],[2,288,718,298,674],[2,298,734,286,756],[2,276,776,254,788],[2,230,796,226,786],[2,224,768,240,786],[2,242,766,226,758],[2,216,758,208,768],[2,200,794,224,808],[2,250,820,278,802],[2,284,802,314,754],[2,300,796,222,866],[2,210,896,232,906],[2,266,922,272,872],[2,274,856,260,850],[2,242,858,242,876],[2,244,884,254,884],[2,238,872,240,858],[2,256,850,266,858],[2,256,830,280,816],[2,250,824,272,862],[2,294,866,324,842],[2,320,806,308,810],[2,284,826,288,836],[2,290,816,300,808],[2,322,816,326,838],[2,306,866,294,858],[2,308,902,280,942],[2,252,994,288,1022],[2,320,1040,334,1020],[2,348,986,322,974],[2,332,998,316,1012],[2,280,1008,298,966],[2,348,898,342,770],[2,340,884,348,896],[2,376,914,402,890],[2,414,862,394,846],[2,360,840,356,876],[2,364,896,380,866],[2,360,898,356,876],[2,356,852,360,852],[2,356,814,374,732],[2,388,660,368,602],[2,384,620,400,616],[2,412,616,418,608],[2,422,602,420,586],[2,406,566,388,574],[2,412,586,394,598],[2,364,594,368,526],[2,370,348,456,350],[2,426,376,432,404],[2,442,430,468,418],[2,494,402,474,384],[2,458,374,446,384],[2,448,396,454,402],[2,436,388,446,384],[2,458,360,500,340],[0,518,156],[2,598,122,650,164],[2,728,234,724,424],[2,716,538,738,546],[2,756,548,752,532],[2,742,526,730,532],[2,736,528,742,522],[2,768,518,770,548],[2,764,574,728,572],[2,712,566,716,550],[2,704,616,712,648],[2,722,700,746,700],[2,764,700,764,678],[2,754,666,736,682],[2,742,658,770,660],[2,796,674,778,704],[2,766,720,750,722],[2,712,718,702,674],[2,702,734,714,756],[2,724,776,746,788],[2,770,796,772,786],[2,776,768,760,786],[2,758,766,778,764],[2,784,758,794,770],[2,806,794,782,808],[2,750,820,722,802],[2,716,802,686,754],[2,698,796,778,866],[2,790,896,768,906],[2,734,922,728,872],[2,726,856,740,850],[2,758,858,758,876],[2,754,884,746,884],[2,762,872,760,858],[2,742,850,734,858],[2,742,830,720,816],[2,750,824,728,862],[2,706,866,676,842],[2,680,806,692,810],[2,716,826,712,836],[2,708,816,698,808],[2,678,816,674,838],[2,694,866,706,858],[2,692,902,720,942],[2,750,988,718,1022],[2,680,1044,664,1014],[2,658,988,672,986],[2,666,998,688,1010],[2,722,1008,704,968],[2,654,886,658,770],[2,668,878,652,896],[2,624,914,598,890],[2,586,862,604,846],[2,640,840,644,876],[2,636,896,620,866],[2,640,898,644,876],[2,644,852,640,852],[2,644,814,626,732],[2,610,660,632,596],[2,624,630,596,618],[2,586,614,586,600],[2,590,574,600,572],[2,604,570,618,578],[2,596,594,610,602],[2,634,570,632,526],[2,630,348,544,350],[2,574,376,566,404],[2,558,430,536,422],[2,506,402,520,384],[2,542,374,554,384],[2,552,396,546,402],[2,562,388,554,384],[2,516,368,516,356],[2,506,440,466,434],[2,488,440,500,398],[2,502,368,500,340]],
        fixed: true,
    },
    {
        name: '老师',
        center: [500,200],
        outline:[[0,440,190],[2,480,142,562,148],[2,718,174,724,426],[2,720,522,742,628],[2,762,734,824,762],[2,772,778,750,738],[2,762,764,796,778],[2,716,762,704,738],[2,724,766,752,774],[2,636,762,630,618],[2,624,406,542,336],[2,500,300,428,368],[2,380,312,442,186],[2,396,174,344,210],[2,254,322,288,598],[2,284,758,236,768],[2,292,772,310,724],[2,308,760,280,772],[2,358,732,364,610],[2,360,500,370,418],[2,384,356,426,368],[2,380,320,440,186],[0,426,364],[2,506,298,556,348],[2,614,390,620,636],[2,600,442,544,376],[2,502,348,428,360]],
        fixed:true,
    },
    {
        name: '舞女',
        center: [500,260],
        outline:[[0,500,198],[2,358,200,310,290],[2,274,362,274,446],[2,280,502,272,532],[2,244,606,274,614],[2,256,636,274,652],[2,266,666,280,682],[2,310,700,278,722],[2,260,740,278,762],[2,294,770,292,786],[2,268,816,312,866],[2,288,832,300,804],[2,324,780,298,758],[2,284,740,316,720],[2,336,696,318,680],[2,294,662,348,644],[2,384,628,350,570],[2,344,550,358,516],[2,366,506,378,496],[2,418,472,408,420],[2,420,460,386,498],[2,426,474,460,456],[2,500,426,500,400],[0,500,198],[2,638,198,694,286],[2,732,344,728,424],[2,720,502,728,532],[2,752,600,726,610],[2,736,636,722,642],[2,734,666,720,682],[2,688,700,722,722],[2,740,740,718,770],[2,710,784,720,816],[2,722,842,680,868],[2,714,846,700,808],[2,684,786,700,768],[2,720,746,684,720],[2,662,696,682,680],[2,706,662,656,644],[2,624,630,644,564],[2,654,538,636,518],[2,626,488,640,462],[2,624,412,522,398],[2,532,426,520,446],[2,510,466,468,474],[2,404,486,398,534],[2,402,478,464,460],[2,508,440,500,400]],
        fixed:true,
    },
    {
        name: '复古1',
        center: [500,250],
        outline:[[0,500,220],[2,334,210,284,358],[2,266,402,260,462],[2,250,540,210,588],[2,150,650,204,736],[2,230,768,276,788],[2,254,778,230,724],[2,260,780,328,774],[2,296,772,274,726],[2,314,786,356,772],[2,318,776,306,708],[2,334,768,374,780],[2,366,780,348,730],[2,366,760,380,754],[2,360,748,348,704],[2,342,624,366,578],[2,392,528,384,448],[2,382,400,410,382],[2,450,356,500,368],[0,500,220],[2,666,210,716,358],[2,734,402,740,462],[2,750,540,790,588],[2,850,650,796,736],[2,770,768,724,788],[2,746,778,770,724],[2,740,780,672,774],[2,704,772,726,726],[2,686,786,644,772],[2,682,776,694,708],[2,666,768,626,780],[2,634,780,652,730],[2,634,760,620,754],[2,640,748,652,704],[2,658,624,634,578],[2,608,528,616,448],[2,618,400,590,382],[2,550,356,500,368]],
        fixed:true,
    },
    {
        name: '复古2',
        center: [500,270],
        outline:[[0,500,244],[2,382,240,318,318],[2,272,376,256,496],[2,248,534,222,552],[2,188,588,214,620],[2,230,640,276,652],[2,254,648,240,604],[2,260,648,312,648],[2,296,644,278,614],[2,314,652,356,650],[2,326,640,306,610],[2,334,638,374,648],[2,366,648,342,620],[2,366,638,380,634],[2,360,632,348,608],[2,336,576,360,554],[2,392,522,398,484],[2,398,462,438,424],[2,464,408,500,408],[0,500,244],[2,618,240,682,318],[2,728,376,744,496],[2,752,534,778,552],[2,812,588,786,620],[2,770,640,724,652],[2,746,648,760,604],[2,740,648,688,648],[2,704,644,722,614],[2,686,652,644,650],[2,674,640,694,610],[2,666,638,626,648],[2,634,648,658,620],[2,634,638,620,634],[2,640,632,652,608],[2,664,576,640,554],[2,608,522,602,484],[2,602,462,562,424],[2,536,408,500,408]],
        fixed:true,
    },
    {
        name: '自然',
        center: [500,250],
        outline:[[0,500,230],[2,424,232,364,274],[2,318,302,288,368],[2,270,420,298,500],[2,296,572,336,588],[2,298,562,320,498],[2,332,484,370,434],[2,356,458,334,480],[2,360,474,398,430],[2,384,458,364,478],[2,414,466,428,428],[2,422,442,386,480],[2,428,464,456,414],[2,476,376,514,392],[2,510,402,516,420],[2,526,394,532,392],[2,564,396,556,438],[2,554,472,582,494],[2,598,502,594,528],[2,602,490,584,474],[2,570,458,578,432],[2,584,410,564,388],[2,582,412,588,436],[2,592,448,602,458],[2,614,476,648,472],[2,622,464,606,436],[2,604,420,592,404],[2,590,392,592,398],[2,624,474,654,484],[2,682,500,684,536],[2,688,568,676,584],[2,704,550,696,506],[2,724,440,714,360],[2,710,316,658,272],[2,590,230,500,230]],
        fixed:true,
    },
    {
        name: '稚嫩1',
        center: [500,330],
        outline:[[0,500,282],[2,424,280,360,308],[2,288,358,276,454],[2,268,548,266,606],[2,266,676,302,728],[2,302,678,320,658],[2,320,586,320,560],[2,328,486,350,408],[2,306,556,326,696],[2,332,652,362,640],[2,350,512,378,440],[2,360,486,362,556],[2,380,518,392,534],[2,396,508,432,444],[2,396,498,390,558],[2,412,520,438,528],[2,440,486,478,442],[2,440,480,434,552],[2,494,530,500,456],[0,500,282],[2,576,280,640,308],[2,712,358,724,454],[2,732,548,734,606],[2,734,676,698,728],[2,698,678,680,658],[2,680,586,680,560],[2,672,486,650,408],[2,694,556,674,696],[2,668,652,638,640],[2,650,512,622,440],[2,640,486,638,556],[2,620,518,608,534],[2,604,508,568,444],[2,604,498,610,558],[2,588,520,562,528],[2,560,486,522,442],[2,560,480,566,552],[2,506,530,500,456]],
        fixed:true,
    },
    {
        name: '稚嫩2',
        center: [500,280],
        outline:[[0,500,250],[2,384,252,328,320],[2,284,400,304,510],[2,308,478,340,478],[2,348,430,374,376],[2,332,450,342,494],[2,352,478,372,478],[2,366,470,412,370],[2,364,476,370,516],[2,396,478,414,476],[2,418,442,454,378],[2,414,436,408,500],[2,434,474,442,478],[2,444,446,480,392],[2,444,444,440,494],[2,484,460,500,408],[0,500,250],[2,612,246,660,308],[2,716,366,694,504],[2,692,478,658,472],[2,660,432,626,376],[2,668,450,654,490],[2,648,478,628,478],[2,634,470,588,370],[2,636,476,630,516],[2,604,478,586,476],[2,582,442,546,378],[2,586,436,592,500],[2,566,474,558,478],[2,556,446,520,392],[2,556,444,560,494],[2,516,460,500,408]],
        fixed:true,
    },
    {
        name: '定制1',
        center: [500,215],
        outline:[[0,532,402],[2,496,366,430,356],[2,344,424,308,726],[2,282,650,292,562],[2,276,660,290,696],[2,242,530,304,380],[2,336,286,462,276],[2,518,306,532,402],[2,552,322,594,292],[2,626,276,646,308],[2,752,406,722,640],[2,720,516,664,440],[2,712,500,704,588],[2,666,392,580,368],[2,536,384,532,402],[2,526,310,464,274],[2,378,276,314,356],[2,294,390,280,454],[2,266,434,288,408],[2,248,408,274,362],[2,260,352,296,336],[2,286,340,304,356],[2,298,352,296,336],[2,314,220,434,178],[2,532,144,648,216],[2,708,266,706,352],[2,712,338,696,358],[2,698,358,720,340],[2,746,344,726,378],[2,762,400,712,418],[2,738,424,722,462],[2,710,358,650,310],[2,628,268,594,290],[2,550,318,532,402]],
        fixed:true,
    },
    {
        name: '定制2',
        center: [500,205],
        outline:[[0,518,364],[2,460,418,404,406],[2,410,388,416,356],[2,354,570,410,578],[2,392,580,374,554],[2,360,520,366,464],[2,368,440,358,408],[2,370,452,360,576],[2,356,620,380,624],[2,338,616,346,522],[2,348,468,332,414],[2,352,482,346,546],[2,346,570,334,630],[2,328,676,344,708],[2,350,720,366,726],[2,342,720,330,710],[2,310,692,324,634],[2,344,554,322,432],[2,346,554,318,662],[2,312,694,320,708],[2,290,694,300,632],[2,308,596,310,542],[2,298,480,308,412],[2,298,478,308,568],[2,300,600,288,624],[2,268,664,284,686],[2,250,654,274,602],[2,292,576,290,498],[2,280,274,382,208],[2,450,160,518,190],[0,518,364],[2,552,410,586,398],[2,588,408,576,370],[2,642,554,616,626],[2,628,606,634,584],[2,640,520,634,464],[2,632,440,642,408],[2,630,452,640,576],[2,644,620,628,646],[2,662,616,654,522],[2,652,468,668,414],[2,648,482,654,546],[2,654,570,666,630],[2,672,676,656,708],[2,650,720,634,726],[2,658,720,670,710],[2,690,692,676,634],[2,656,554,678,432],[2,654,554,682,662],[2,688,694,680,708],[2,710,694,700,632],[2,692,596,690,542],[2,702,480,692,412],[2,702,478,692,568],[2,700,600,712,624],[2,732,664,716,686],[2,750,654,726,602],[2,708,576,710,498],[2,720,274,614,198],[2,536,156,466,176],[2,502,180,518,190]],
        fixed:true,
    },
    {
        name: '定制3',
        center: [500,205],
        outline:[[0,536,352],[2,460,418,404,406],[2,410,388,416,356],[2,354,570,402,618],[2,376,600,366,570],[2,360,520,366,464],[2,368,440,358,408],[2,370,452,360,576],[2,356,620,374,670],[2,338,616,346,522],[2,348,468,332,414],[2,352,482,346,546],[2,346,570,334,630],[2,328,676,344,708],[2,350,720,366,726],[2,342,720,330,710],[2,310,692,324,634],[2,344,554,322,432],[2,346,554,318,662],[2,312,694,320,708],[2,290,694,300,632],[2,308,596,310,542],[2,298,480,308,412],[2,298,478,308,568],[2,300,600,288,624],[2,268,664,284,686],[2,250,654,274,602],[2,292,576,290,498],[2,248,254,378,194],[2,450,160,518,190],[0,536,352],[2,560,400,586,398],[2,588,408,576,370],[2,642,554,616,626],[2,628,606,634,584],[2,640,520,634,464],[2,632,440,642,408],[2,630,452,640,576],[2,644,620,628,646],[2,662,616,654,522],[2,652,468,668,414],[2,648,482,654,546],[2,654,570,666,630],[2,672,676,656,708],[2,650,720,634,726],[2,658,720,670,710],[2,690,692,676,634],[2,656,554,678,432],[2,654,554,682,662],[2,688,694,680,708],[2,710,694,700,632],[2,692,596,690,542],[2,702,480,692,412],[2,702,478,692,568],[2,700,600,712,624],[2,732,664,716,686],[2,750,654,726,602],[2,708,576,710,498],[2,758,226,608,190],[2,536,156,466,176],[2,502,180,518,190]],
        fixed:true,
    },
    {
        name: '左前马尾',
        center: [500,205],
        outline:[[0,538,334],[2,450,404,314,414],[2,414,406,420,388],[2,378,544,302,602],[2,318,614,304,634],[2,350,682,352,712],[2,380,762,450,786],[2,582,840,588,954],[2,490,904,408,882],[2,322,842,314,766],[2,302,694,286,636],[2,264,636,282,602],[2,262,580,256,490],[2,258,310,326,218],[2,404,132,560,168],[2,538,178,502,204],[2,584,152,602,162],[2,682,184,712,260],[2,760,526,682,422],[2,680,380,702,352],[2,714,308,686,256],[2,718,314,702,350],[2,670,400,684,420],[2,702,426,694,468],[2,684,490,694,504],[2,712,544,690,584],[2,696,538,684,506],[2,670,484,678,444],[2,642,432,658,376],[2,660,344,632,320],[2,670,362,652,398],[2,628,356,590,328],[2,542,320,526,310],[2,540,320,574,324],[2,554,332,534,334]],
        fixed:true,
    },
    {
        name: '右前马尾',
        center: [500,205],
        outline:[[0,462,334],[2,550,404,686,414],[2,586,406,580,388],[2,622,544,698,602],[2,682,614,696,634],[2,650,682,648,712],[2,620,762,550,786],[2,418,840,412,954],[2,510,904,592,882],[2,678,842,686,766],[2,698,694,714,636],[2,736,636,718,602],[2,738,580,744,490],[2,742,310,674,218],[2,596,132,440,168],[2,462,178,498,204],[2,416,152,398,162],[2,318,184,288,260],[2,240,526,318,422],[2,320,380,298,352],[2,286,308,314,256],[2,282,314,298,350],[2,330,400,316,420],[2,298,426,306,468],[2,316,490,306,504],[2,288,544,310,584],[2,304,538,316,506],[2,330,484,322,444],[2,358,432,342,376],[2,340,344,368,320],[2,330,362,348,398],[2,372,356,410,328],[2,458,320,474,310],[2,460,320,426,324],[2,446,332,466,334]],
        fixed:true,
    },
    {
        name: '公主',
        center: [500,265],
        outline:[[0,500,238],[2,402,230,344,292],[2,278,364,286,518],[2,286,644,248,716],[2,208,766,208,788],[2,230,818,256,822],[2,260,768,284,718],[2,264,768,266,826],[2,290,838,318,836],[2,308,784,320,734],[2,308,788,326,838],[2,352,846,366,834],[2,356,802,348,746],[2,362,808,372,834],[2,404,842,424,826],[2,378,784,364,714],[2,350,640,382,560],[2,404,510,400,480],[2,362,492,298,470],[2,348,488,396,480],[2,454,466,500,402],[0,500,238],[2,598,230,656,292],[2,722,364,714,518],[2,714,644,752,716],[2,792,766,792,788],[2,770,818,744,822],[2,740,768,716,718],[2,736,768,734,826],[2,710,838,682,836],[2,692,784,680,734],[2,692,788,674,838],[2,648,846,634,834],[2,644,802,652,746],[2,638,808,628,834],[2,596,842,576,826],[2,622,784,636,714],[2,650,640,618,560],[2,596,510,600,480],[2,638,492,702,470],[2,652,488,604,480],[2,546,466,500,402]],
        fixed:true,
    },
    {
        name: '仙女',
        center: [500,239],
        outline: [[0,500,188],[2,348,192,300,346],[2,232,338,204,604],[2,188,758,104,832],[2,212,752,230,612],[2,248,436,298,366],[2,274,446,264,684],[2,264,796,244,858],[2,266,870,288,848],[2,284,818,280,788],[2,300,852,304,848],[2,290,772,300,766],[2,300,816,314,844],[2,352,816,382,832],[2,326,752,340,624],[2,342,654,374,666],[2,408,672,422,634],[2,376,692,344,606],[2,342,522,376,442],[2,452,464,500,392],[0,500,188],[2,652,192,700,346],[2,768,338,796,604],[2,812,758,896,832],[2,788,752,770,612],[2,752,436,702,366],[2,726,446,736,684],[2,736,796,756,858],[2,734,870,712,848],[2,716,818,720,788],[2,700,852,696,848],[2,710,772,700,766],[2,700,816,686,844],[2,648,816,618,832],[2,674,752,660,624],[2,658,654,626,666],[2,592,672,578,634],[2,624,692,656,606],[2,658,522,624,442],[2,548,464,500,392]],
        fixed: true,
    },
    {
        name: '清爽',
        center: [500,251],
        outline: [[0,500,226],[2,308,216,290,428],[2,286,550,274,618],[2,212,764,310,844],[2,290,808,288,764],[2,310,836,358,874],[2,314,770,332,680],[2,356,602,340,444],[2,348,528,350,570],[2,374,556,400,554],[2,360,500,376,430],[2,384,392,412,362],[2,382,406,376,464],[2,440,454,500,454],[0,500,226],[2,702,216,710,428],[2,714,550,726,618],[2,788,764,690,844],[2,710,808,712,764],[2,690,836,642,874],[2,686,770,668,680],[2,644,602,660,444],[2,652,528,650,570],[2,626,556,600,554],[2,640,500,624,430],[2,616,392,588,362],[2,618,406,624,464],[2,560,454,500,454]],
        fixed: true,
    },
];

export const generalBangsTemplates = [
    {
        name: '空气刘海',
        center: [500,248],
        outline:[[0,356,336],[2,324,392,364,428],[0,376,336],[2,352,376,380,412],[0,396,336],[2,372,368,396,404],[0,412,336],[2,396,356,416,396],[0,424,340],[2,416,356,428,388],[0,444,332],[2,432,356,452,380],[0,436,336],[2,428,352,440,376],[0,464,332],[2,456,356,472,372],[0,456,332],[2,444,352,460,380],[0,488,332],[2,476,356,496,372],[0,472,332],[2,464,352,484,372],[0,480,496],[0,644,336],[2,676,392,636,428],[0,624,336],[2,648,376,620,412],[0,604,336],[2,628,368,604,404],[0,588,336],[2,604,356,584,396],[0,576,340],[2,584,356,572,388],[0,556,332],[2,568,356,548,380],[0,564,336],[2,572,352,560,376],[0,536,332],[2,544,356,528,372],[0,544,332],[2,556,352,540,380],[0,512,332],[2,524,356,504,372],[0,528,332],[2,536,352,516,372],[0,520,496]]
    },
    {
        name: '卷',
        center: [500,288],
        outline:[[0,484,344],[2,462,376,494,404],[0,456,344],[2,438,376,494,404],[0,438,346],[2,412,378,472,404],[0,406,346],[2,398,376,464,400],[0,388,348],[2,382,378,444,402],[0,358,350],[2,352,386,448,404],[0,514,344],[2,538,376,506,404],[0,544,344],[2,562,376,506,404],[0,562,346],[2,588,378,528,404],[0,594,346],[2,602,376,534,400],[0,612,348],[2,618,378,556,402],[0,642,350],[2,648,386,552,404]]
    },
    {
        name: '左斜狗啃',
        center: [500,322],
        outline:[[0,500,336],[2,620,328,642,408],[2,654,450,626,482],[2,578,484,550,474],[2,584,448,594,428],[2,574,466,536,474],[2,512,482,484,474],[2,520,450,544,428],[2,502,474,470,474],[2,446,474,424,474],[2,470,454,484,424],[2,464,460,418,474],[2,386,474,362,474],[2,406,454,412,432],[2,394,458,352,474],[2,314,474,290,474],[2,336,452,352,426],[2,406,352,500,336]]
    },
    {
        name: '右斜狗啃',
        center: [500,322],
        outline:[[0,500,336],[2,386,328,364,408],[2,352,450,380,482],[2,424,484,452,474],[2,420,448,410,428],[2,428,466,466,474],[2,488,482,516,474],[2,472,450,458,428],[2,498,474,520,474],[2,552,474,570,474],[2,520,454,516,424],[2,534,460,578,474],[2,608,474,632,474],[2,590,454,584,432],[2,600,458,640,474],[2,678,474,698,474],[2,654,452,640,426],[2,590,352,500,336]]
    },
];
export const maleBangsTemplates = [
    {
        name: '左斜',
        center: [500,263],
        outline:[[0,612,366],[2,602,404,524,448],[2,570,396,576,364],[2,562,398,510,446],[2,542,386,542,364],[2,532,396,480,442],[2,518,380,516,364],[2,502,404,454,434],[2,502,380,500,364],[2,476,404,424,428],[2,472,384,472,362],[2,444,400,402,434],[2,440,384,440,364],[2,410,408,374,434],[2,416,382,410,364],[2,400,396,354,428],[2,348,444,352,474],[2,332,412,362,324],[2,372,298,458,282],[2,596,266,624,292],[2,670,330,636,398],[2,624,434,598,450],[2,630,390,632,366],[2,622,402,580,472],[2,614,388,612,366],[0,520,512]]
    },
    {
        name: '右斜',
        center: [500,263],
        outline:[[0,380,366],[2,390,404,468,448],[2,422,396,416,364],[2,430,398,482,446],[2,450,386,450,364],[2,460,396,512,442],[2,474,380,476,364],[2,490,404,538,434],[2,490,380,492,364],[2,516,404,568,428],[2,520,384,520,362],[2,548,400,590,434],[2,552,384,552,364],[2,582,408,618,434],[2,576,382,582,364],[2,592,396,638,428],[2,644,444,640,474],[2,660,412,630,324],[2,620,298,534,282],[2,396,266,368,292],[2,322,330,356,398],[2,368,434,394,450],[2,362,390,360,366],[2,370,402,412,472],[2,378,388,380,366],[0,472,512]]
    },
    {
        name: '犬牙',
        center: [500,143],
        outline:[[0,416,240],[2,408,294,436,372],[2,368,286,380,240],[2,370,304,402,324],[2,340,286,340,240],[0,578,246],[2,578,300,556,312],[2,590,298,598,250],[2,604,288,586,342],[2,638,270,620,240]]
    },
    {
        name: '螳螂',
        center: [500,208],
        outline:[[0,486,318],[2,522,360,614,288],[2,532,410,506,440],[2,674,300,648,212],[2,550,308,514,298],[0,642,266],[2,662,268,672,256],[2,664,308,584,404],[2,638,310,634,296]]
    },
];
export const femaleBangsTemplates = [
    {
        name: '齐刘海1',
        center: [502,226],
        outline: [[0,500,240],[2,442,250,396,292],[2,380,328,376,388],[1,414,382],[1,426,332],[1,418,382],[1,444,378],[1,454,318],[1,448,378],[1,472,372],[1,476,318],[1,474,374],[1,498,374],[1,502,316],[0,500,240],[2,558,250,604,292],[2,620,328,624,388],[1,586,382],[1,574,332],[1,582,382],[1,556,378],[1,544,318],[1,548,378],[1,528,372],[1,520,318],[1,524,374],[1,502,374],[1,502,322]]
    },
    {
        name: '齐刘海2',
        center: [500,385],
        outline: [[0,500,416],[2,414,418,386,466],[2,382,518,338,554],[1,376,554],[1,398,512],[1,380,546],[1,410,546],[1,418,508],[1,414,544],[1,440,544],[1,448,504],[1,440,544],[1,470,544],[1,474,506],[1,470,544],[1,488,544],[1,496,508],[1,488,544],[1,500,542],[0,496,444],[0,500,416],[2,586,418,614,466],[2,618,518,662,554],[1,624,554],[1,602,512],[1,620,546],[1,590,546],[1,582,508],[1,586,544],[1,560,544],[1,552,504],[1,560,544],[1,530,544],[1,526,506],[1,530,544],[1,512,544],[1,504,508],[1,512,544],[1,500,542],[0,504,444]]
    },
    {
        name: '桃花瓣',
        center: [500,302],
        outline: [[0,500,380],[2,494,438,420,448],[2,400,408,426,382],[2,402,412,374,414],[2,366,378,378,370],[0,500,380],[2,506,438,580,448],[2,600,408,574,382],[2,598,412,626,414],[2,634,378,622,370]]
    },
    {
        name: '中分（女）',
        center: [500,202],
        outline:[[0,500,332],[2,416,390,398,370],[2,372,442,398,494],[2,284,354,366,250],[2,428,192,500,186],[0,500,332],[2,584,390,598,370],[2,614,442,592,494],[2,716,354,636,248],[2,570,192,500,186]]
    },
    {
        name: '月牙',
        center: [500,272],
        outline: [[0,500,254],[2,398,244,336,346],[2,280,438,328,516],[2,370,570,400,564],[2,354,534,378,448],[2,402,414,440,412],[2,484,404,500,396],[0,500,254],[2,602,244,664,346],[2,720,438,672,516],[2,630,570,600,564],[2,646,534,622,448],[2,598,414,560,412],[2,516,404,500,396]],
    },
    {
        name: '左三七',
        center: [500,330],
        outline:[[0,406,394],[2,348,426,358,462],[2,370,482,346,504],[2,448,494,528,416],[2,514,444,470,478],[2,524,458,554,418],[2,550,454,648,494],[2,670,440,618,394]]
    },
    {
        name: '右三七',
        center: [500,330],
        outline:[[0,594,394],[2,652,426,642,462],[2,630,482,654,504],[2,552,494,472,416],[2,486,444,530,478],[2,476,458,446,418],[2,450,454,352,494],[2,330,440,382,394]]
    },
    {
        name: '柱',
        center: [500,408],
        outline:[[0,500,388],[2,452,394,428,450],[2,424,528,456,572],[2,466,558,466,554],[2,468,562,468,572],[2,480,556,474,552],[2,480,562,480,568],[2,480,550,480,552],[2,480,556,484,564],[2,482,552,490,552],[2,490,558,492,560],[2,494,562,496,558],[2,498,556,500,554],[0,500,388],[2,548,394,572,450],[2,576,528,544,572],[2,534,558,534,554],[2,532,562,532,572],[2,520,556,526,552],[2,520,562,520,568],[2,520,550,520,552],[2,520,556,516,564],[2,518,552,510,552],[2,510,558,508,560],[2,506,562,504,558],[2,502,556,500,554]],
        fixed: true,
    },
    {
        name: '波浪',
        center: [500,198],
        outline: [[0,322,286],[2,282,354,320,400],[2,346,424,308,460],[2,262,486,304,518],[2,342,534,300,562],[2,290,584,316,590],[2,334,610,312,626],[2,294,638,316,650],[2,330,660,320,674],[2,312,676,308,684],[2,294,698,314,732],[2,304,698,326,688],[2,352,652,330,640],[2,322,630,334,622],[2,362,604,342,586],[2,320,570,342,558],[2,370,534,346,516],[2,306,492,340,470],[2,386,442,366,406],[2,330,358,364,322],[2,386,306,354,278],[0,678,286],[2,718,354,680,400],[2,654,424,692,460],[2,738,486,696,518],[2,658,534,700,562],[2,710,584,684,590],[2,666,610,688,626],[2,706,638,684,650],[2,670,660,680,674],[2,688,676,692,684],[2,706,698,686,732],[2,696,698,674,688],[2,648,652,670,640],[2,678,630,666,622],[2,638,604,658,586],[2,680,570,658,558],[2,630,534,654,516],[2,694,492,660,470],[2,614,442,634,406],[2,670,358,636,322],[2,614,306,646,278]],
        fixed: true,
    },
];

export const generalBackHairTemplates = [
    {
        name: '彗星',
        center: [500,308],
        outline:[[0,500,324],[1,390,324],[1,378,826],[1,412,728],[1,424,826],[1,454,712],[1,450,844],[1,474,704],[1,492,848],[1,516,704],[1,542,830],[1,542,708],[1,600,844],[1,592,698],[1,622,844],[1,618,324],[1,500,324]]
    },
    {
        name: '水母',
        center: [500,308],
        outline:[[0,500,358],[2,372,384,358,502],[2,362,682,296,796],[2,318,780,336,764],[2,336,780,334,784],[2,352,764,356,762],[2,356,784,360,796],[2,386,754,386,754],[2,394,790,386,798],[2,410,782,414,766],[2,428,784,428,792],[2,436,764,446,740],[2,448,770,446,786],[2,454,764,456,752],[2,460,782,460,796],[2,488,776,488,764],[2,492,782,492,786],[2,498,766,500,766],[0,500,358],[2,632,382,642,502],[2,638,682,704,796],[2,682,780,662,764],[2,662,780,666,784],[2,646,764,644,762],[2,644,784,640,796],[2,614,754,614,754],[2,604,790,614,798],[2,590,782,586,766],[2,570,784,570,792],[2,562,764,554,740],[2,552,770,554,786],[2,546,764,544,752],[2,540,782,540,796],[2,512,776,512,764],[2,508,782,508,786],[2,502,766,500,766]]
    },
    {
        name: '扫帚',
        center: [500,108],
        outline:[[0,500,314],[2,424,314,394,370],[2,372,428,376,540],[2,378,604,364,654],[2,390,624,392,578],[2,404,608,394,650],[2,424,592,428,586],[2,436,602,434,646],[2,456,586,462,590],[2,470,604,462,650],[2,482,594,478,594],[2,486,622,484,644],[2,500,584,500,590],[0,500,314],[2,576,314,606,370],[2,628,428,624,540],[2,622,604,636,654],[2,610,624,608,578],[2,596,608,606,650],[2,576,592,572,586],[2,564,602,566,646],[2,544,586,538,590],[2,530,604,538,650],[2,518,594,522,594],[2,514,622,516,644],[2,500,584,500,590]]
    },
    {
        name: '高马尾',
        center: [500,288],
        outline:[[0,500,200],[2,464,196,436,242],[2,422,266,462,294],[2,478,298,500,298],[0,500,200],[2,536,196,564,242],[2,578,266,538,294],[2,522,298,500,298],[0,466,294],[2,454,472,414,576],[2,370,686,398,782],[2,436,868,500,888],[0,534,294],[2,546,472,586,576],[2,630,686,602,782],[2,564,868,500,888]]
    },
    {
        name: '低马尾',
        center: [500,208],
        outline:[[0,500,200],[2,452,196,412,242],[2,398,266,416,300],[2,466,298,500,298],[0,428,292],[2,432,406,416,486],[2,358,722,388,792],[2,408,858,500,888],[0,500,200],[2,548,196,588,242],[2,602,266,584,300],[2,534,298,500,298],[0,572,292],[2,568,406,584,486],[2,642,722,612,792],[2,592,858,500,888]]
    },
    {
        name: '左菠萝',
        center: [500,328],
        outline:[[0,484,468],[2,488,408,394,326],[2,352,276,362,252],[2,340,296,380,362],[2,320,280,310,232],[2,308,300,362,366],[2,308,282,232,308],[2,282,292,340,362],[2,282,332,188,388],[2,268,348,352,400],[2,310,372,212,416],[2,264,388,348,428],[2,380,452,392,472],[2,412,520,456,508],[2,484,496,484,468]]
    },
    {
        name: '右菠萝',
        center: [500,328],
        outline:[[0,516,470],[2,512,412,600,334],[2,640,286,632,264],[2,652,306,614,368],[2,672,290,680,244],[2,682,310,632,372],[2,682,292,756,318],[2,708,300,652,368],[2,708,340,798,394],[2,720,356,640,404],[2,680,378,772,420],[2,724,394,644,432],[2,614,454,602,474],[2,584,520,542,508],[2,516,496,516,470]]
    },
];
export const maleBackHairTemplates = [
    {
        name: '圣诞树',
        center: [500,142],
        outline:[[0,500,304],[2,416,320,364,394],[2,302,480,218,492],[2,280,520,368,498],[2,346,542,230,566],[2,324,600,352,594],[2,302,672,248,658],[2,344,678,380,654],[2,366,704,278,762],[2,366,764,424,706],[2,402,814,350,830],[2,402,842,446,784],[2,442,848,334,910],[2,382,916,454,878],[2,450,916,412,944],[2,442,948,466,912],[2,480,942,452,964],[2,490,954,500,930],[0,500,304],[2,584,320,636,394],[2,698,480,782,492],[2,720,520,632,498],[2,654,542,770,566],[2,676,600,648,594],[2,698,672,752,658],[2,656,678,620,654],[2,634,704,722,762],[2,634,764,576,706],[2,598,814,650,830],[2,598,842,554,784],[2,558,848,666,910],[2,618,916,546,878],[2,550,916,588,944],[2,558,948,534,912],[2,520,942,548,964],[2,510,954,500,930]]
    },

    {
        name: '异形',
        center: [500,308],
        outline:[[1,582,492],[1,398,494],[2,318,704,244,696],[2,324,758,392,620],[2,344,806,250,828],[2,356,880,408,726],[2,362,974,324,1004],[2,468,822,488,708],[2,468,882,386,1090],[2,498,930,514,724],[2,536,836,652,1054],[2,562,852,556,714],[2,590,864,668,896],[2,614,820,592,702],[2,640,820,740,838],[2,650,754,626,616],[2,654,706,738,678],[2,634,562,616,492],[1,574,492]]
    },
];
export const femaleBackHairTemplates = [
    {
        name: '泥石流',
        center: [500,308],
        outline: [[0,502,368],[2,446,386,414,440],[2,394,514,388,576],[2,388,622,386,690],[2,380,728,364,758],[2,320,816,282,852],[2,258,890,264,922],[2,290,934,372,936],[2,432,938,478,938],[2,502,938,498,932],[0,498,366],[2,554,386,586,440],[2,606,514,612,576],[2,612,622,614,690],[2,620,728,636,758],[2,680,816,718,852],[2,742,890,736,922],[2,710,934,628,936],[2,568,938,522,938],[2,498,938,498,932],[0,502,368]]
    },
    {
        name: '菇',
        center: [500,308],
        outline: [[0,500,294],[2,436,296,368,348],[2,246,454,256,680],[2,276,868,394,676],[2,398,766,356,958],[2,424,988,500,980],[0,500,294],[2,562,296,632,348],[2,754,454,742,680],[2,724,868,604,676],[2,602,766,644,958],[2,576,988,500,980]]
    },
    {
        name: '瀑布1',
        center: [500,308],
        outline: [[0,500,306],[2,398,304,366,362],[2,348,420,344,742],[2,422,746,500,740],[0,500,306],[2,602,304,634,362],[2,652,420,656,742],[2,578,746,500,740]]
    },
    {
        name: '瀑布2',
        center: [500,308],
        outline: [[0,500,310],[2,420,310,380,362],[2,312,470,316,746],[2,422,784,500,778],[0,500,310],[2,580,310,620,362],[2,688,470,684,746],[2,578,784,500,778]],
    },
    {
        name: '瀑布3',
        center: [500,308],
        outline: [[0,500,288],[2,410,288,360,332],[2,288,384,294,764],[2,442,792,500,740],[0,500,288],[2,590,288,640,332],[2,712,384,706,764],[2,558,792,500,740]],
    },
    {
        name: '瀑布4',
        center: [500,308],
        outline: [[0,500,340],[2,422,350,408,368],[2,358,552,342,914],[2,456,922,500,914],[0,500,340],[2,578,350,592,368],[2,642,552,658,914],[2,544,922,500,914]]
    },
    {
        name: '瀑布5',
        center: [500,308],
        outline: [[0,500,310],[2,420,310,372,356],[2,312,470,328,980],[2,346,1010,500,1020],[0,500,310],[2,580,310,628,356],[2,688,470,672,980],[2,654,1010,500,1020]],
    },
    {
        name: '瀑布6',
        center: [500,308],
        outline: [[0,500,288],[2,428,292,374,328],[2,300,404,294,986],[2,308,1042,500,1050],[0,500,288],[2,572,292,626,328],[2,700,404,706,986],[2,692,1042,500,1050]],
    },
    {
        name: '高弯双马尾',
        center: [500,258],
        outline:[[0,418,286],[2,398,250,362,254],[2,302,262,306,326],[2,316,376,392,348],[2,422,320,414,282],[0,342,354],[2,298,476,210,526],[2,82,600,50,684],[2,4,848,142,936],[2,92,874,96,806],[2,96,908,212,904],[2,158,884,134,796],[2,152,864,264,864],[2,218,854,180,806],[2,152,748,172,676],[2,184,628,258,562],[2,338,514,370,354],[0,582,286],[2,602,250,638,254],[2,698,262,694,326],[2,684,376,608,348],[2,578,320,586,282],[0,658,354],[2,702,476,790,526],[2,918,600,950,684],[2,996,848,858,936],[2,908,874,904,806],[2,904,908,788,904],[2,842,884,866,796],[2,848,864,736,864],[2,782,854,820,806],[2,848,748,828,676],[2,816,628,742,562],[2,662,514,630,354]]
    },
    {
        name: '高直双马尾',
        center: [500,258],
        outline:[[0,400,328],[2,390,300,324,296],[2,252,308,260,354],[2,286,394,362,382],[2,402,358,402,324],[0,312,386],[2,298,388,288,380],[2,168,652,244,758],[2,232,700,244,680],[2,238,712,258,736],[2,258,698,270,682],[2,276,694,270,742],[2,334,644,316,388],[0,600,328],[2,610,300,676,296],[2,748,308,740,354],[2,714,394,638,382],[2,598,358,598,324],[0,688,386],[2,702,388,712,380],[2,832,652,756,758],[2,768,700,756,680],[2,762,712,742,736],[2,742,698,730,682],[2,724,694,730,742],[2,666,644,684,388]]
    },
    {
        name: '低弯双马尾',
        center: [500,202],
        outline:[[0,396,296],[2,380,272,320,280],[2,272,300,284,336],[2,344,372,364,352],[2,404,336,392,296],[0,332,336],[2,160,384,112,520],[2,72,664,120,832],[2,140,920,76,1000],[2,196,924,176,848],[2,196,924,144,976],[2,228,916,236,832],[2,244,880,220,944],[2,292,852,296,748],[2,292,680,240,616],[2,196,536,244,464],[2,284,404,380,344],[0,436,308],[0,608,296],[2,624,272,684,280],[2,732,300,716,336],[2,660,372,636,352],[2,600,336,608,296],[0,672,336],[2,840,384,888,520],[2,928,664,880,832],[2,860,920,928,1000],[2,808,924,828,848],[2,804,924,860,976],[2,772,916,764,832],[2,760,880,784,944],[2,708,852,704,748],[2,708,680,760,616],[2,804,536,760,464],[2,720,404,624,344],[0,564,308]]
    },
    {
        name: '低直双马尾',
        center: [500,282],
        outline:[[0,436,504],[2,392,552,372,628],[2,348,632,352,660],[2,252,768,328,1004],[2,468,844,380,664],[2,400,668,384,632],[2,464,612,460,540],[0,564,504],[2,612,552,628,628],[2,656,632,652,660],[2,752,768,676,1004],[2,532,844,620,664],[2,604,668,616,632],[2,536,612,544,540]]
    },
    {
        name: '短双炮',
        center: [500,232],
        outline:[[0,336,630],[2,324,602,332,576],[2,352,538,400,552],[2,424,582,414,612],[2,388,636,358,642],[2,338,640,336,630],[2,310,612,180,700],[2,236,688,284,672],[2,256,696,224,742],[2,284,698,302,684],[2,266,732,264,790],[2,278,738,318,704],[2,294,772,302,808],[2,302,738,334,714],[2,324,764,308,820],[2,332,742,350,724],[2,350,756,324,798],[2,360,776,368,734],[2,378,768,356,820],[2,426,706,376,638],[0,500,596],[0,664,630],[2,676,602,668,576],[2,648,538,600,552],[2,576,582,586,612],[2,612,636,642,642],[2,662,640,664,630],[2,690,612,820,700],[2,764,688,716,672],[2,744,696,776,742],[2,716,698,698,684],[2,734,732,736,790],[2,722,738,682,704],[2,706,772,698,808],[2,698,738,666,714],[2,676,764,692,820],[2,668,742,650,724],[2,650,756,676,798],[2,640,776,632,734],[2,622,768,644,820],[2,574,706,624,638],[0,500,596]]
    },
    {
        name: '瓢',
        center: [500,142],
        outline:[[0,500,400],[2,418,390,356,452],[2,308,544,318,630],[2,476,636,500,638],[0,500,400],[2,582,390,644,452],[2,692,544,682,630],[2,524,636,500,638]],
    },
    {
        name: '幽灵',
        center: [500,288],
        outline:[[0,500,296],[2,408,302,380,362],[2,326,488,384,662],[2,428,786,320,848],[2,416,892,500,896],[0,500,296],[2,592,302,620,362],[2,674,488,616,662],[2,572,786,680,848],[2,584,892,500,896]]
    },
    {
        name: '左单马尾1',
        center: [500,218],
        outline:[[0,274,262],[2,294,208,382,274],[2,422,298,358,334],[2,300,354,286,344],[2,260,312,278,256],[2,242,268,196,330],[2,140,406,128,504],[2,118,590,148,670],[2,174,732,204,744],[2,162,684,176,638],[2,172,684,202,728],[2,192,682,210,642],[2,192,676,212,732],[2,246,674,250,618],[2,252,580,244,538],[2,240,510,232,472],[2,220,418,248,368],[2,266,340,272,308]],
        fixed: true,
    },
    {
        name: '左单马尾2',
        center: [500,218],
        outline:[[0,364,264],[2,344,222,298,206],[2,238,242,222,358],[2,208,464,216,536],[2,218,612,278,694],[2,262,626,260,582],[2,268,628,286,660],[2,280,598,288,570],[2,306,618,302,660],[2,330,600,336,534],[2,350,412,328,358],[2,350,350,362,356],[2,380,392,418,396],[2,486,328,444,256],[2,394,234,362,258]],
        fixed: true,
    },
    {
        name: '左单马尾3',
        center: [500,218],
        outline:[[0,448,304],[2,424,194,366,192],[2,288,214,276,364],[2,266,472,282,560],[2,304,672,334,710],[2,324,672,332,628],[2,340,684,352,702],[2,358,648,380,616],[2,392,664,380,738],[2,424,660,430,576],[2,434,452,412,398],[2,434,390,446,396],[2,464,432,502,436],[2,570,368,528,296],[2,478,274,446,298]],
        fixed: true,
    },
    {
        name: '右单马尾1',
        center: [500,218],
        outline:[[0,726,262],[2,706,208,618,274],[2,578,298,642,334],[2,700,354,714,344],[2,740,312,722,256],[2,758,268,804,330],[2,860,406,872,504],[2,882,590,852,670],[2,826,732,796,744],[2,838,684,824,638],[2,828,684,798,728],[2,808,682,790,642],[2,808,676,788,732],[2,754,674,750,618],[2,748,580,756,538],[2,760,510,768,472],[2,780,418,752,368],[2,734,340,728,308]],
        fixed: true,
    },
    {
        name: '右单马尾2',
        center: [500,218],
        outline:[[0,636,264],[2,656,222,702,206],[2,762,242,778,358],[2,792,464,784,536],[2,782,612,722,694],[2,738,626,740,582],[2,732,628,714,660],[2,720,598,712,570],[2,694,618,698,660],[2,670,600,664,534],[2,650,412,672,358],[2,650,350,638,356],[2,620,392,582,396],[2,514,328,556,256],[2,606,234,638,258]],
        fixed: true,
    },
    {
        name: '右单马尾3',
        center: [500,218],
        outline:[[0,552,304],[2,576,194,634,192],[2,712,214,724,364],[2,734,472,718,560],[2,696,672,666,710],[2,676,672,668,628],[2,660,684,648,702],[2,642,648,620,616],[2,608,664,620,738],[2,576,660,570,576],[2,566,452,588,398],[2,566,390,554,396],[2,536,432,498,436],[2,430,368,472,296],[2,522,274,554,298]],
        fixed: true,
    },
    {
        name: '扇子',
        center: [500,108],
        outline:[[0,500,302],[2,342,326,268,560],[2,296,536,296,538],[2,294,548,284,568],[2,308,558,310,544],[2,310,562,306,570],[2,318,556,326,544],[2,324,584,324,592],[2,340,560,342,556],[2,340,582,340,582],[2,352,560,352,558],[2,358,574,360,578],[2,368,558,370,548],[2,370,592,368,584],[2,384,574,388,550],[2,382,582,382,590],[2,388,578,400,554],[2,394,596,394,596],[2,408,566,408,566],[2,408,600,414,604],[2,416,580,422,578],[2,428,618,428,628],[2,444,582,442,588],[2,448,608,454,630],[2,458,580,460,592],[2,476,634,472,636],[2,476,590,476,588],[2,478,610,478,614],[2,484,592,486,590],[2,492,608,492,610],[2,494,590,500,590],[0,500,302],[2,658,326,730,560],[2,704,536,704,538],[2,706,548,716,568],[2,692,558,688,544],[2,688,562,694,570],[2,682,556,674,544],[2,676,584,676,592],[2,660,560,658,556],[2,660,582,660,582],[2,646,560,646,558],[2,642,574,640,578],[2,632,558,630,548],[2,630,592,632,584],[2,616,574,612,550],[2,618,582,618,590],[2,612,578,600,554],[2,604,596,604,596],[2,592,566,592,566],[2,592,600,586,604],[2,584,580,578,578],[2,572,618,572,628],[2,556,582,558,588],[2,552,608,546,630],[2,542,580,540,592],[2,524,634,528,636],[2,524,590,524,588],[2,520,610,520,614],[2,516,592,514,590],[2,508,608,508,610],[2,506,590,500,590]]
    },
    {
        name: '大长今',
        center: [500,108],
        outline:[[0,500,246],[2,400,254,364,316],[2,308,402,304,654],[2,284,822,150,996],[2,330,1104,500,1116],[0,500,246],[2,600,254,636,316],[2,692,402,696,654],[2,716,822,850,996],[2,670,1104,500,1116]]
    },
    {
        name: '钩爪',
        center: [500,108],
        outline:[[0,500,364],[2,364,372,356,462],[2,352,570,300,634],[2,250,688,290,724],[2,278,690,324,650],[2,296,702,324,718],[2,314,704,358,662],[2,336,702,356,708],[2,352,690,394,662],[2,386,692,398,710],[2,400,678,418,664],[2,412,686,420,706],[2,432,686,462,664],[2,448,692,454,706],[2,458,682,488,672],[2,486,698,494,704],[2,494,680,500,670],[0,500,364],[2,636,372,640,464],[2,648,584,698,634],[2,750,688,708,724],[2,722,690,676,650],[2,704,702,676,718],[2,686,704,642,662],[2,662,702,644,708],[2,646,690,604,662],[2,614,692,602,710],[2,600,678,582,664],[2,588,686,578,706],[2,566,686,538,664],[2,552,692,546,706],[2,542,682,512,672],[2,514,698,506,704],[2,506,680,500,670]]
    },
];

/* 眼睛款式 */
export const glassTemplates = [
    {
        name: '会长',
        center: [500,320],
        lineWidthRange: [1,2],
        outline: [[0,478,322],[2,472,240,412,240],[2,336,242,336,322],[2,338,398,412,398],[2,472,400,478,322],[1,500,322],[0,474,304],[1,500,304],[0,336,306],[1,122,114],[0,506,322],[0,522,322],[2,528,240,588,240],[2,664,242,664,322],[2,662,398,588,398],[2,528,400,522,322],[1,500,322],[0,526,304],[1,500,304],[0,664,306],[1,896,96],[0,494,322]]
    },
    {
        name: '框',
        center: [500,376],
        lineWidthRange: [3,4],
        outline: [[0,456,334],[2,478,334,476,352],[2,478,410,476,410],[2,472,428,460,426],[2,350,426,350,426],[2,330,418,332,400],[2,332,332,332,352],[2,330,332,346,330],[2,458,332,456,334],[0,474,372],[1,500,372],[0,330,350],[1,184,222],[0,544,334],[2,522,334,524,352],[2,522,410,524,410],[2,528,428,540,426],[2,650,426,650,426],[2,670,418,668,400],[2,668,332,668,352],[2,670,332,654,330],[2,542,332,544,334],[0,526,372],[1,500,372],[0,670,350],[1,830,212]]
    },
];

/* 衣服 */
const ANCHOR_MAP = {
    'd': ['c','cp2'],
    'e': ['d','cp3'],
    'f': ['e','cp4'],
    'g': ['f','cp5'],
    'i1': ['h','cp6'],
    'i2': ['i1','cpi'],
    'j': ['i2','cp7'],
    'k': ['j','cp8'],
}

export function genRandomAvatar(person){ // 随机生成肖像
    let res;
    let { personalities, gender, age, } = person;
    let emotion = Math.round(personalities[2]*.25+personalities[4]*.75); // 0-100
    let bald = (r(0,100)<5&&gender==1);
    // 生成发色
    let hairColor = genHairColor(gender);
    let { color, grd, } = hairColor;

    // bald = 1;

    // 生成基本脸
    let faceData = genFaceData(gender,age,bald);
    // 生成脸部阴影
    let faceShadowData, faceShadowData1, faceShadowData2;
    faceShadowData = genFaceShadowData(faceData,gender,age);
    faceShadowData1 = faceShadowData.res1;
    faceShadowData2 = faceShadowData.res2;
    // 生成双耳
    let earsData = genEarsData(faceData,gender,age);
    // 生成双眉
    let browsData = genBrowsData(faceData,gender,color);
    // 生成双眼
    let eyesData = genEyesData(faceData,gender,age,personalities);
    // 生成双眼皮
    let eyeskinsData;
    // if(r(0,100)<90&&(gender==1||age<60)){
    //     eyeskinsData = genEyeSkinsData(eyesData,gender);
    // }
    eyeskinsData = genEyeSkinsData(eyesData,gender);
    // 生成睫毛
    let lashData;
    if(gender==2){
        lashData = genLashData(eyesData,gender,age);
    }
    // 生成外双瞳
    let eyeoutballsData = genEyeoutballsData(eyesData,gender,age);
    let eyeinballsData;
    if(r(0,100)<90){ // 生成内双瞳
        eyeinballsData = genEyeinballsData(eyesData,eyeoutballsData,gender,age);
    }

    // 生成鼻子
    let noseData = genNoseData(faceData,gender,age);
    // 生成嘴唇
    let lipData = genLipData(faceData,gender,age,emotion);
    let bottomLipData;
    if(!lipData.strokeColor){ // 生成下嘴唇
        bottomLipData = genBottomLipData(faceData,lipData,gender);
    }
    let topMoustacheData;
    if((r(0,100)<age&&age>=30&&gender==1)){ // 生成上胡子
        topMoustacheData = genTopMoustacheData(faceData,lipData,color,grd);
    }
    let nasoData;
    if(age>=50){ // 生成法令纹
        nasoData = genNasoData(faceData,eyesData,gender,age);
    }
    let bracketsData;
    if(age>=60){ // 生成括号
        bracketsData = genBracketsData(faceData,lipData);
    }
    // 生成身体
    let bodyData = genBodyData(faceData,gender,age);
    // 生成锁骨
    let collarData = genCollarData(bodyData,gender,age);
    // 生成乳房&乳房轮廓
    let breastData,breastOutlineData,breastShadowData;
    if(gender==2&&(age>=14||(age>=10&&r(3,20)<age))){
    // if(gender==2){
        breastData = genBreastData(bodyData,gender,age);
        breastOutlineData = genBreastOutlineData(breastData,gender,age);
        breastShadowData = genBreastShadowData(bodyData,breastData,gender,age);
    }
    else if(gender==1&&age>=14&&bodyData.muscle>=3){
        breastData = genBreastData(bodyData,gender,age);
        breastOutlineData = genBreastOutlineData(breastData,gender,age);
    }
    // 生成乳晕
    let areolaData, areolaData1, areolaData2;
    areolaData = genAreolaData(bodyData,breastData,gender,age);
    areolaData1 = areolaData.res1;
    areolaData2 = areolaData.res2;
    // 生成乳头
    let nippleData, nippleData1, nippleData2;
    nippleData = genNippleData(bodyData,areolaData.nipple,gender,age);
    nippleData1 = nippleData.res1;
    nippleData2 = nippleData.res2;

    let backHairData,foreHairData,bangsData;
    if(!bald){
        // 生成前发
        foreHairData = genForeHairData(faceData,gender,color,grd);
        // 生成刘海
        // if(r(0,100)<20){
        //     bangsData = genBangsData(faceData,gender,color,grd);
        // }
    }
    // 生成背发
    if(r(0,100)<50){
        backHairData = genBackHairData(faceData,gender,color,grd);
    }

    let eyeShadowData, eyeShadowData1, eyeShadowData2;
    // 生成眼影
    if(r(0,30)<(50-age)&&gender==2&&age>18&&age<55){
        eyeShadowData = genEyeShadowData(faceData,eyesData);
        eyeShadowData1 = eyeShadowData.res1;
        eyeShadowData2 = eyeShadowData.res2;
    }
    let eyeSocketData, eyeSocketData1, eyeSocketData2;
    // 生成眼窝
    eyeSocketData = genEyeSocketData(faceData,eyesData,gender,age);
    eyeSocketData1 = eyeSocketData.res1;
    eyeSocketData2 = eyeSocketData.res2;

    let cheekData, cheekData1, cheekData2;
    // 生成腮红
    if(r(0,180)<(50-age)&&gender==2&&age>15&&age<60){
        cheekData = genCheekData(faceData);
        cheekData1 = cheekData.res1;
        cheekData2 = cheekData.res2;
    }

    let glassData;
    // 生成眼镜
    if(r(0,100)<5){
        glassData = genGlassData(faceData,gender);
    }

    let clothForeData,clothBackData;
    // 生成衣服
    if(r(0,100)<=100){
        clothForeData = genForeClothData(bodyData,breastData,gender,age);
        clothBackData = genBackClothData(clothForeData);
        if(clothBackData.length<=0){
            clothBackData = undefined;
        }
    }

    res = {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        clothForeData,
        clothBackData,
        eyeShadowData1,
        eyeShadowData2,
        eyeSocketData1,
        eyeSocketData2,
        cheekData1,
        cheekData2,
        faceShadowData1,
        faceShadowData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        hairColor,
    }
    return res;
}
export function paintAvatar(ctx,avatarData,canvasWidth,canvasHeight,showBg){ // 根据肖像数据进行绘制
    let fill = (data,mode) =>{ // 填充
        let {
            color, strokeColor, alpha,
            grd, topY, bottomY, leftX, rightX,
            rgrd, radial,
            noStroke,
        } = data;
        if(!noStroke){
            ctx.stroke();
        }
        if(color){
            let grdStyle;
            if(grd){ // 线性渐变
                grdStyle = ctx.createLinearGradient(leftX||500,topY||0,rightX||500,bottomY||1000);
                grdStyle.addColorStop(0,grd);
                grdStyle.addColorStop(1,`rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`);
            }
            else if(rgrd){ // 扩散渐变
                // console.log(`扩散渐变`,radial,rgrd);
                grdStyle = ctx.createRadialGradient(radial.x1,radial.y1,radial.r1,radial.x2,radial.y2,radial.r2);
                grdStyle.addColorStop(0,rgrd);
                grdStyle.addColorStop(1,`rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`);
            }
            else{
                grdStyle = `rgba(${color.r},${color.g},${color.b},${color.alpha||alpha||1})`;
            }
            ctx.fillStyle = grdStyle;
            ctx.fill();
        }
    };
    let drawData = (data,mode) =>{ // 画
        let { color, outline, topY, bottomY, grd, rgrd, radial, lineWidth, strokeColor, alpha, noStroke, } = data;
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.lineWidth = lineWidth||1;
        if(strokeColor){
            ctx.strokeStyle = `rgba(${strokeColor.r},${strokeColor.g},${strokeColor.b},${strokeColor.alpha||1})`;
        }
        else{
            ctx.strokeStyle = '#000';
        }
        for(let option of outline){
            let mode = option[0];
            switch(mode){
                case 0: // 移动
                    ctx.moveTo(option[1],option[2],);
                break;
                case 1: // 直线
                    ctx.lineTo(option[1],option[2],);
                break;
                case 2: // 曲线
                    ctx.quadraticCurveTo(option[1],option[2],option[3],option[4],);
                break;
                case 3: // 圆
                    ctx.moveTo(option[2]+option[1],option[3],);
                    ctx.arc(option[2],option[3],option[1],0,2*Math.PI);
                    ctx.closePath();
                break;
            }
        }
        fill(data,mode);
    }
    let drawClothData = (data,mode) =>{ // 画衣服
        let baseFrag = data[0]; // base碎片
        let otherFrags = []; // 其他碎片数组
        for(let i=1;i<data.length;i++){
            otherFrags.push(data[i]);
        }
        drawData(baseFrag); // 绘制base碎片
        for(let i=0;i<otherFrags.length;i++){ // 绘制所有其他碎片
            let frag = otherFrags[i];
            if(frag.clipOutline){ // 需要被裁剪
                ctx.save();
                drawData({outline:frag.clipOutline,strokeColor:{r:255,g:0,b:200},noStroke:true});
                ctx.clip();
                drawData(frag);
                ctx.restore();
            }
            else{
                drawData(frag);
            }
        }

        /*ctx.save();
        drawData(data[0]); // base frag
        ctx.clip();
        for(let i=0;i<clipType1Frags.length;i++){ // 绘制所有被裁剪的元素
            let frag = clipType1Frags[i];
            drawData(frag);
        }
        ctx.restore();
        for(let i=0;i<otherFrags.length;i++){ // 绘制所有其他元素
            let frag = otherFrags[i];
            drawData(frag);
        }*/
    }
    let transferedData = transferAvatarSize(avatarData,canvasWidth);
    let {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        clothForeData,
        clothBackData,
        eyeShadowData1,
        eyeShadowData2,
        eyeSocketData1,
        eyeSocketData2,
        cheekData1,
        cheekData2,
        faceShadowData1,
        faceShadowData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        hairColor,
    } = transferedData;

    ctx.clearRect(0,0,canvasWidth,canvasHeight);
    // 绘制BG
    if(showBg){
        let midWidth = canvasWidth/2;
        let rd1 = canvasWidth/5, rd2 = canvasWidth*4/5;
        let bggrd = ctx.createRadialGradient(midWidth,midWidth,rd1,midWidth,midWidth,rd2);
        bggrd.addColorStop(0,`rgba(${hairColor.color.r},${hairColor.color.g},${hairColor.color.b},.1)`);
        bggrd.addColorStop(1,`rgba(${hairColor.color.r},${hairColor.color.g},${hairColor.color.b},.9)`);
        ctx.fillStyle = bggrd;
        ctx.fillRect(0,0,canvasWidth,canvasHeight);
    }

    if(backHairData){
        drawData(backHairData);
    }
    if(clothBackData){ // 画后衣服
        drawClothData(clothBackData);
    }
    drawData(earsData);
    drawData(bodyData);
    drawData(collarData);
    if(breastData){
        // 画乳房阴影
        if(!clothForeData){
            ctx.save();
            drawData({ // 身体裁剪
                outline: bodyData.outline,
                noStroke: true,
            });
            ctx.clip();
            if(breastShadowData){
                drawData(breastShadowData);
            }
            ctx.restore();
        }

        // 画乳房
        drawData(breastData);

        // 画乳晕和乳头
        ctx.save();
        drawData(breastOutlineData);
        ctx.clip();
        drawData(areolaData1);
        drawData(areolaData2);
        drawData(nippleData1);
        drawData(nippleData2);

        ctx.restore();
    }
    else{
        drawData(areolaData1);
        drawData(areolaData2);
        drawData(nippleData1);
        drawData(nippleData2);
    }

    if(clothForeData){ // 画前衣服
        drawClothData(clothForeData);
    }

    drawData(faceData); // 画脸

    ctx.save();
    drawData({ // 脸部裁剪
        outline: faceData.outline,
        noStroke: true,
    });
    ctx.clip();
    if(cheekData1){
        drawData(cheekData1);
    }
    if(cheekData2){
        drawData(cheekData2);
    }

    if(faceShadowData1){
        drawData(faceShadowData1);
    }
    if(faceShadowData2){
        drawData(faceShadowData2);
    }

    if(eyeSocketData1){
        drawData(eyeSocketData1);
    }
    if(eyeSocketData2){
        drawData(eyeSocketData2);
    }

    if(eyeShadowData1){
        drawData(eyeShadowData1);
    }
    if(eyeShadowData2){
        drawData(eyeShadowData2);
    }

    if(eyeskinsData){
        drawData(eyeskinsData);
    }
    if(lashData){
        drawData(lashData);
    }
    drawData(noseData);
    drawData(lipData);
    if(bottomLipData){
        drawData(bottomLipData);
    }
    if(bracketsData){
        drawData(bracketsData);
    }
    if(nasoData){
        drawData(nasoData);
    }
    if(topMoustacheData){
        drawData(topMoustacheData);
    }
    ctx.restore();

    drawData(eyesData);
    ctx.save();
    ctx.clip();
    drawData(eyeoutballsData);
    if(eyeinballsData){
        drawData(eyeinballsData);
    }
    ctx.restore();
    drawData(browsData);

    ctx.save();
    drawData({ // 脸部裁剪
        outline: faceData.outline,
        noStroke: true,
    });
    ctx.clip();
    if(glassData){
        drawData(glassData);
    }
    ctx.restore();

    if(foreHairData){
        drawData(foreHairData);
    }
    if(bangsData){
        drawData(bangsData);
    }
}

function transferAvatarSize(data,canvasWidth){
    let faceData = cloneObj(data.faceData);
    let earsData = cloneObj(data.earsData);
    let browsData = cloneObj(data.browsData);
    let eyesData = cloneObj(data.eyesData);
    let eyeskinsData = cloneObj(data.eyeskinsData);
    let lashData = cloneObj(data.lashData);
    let eyeoutballsData = cloneObj(data.eyeoutballsData);
    let eyeinballsData = cloneObj(data.eyeinballsData);
    let noseData = cloneObj(data.noseData);
    let lipData = cloneObj(data.lipData);
    let bottomLipData = cloneObj(data.bottomLipData);
    let topMoustacheData = cloneObj(data.topMoustacheData);
    let bracketsData = cloneObj(data.bracketsData);
    let nasoData = cloneObj(data.nasoData);
    let collarData = cloneObj(data.collarData);
    let breastData = cloneObj(data.breastData);
    let breastOutlineData = cloneObj(data.breastOutlineData);
    let breastShadowData = cloneObj(data.breastShadowData);
    let bodyData = cloneObj(data.bodyData);
    let backHairData = cloneObj(data.backHairData);
    let foreHairData = cloneObj(data.foreHairData);
    let bangsData = cloneObj(data.bangsData);
    let cheekData1 = cloneObj(data.cheekData1);
    let cheekData2 = cloneObj(data.cheekData2);
    let faceShadowData1 = cloneObj(data.faceShadowData1);
    let faceShadowData2 = cloneObj(data.faceShadowData2);
    let areolaData1 = cloneObj(data.areolaData1);
    let areolaData2 = cloneObj(data.areolaData2);
    let nippleData1 = cloneObj(data.nippleData1);
    let nippleData2 = cloneObj(data.nippleData2);
    let glassData = cloneObj(data.glassData);
    let eyeShadowData1 = cloneObj(data.eyeShadowData1);
    let eyeShadowData2 = cloneObj(data.eyeShadowData2);
    let eyeSocketData1 = cloneObj(data.eyeSocketData1);
    let eyeSocketData2 = cloneObj(data.eyeSocketData2);
    let clothForeData = cloneObj(data.clothForeData);
    let clothBackData = cloneObj(data.clothBackData);
    let hairColor = cloneObj(data.hairColor);

    faceData.outline = formatPx(faceData.outline,canvasWidth);
    faceData.leftX = formatPx(faceData.leftX,canvasWidth);
    faceData.topY = formatPx(faceData.topY,canvasWidth);
    faceData.rightX = formatPx(faceData.rightX,canvasWidth);
    faceData.bottomY = formatPx(faceData.bottomY,canvasWidth);
    faceData.radial.x1 = formatPx(faceData.radial.x1,canvasWidth);
    faceData.radial.y1 = formatPx(faceData.radial.y1,canvasWidth);
    faceData.radial.r1 = formatPx(faceData.radial.r1,canvasWidth);
    faceData.radial.x2 = formatPx(faceData.radial.x2,canvasWidth);
    faceData.radial.y2 = formatPx(faceData.radial.y2,canvasWidth);
    faceData.radial.r2 = formatPx(faceData.radial.r2,canvasWidth);

    earsData.outline = formatPx(earsData.outline,canvasWidth);

    browsData.outline = formatPx(browsData.outline,canvasWidth);

    eyesData.outline = formatPx(eyesData.outline,canvasWidth);
    eyesData.lineWidth = formatPx(eyesData.lineWidth,canvasWidth);

    if(eyeskinsData){
        eyeskinsData.outline = formatPx(eyeskinsData.outline,canvasWidth);
        eyeskinsData.lineWidth = formatPx(eyeskinsData.lineWidth,canvasWidth);
    }

    if(lashData){
        lashData.outline = formatPx(lashData.outline,canvasWidth);
        lashData.lineWidth = formatPx(lashData.lineWidth,canvasWidth);
    }

    eyeoutballsData.outline = formatPx(eyeoutballsData.outline,canvasWidth);
    eyeoutballsData.topY = formatPx(eyeoutballsData.topY,canvasWidth);
    eyeoutballsData.bottomY = formatPx(eyeoutballsData.bottomY,canvasWidth);

    if(eyeinballsData){
        eyeinballsData.outline = formatPx(eyeinballsData.outline,canvasWidth);
        eyeinballsData.topY = formatPx(eyeinballsData.topY,canvasWidth);
        eyeinballsData.bottomY = formatPx(eyeinballsData.bottomY,canvasWidth);
    }

    noseData.outline = formatPx(noseData.outline,canvasWidth);

    lipData.outline = formatPx(lipData.outline,canvasWidth);

    if(bottomLipData){
        bottomLipData.outline = formatPx(bottomLipData.outline,canvasWidth);
    }

    if(topMoustacheData){
        topMoustacheData.outline = formatPx(topMoustacheData.outline,canvasWidth);
    }

    if(nasoData){
        nasoData.outline = formatPx(nasoData.outline,canvasWidth);
    }
    if(collarData){
        collarData.outline = formatPx(collarData.outline,canvasWidth);
    }

    if(breastData&&breastOutlineData){
        breastData.outline = formatPx(breastData.outline,canvasWidth);
        breastOutlineData.outline = formatPx(breastOutlineData.outline,canvasWidth);
        if(breastShadowData){
            breastShadowData.outline = formatPx(breastShadowData.outline,canvasWidth);
            breastShadowData.radial.x1 = formatPx(breastShadowData.radial.x1,canvasWidth);
            breastShadowData.radial.y1 = formatPx(breastShadowData.radial.y1,canvasWidth);
            breastShadowData.radial.r1 = formatPx(breastShadowData.radial.r1,canvasWidth);
            breastShadowData.radial.x2 = formatPx(breastShadowData.radial.x2,canvasWidth);
            breastShadowData.radial.y2 = formatPx(breastShadowData.radial.y2,canvasWidth);
            breastShadowData.radial.r2 = formatPx(breastShadowData.radial.r2,canvasWidth);
        }

        breastData.nipple[0] = formatPx(breastData.nipple[0],canvasWidth);
        breastData.nipple[1] = formatPx(breastData.nipple[1],canvasWidth);
        if(breastData.leftX||breastData.leftX==0){
            breastData.leftX = formatPx(breastData.leftX,canvasWidth);
            breastData.topY = formatPx(breastData.topY,canvasWidth);
            breastData.rightX = formatPx(breastData.rightX,canvasWidth);
            breastData.bottomY = formatPx(breastData.bottomY,canvasWidth);
        }
    }
    if(bracketsData){
        bracketsData.outline = formatPx(bracketsData.outline,canvasWidth);
    }

    bodyData.outline = formatPx(bodyData.outline,canvasWidth);
    bodyData.radial.x1 = formatPx(bodyData.radial.x1,canvasWidth);
    bodyData.radial.y1 = formatPx(bodyData.radial.y1,canvasWidth);
    bodyData.radial.r1 = formatPx(bodyData.radial.r1,canvasWidth);
    bodyData.radial.x2 = formatPx(bodyData.radial.x2,canvasWidth);
    bodyData.radial.y2 = formatPx(bodyData.radial.y2,canvasWidth);
    bodyData.radial.r2 = formatPx(bodyData.radial.r2,canvasWidth);

    if(foreHairData){
        foreHairData.outline = formatPx(foreHairData.outline,canvasWidth);
        foreHairData.topY = formatPx(foreHairData.topY,canvasWidth);
        foreHairData.bottomY = formatPx(foreHairData.bottomY,canvasWidth);
    }

    if(bangsData){
        bangsData.outline = formatPx(bangsData.outline,canvasWidth);
        bangsData.topY = formatPx(bangsData.topY,canvasWidth);
        bangsData.bottomY = formatPx(bangsData.bottomY,canvasWidth);
    }

    if(backHairData){
        backHairData.outline = formatPx(backHairData.outline,canvasWidth);
        backHairData.topY = formatPx(backHairData.topY,canvasWidth);
        backHairData.bottomY = formatPx(backHairData.bottomY,canvasWidth);
    }

    if(glassData){
        glassData.outline = formatPx(glassData.outline,canvasWidth);
    }

    if(eyeShadowData1){
        eyeShadowData1.outline = formatPx(eyeShadowData1.outline,canvasWidth);
        eyeShadowData1.topY = formatPx(eyeShadowData1.topY,canvasWidth);
        eyeShadowData1.bottomY = formatPx(eyeShadowData1.bottomY,canvasWidth);
        eyeShadowData1.leftX = formatPx(eyeShadowData1.leftX,canvasWidth);
        eyeShadowData1.rightX = formatPx(eyeShadowData1.rightX,canvasWidth);
    }
    if(eyeShadowData2){
        eyeShadowData2.outline = formatPx(eyeShadowData2.outline,canvasWidth);
        eyeShadowData2.topY = formatPx(eyeShadowData2.topY,canvasWidth);
        eyeShadowData2.bottomY = formatPx(eyeShadowData2.bottomY,canvasWidth);
        eyeShadowData2.leftX = formatPx(eyeShadowData2.leftX,canvasWidth);
        eyeShadowData2.rightX = formatPx(eyeShadowData2.rightX,canvasWidth);
    }

    if(eyeSocketData1){
        eyeSocketData1.outline = formatPx(eyeSocketData1.outline,canvasWidth);
        eyeSocketData1.topY = formatPx(eyeSocketData1.topY,canvasWidth);
        eyeSocketData1.bottomY = formatPx(eyeSocketData1.bottomY,canvasWidth);
        eyeSocketData1.leftX = formatPx(eyeSocketData1.leftX,canvasWidth);
        eyeSocketData1.rightX = formatPx(eyeSocketData1.rightX,canvasWidth);
    }
    if(eyeSocketData2){
        eyeSocketData2.outline = formatPx(eyeSocketData2.outline,canvasWidth);
        eyeSocketData2.topY = formatPx(eyeSocketData2.topY,canvasWidth);
        eyeSocketData2.bottomY = formatPx(eyeSocketData2.bottomY,canvasWidth);
        eyeSocketData2.leftX = formatPx(eyeSocketData2.leftX,canvasWidth);
        eyeSocketData2.rightX = formatPx(eyeSocketData2.rightX,canvasWidth);
    }

    if(cheekData1){
        cheekData1.outline = formatPx(cheekData1.outline,canvasWidth);
        cheekData1.radial.x1 = formatPx(cheekData1.radial.x1,canvasWidth);
        cheekData1.radial.y1 = formatPx(cheekData1.radial.y1,canvasWidth);
        cheekData1.radial.r1 = formatPx(cheekData1.radial.r1,canvasWidth);
        cheekData1.radial.x2 = formatPx(cheekData1.radial.x2,canvasWidth);
        cheekData1.radial.y2 = formatPx(cheekData1.radial.y2,canvasWidth);
        cheekData1.radial.r2 = formatPx(cheekData1.radial.r2,canvasWidth);
    }
    if(cheekData2){
        cheekData2.outline = formatPx(cheekData2.outline,canvasWidth);
        cheekData2.radial.x1 = formatPx(cheekData2.radial.x1,canvasWidth);
        cheekData2.radial.y1 = formatPx(cheekData2.radial.y1,canvasWidth);
        cheekData2.radial.r1 = formatPx(cheekData2.radial.r1,canvasWidth);
        cheekData2.radial.x2 = formatPx(cheekData2.radial.x2,canvasWidth);
        cheekData2.radial.y2 = formatPx(cheekData2.radial.y2,canvasWidth);
        cheekData2.radial.r2 = formatPx(cheekData2.radial.r2,canvasWidth);
    }

    if(faceShadowData1){
        faceShadowData1.outline = formatPx(faceShadowData1.outline,canvasWidth);
        faceShadowData1.leftX = formatPx(faceShadowData1.leftX,canvasWidth);
        faceShadowData1.topY = formatPx(faceShadowData1.topY,canvasWidth);
        faceShadowData1.rightX = formatPx(faceShadowData1.rightX,canvasWidth);
        faceShadowData1.bottomY = formatPx(faceShadowData1.bottomY,canvasWidth);
    }
    if(faceShadowData2){
        faceShadowData2.outline = formatPx(faceShadowData2.outline,canvasWidth);
        faceShadowData2.leftX = formatPx(faceShadowData2.leftX,canvasWidth);
        faceShadowData2.topY = formatPx(faceShadowData2.topY,canvasWidth);
        faceShadowData2.rightX = formatPx(faceShadowData2.rightX,canvasWidth);
        faceShadowData2.bottomY = formatPx(faceShadowData2.bottomY,canvasWidth);
    }

    if(areolaData1){
        areolaData1.outline = formatPx(areolaData1.outline,canvasWidth);
        areolaData1.radial.x1 = formatPx(areolaData1.radial.x1,canvasWidth);
        areolaData1.radial.y1 = formatPx(areolaData1.radial.y1,canvasWidth);
        areolaData1.radial.r1 = formatPx(areolaData1.radial.r1,canvasWidth);
        areolaData1.radial.x2 = formatPx(areolaData1.radial.x2,canvasWidth);
        areolaData1.radial.y2 = formatPx(areolaData1.radial.y2,canvasWidth);
        areolaData1.radial.r2 = formatPx(areolaData1.radial.r2,canvasWidth);
    }
    if(areolaData2){
        areolaData2.outline = formatPx(areolaData2.outline,canvasWidth);
        areolaData2.radial.x1 = formatPx(areolaData2.radial.x1,canvasWidth);
        areolaData2.radial.y1 = formatPx(areolaData2.radial.y1,canvasWidth);
        areolaData2.radial.r1 = formatPx(areolaData2.radial.r1,canvasWidth);
        areolaData2.radial.x2 = formatPx(areolaData2.radial.x2,canvasWidth);
        areolaData2.radial.y2 = formatPx(areolaData2.radial.y2,canvasWidth);
        areolaData2.radial.r2 = formatPx(areolaData2.radial.r2,canvasWidth);
    }


    if(nippleData1){
        nippleData1.outline = formatPx(nippleData1.outline,canvasWidth);
        nippleData1.radial.x1 = formatPx(nippleData1.radial.x1,canvasWidth);
        nippleData1.radial.y1 = formatPx(nippleData1.radial.y1,canvasWidth);
        nippleData1.radial.r1 = formatPx(nippleData1.radial.r1,canvasWidth);
        nippleData1.radial.x2 = formatPx(nippleData1.radial.x2,canvasWidth);
        nippleData1.radial.y2 = formatPx(nippleData1.radial.y2,canvasWidth);
        nippleData1.radial.r2 = formatPx(nippleData1.radial.r2,canvasWidth);
    }
    if(nippleData2){
        nippleData2.outline = formatPx(nippleData2.outline,canvasWidth);
        nippleData2.radial.x1 = formatPx(nippleData2.radial.x1,canvasWidth);
        nippleData2.radial.y1 = formatPx(nippleData2.radial.y1,canvasWidth);
        nippleData2.radial.r1 = formatPx(nippleData2.radial.r1,canvasWidth);
        nippleData2.radial.x2 = formatPx(nippleData2.radial.x2,canvasWidth);
        nippleData2.radial.y2 = formatPx(nippleData2.radial.y2,canvasWidth);
        nippleData2.radial.r2 = formatPx(nippleData2.radial.r2,canvasWidth);
    }

    if(clothForeData){
        for(let frag of clothForeData){
            frag.outline = formatPx(frag.outline,canvasWidth);
            frag.clipOutline = formatPx(frag.clipOutline,canvasWidth);
            if(frag.radial){
                frag.radial.x1 = formatPx(frag.radial.x1,canvasWidth);
                frag.radial.y1 = formatPx(frag.radial.y1,canvasWidth);
                frag.radial.r1 = formatPx(frag.radial.r1,canvasWidth);
                frag.radial.x2 = formatPx(frag.radial.x2,canvasWidth);
                frag.radial.y2 = formatPx(frag.radial.y2,canvasWidth);
                frag.radial.r2 = formatPx(frag.radial.r2,canvasWidth);
            }
            if(frag.topY){
                frag.topY = formatPx(frag.topY,canvasWidth);
            }
            if(frag.bottomY){
                frag.bottomY = formatPx(frag.bottomY,canvasWidth);
            }
            if(frag.leftX){
                frag.leftX = formatPx(frag.leftX,canvasWidth);
            }
            if(frag.rightX){
                frag.rightX = formatPx(frag.rightX,canvasWidth);
            }
            if(frag.lineWidth){
                frag.lineWidth = formatPx(frag.lineWidth,canvasWidth);
            }
        }
    }
    if(clothBackData){
        for(let frag of clothBackData){
            frag.outline = formatPx(frag.outline,canvasWidth);
            frag.clipOutline = formatPx(frag.clipOutline,canvasWidth);
            if(frag.radial){
                frag.radial.x1 = formatPx(frag.radial.x1,canvasWidth);
                frag.radial.y1 = formatPx(frag.radial.y1,canvasWidth);
                frag.radial.r1 = formatPx(frag.radial.r1,canvasWidth);
                frag.radial.x2 = formatPx(frag.radial.x2,canvasWidth);
                frag.radial.y2 = formatPx(frag.radial.y2,canvasWidth);
                frag.radial.r2 = formatPx(frag.radial.r2,canvasWidth);
            }
            if(frag.topY){
                frag.topY = formatPx(frag.topY,canvasWidth);
            }
            if(frag.bottomY){
                frag.bottomY = formatPx(frag.bottomY,canvasWidth);
            }
            if(frag.leftX){
                frag.leftX = formatPx(frag.leftX,canvasWidth);
            }
            if(frag.rightX){
                frag.rightX = formatPx(frag.rightX,canvasWidth);
            }
            if(frag.lineWidth){
                frag.lineWidth = formatPx(frag.lineWidth,canvasWidth);
            }
        }
    }

    return {
        faceData,
        earsData,
        browsData,
        eyesData,
        eyeskinsData,
        lashData,
        eyeoutballsData,
        eyeinballsData,
        noseData,
        lipData,
        bottomLipData,
        topMoustacheData,
        bracketsData,
        nasoData,
        collarData,
        bodyData,
        breastData,
        breastOutlineData,
        breastShadowData,
        backHairData,
        foreHairData,
        bangsData,
        eyeShadowData1,
        eyeShadowData2,
        eyeSocketData1,
        eyeSocketData2,
        cheekData1,
        cheekData2,
        faceShadowData1,
        faceShadowData2,
        areolaData1,
        areolaData2,
        nippleData1,
        nippleData2,
        glassData,
        clothForeData,
        clothBackData,
        hairColor,
    };
}
function _scale(x,y,ox,oy,rate){
    let offset = [x-ox,y-oy];
    if(rate>=1){
        return [Math.round(x+offset[0]*(rate-1)),Math.round(y+offset[1]*(rate-1))];
    }
    else if(rate>0){
        return [Math.round(x-offset[0]*rate),Math.round(y-offset[1]*rate)];
    }
}
function formatPx(data,canvasWidth){
    let rate = 1000/canvasWidth;
    if(typeof data === 'object'){
        return Array.from(data,item=>{
            let res = [];
            if(item[0]==0||item[0]==1||item[0]==4){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate)];
            }
            else if(item[0]==2){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate),parseInt(item[3]/rate),parseInt(item[4]/rate)];
            }
            else if(item[0]==3){
                res = [item[0],parseInt(item[1]/rate),parseInt(item[2]/rate),parseInt(item[3]/rate)];
            }
            else{
                res = cloneObj(item);
            }
            return res;
        });
    }
    else{
        return parseInt(data/rate);
    }
}
function mirX(x){
    return x+2*(500-x);
}
function mid(val1,val2){
    return Math.round((val1+val2)/2);
}
function formatClothMode(mode){ // 锚点格式转化
    if(isNaN(mode)){
        /*
            '{绘制模式[0|1|2|3]},{是否连贯1|0|'c1-k2'},{锚点名[c1-k2]}_{对齐轴[x|y]}_{紧致度百分比[R]}'
            '2,0,c1_x_0,i22_y_50' => [2,0,[['c1','x',0],['i22','y',50],]]
        */
        let res = [];
        let d1 = mode.split(',');
        res[0] = parseInt(d1[0]);
        res[1] = d1[1];
        res[2] = [];
        for(let i=2;i<d1.length;i++){
            let d2 = d1[i].split('_');
            // let
            // for(let j=0;j<d2.length;j++){
            //     res[1].push(d2[j]);
            // }
            res[2].push(d2);
        }
        return res;
    }
    else{
        return [parseInt(mode)];
    }
}

export function genForeHairData(faceData,gender,color,grd,hairName){ // 生成前发型
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalForeHairTemplates,...maleForeHairTemplates,...femaleForeHairTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleForeHairTemplates = [...generalForeHairTemplates,...maleForeHairTemplates,];
        let _femaleForeHairTemplates = [...generalForeHairTemplates,...femaleForeHairTemplates,];
        if(gender==1){ // 男
            rHair = _maleForeHairTemplates[r(0,_maleForeHairTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleForeHairTemplates[r(0,_femaleForeHairTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a;
    let offset = [a[0]-center[0],a[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-faceData.c[0])*2; // 头部宽度
    let height = faceData.b[1]-faceData.a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,107)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
                option[2] = vector[1];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[2] = vector1[1];
                option[3] = vector2[0];
                option[4] = vector2[1];
            }
        }
    }
    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        name: rHair.name,
    }
    return res;
}
export function genBangsData(faceData,gender,color,grd,hairName){ // 生成刘海
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalBangsTemplates,...maleBangsTemplates,...femaleBangsTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleBangsTemplates = [...generalBangsTemplates,...maleBangsTemplates,];
        let _femaleBangsTemplates = [...generalBangsTemplates,...femaleBangsTemplates,];
        if(gender==1){ // 男
            rHair = _maleBangsTemplates[r(0,_maleBangsTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleBangsTemplates[r(0,_femaleBangsTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a, b = faceData.b, c = faceData.c;
    let offset = [b[0]-center[0],b[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-c[0])*2; // 头部宽度
    let height = b[1]-a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,104)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
                option[2] = vector[1];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[2] = vector1[1];
                option[3] = vector2[0];
                option[4] = vector2[1];
            }
        }
    }
    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        alpha: .96,
        name: rHair.name,
    }
    return res;
}
export function genBackHairData(faceData,gender,color,grd,hairName){ // 生成后发型
    let res,rHair;
    if(hairName){
        let hairTemplates = [...generalBackHairTemplates,...maleBackHairTemplates,...femaleBackHairTemplates,];
        for(let h of hairTemplates){
            if(h.name==hairName){
                rHair = h;
                break;
            }
        }
    }
    else{
        let _maleBackHairTemplates = [...generalBackHairTemplates,...maleBackHairTemplates,];
        let _femaleBackHairTemplates = [...generalBackHairTemplates,...femaleBackHairTemplates,];
        if(gender==1){ // 男
            rHair = _maleBackHairTemplates[r(0,_maleBackHairTemplates.length-1)];
        }
        else{ // 女
            rHair = _femaleBackHairTemplates[r(0,_femaleBackHairTemplates.length-1)];
        }
    }
    let center = [...rHair.center];
    let const_outline = [...rHair.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let a = faceData.a;
    let offset = [a[0]-center[0],a[1]-center[1]];
    for(let option of outline){
        if(option[0]!=2){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else{
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // 缩放
    let width = (500-faceData.c[0])*2; // 头部宽度
    let height = faceData.b[1]-faceData.a[1]; // 头部高度
    let widthScaleRate = width/400; // 水平缩放比率
    let heightScaleRate = height/(gender==1?50:45); // 垂直缩放比率
    widthScaleRate *= r(90,110)/100;
    heightScaleRate *= r(80,120)/100;
    for(let option of outline){
        if(option[0]!=2){
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
        }
        else{
            option[1] = a[0]-Math.round((a[0]-option[1])*widthScaleRate);
            option[2] = a[1]-Math.round((a[1]-option[2])*heightScaleRate);
            option[3] = a[0]-Math.round((a[0]-option[3])*widthScaleRate);
            option[4] = a[1]-Math.round((a[1]-option[4])*heightScaleRate);
        }
    }
    // 随机造型
    if(!rHair.fixed){
        for(let option of outline){
            let dr = r(100,104)/100;
            if(option[0]!=2){
                let vector = _scale(option[1],option[2],center[0],center[1],dr);
                option[1] = vector[0];
            }
            else{
                let vector1 = _scale(option[1],option[2],center[0],center[1],dr);
                let vector2 = _scale(option[3],option[4],center[0],center[1],dr);
                option[1] = vector1[0];
                option[3] = vector2[0];
            }
        }
    }

    // 获取最高点和最低点
    let topY = Infinity, bottomY = 0;
    for(let option of outline){
        if(option[0]!=2){
            if(option[2]<topY){
                topY = option[2];
            }
            if(option[2]>bottomY){
                bottomY = option[2];
            }
        }
        else{
            if(option[3]<topY){
                topY = option[2];
            }
            if(option[4]>bottomY){
                bottomY = option[2];
            }
        }
    }

    // 输出
    res = {
        color,
        grd,
        topY: Math.round(topY*.2),
        bottomY: Math.round(bottomY*2),
        outline,
        name: rHair.name,
    }
    return res;
}
export function genGlassData(faceData,gender,glassName){ // 生成眼镜
    let res,rGlass;
    if(glassName){
        for(let glass of glassTemplates){
            if(glass.name==glassName){
                rGlass = glass;
                break;
            }
        }
    }
    else{
        rGlass = glassTemplates[r(0,glassTemplates.length-1)];
    }
    let center = [...rGlass.center];
    let lineWidthRange = rGlass.lineWidthRange;
    let const_outline = [...rGlass.outline];
    let outline = Array.from(const_outline,item=>{
        let newItem = [...item];
        return newItem;
    });
    // 对准
    let e = faceData.e;
    let offset = [0,e[1]-center[1]];
    for(let option of outline){
        if(option[0]==0||option[0]==1){
            option[1] += offset[0];
            option[2] += offset[1];
        }
        else if(option[0]==2){
            option[1] += offset[0];
            option[2] += offset[1];
            option[3] += offset[0];
            option[4] += offset[1];
        }
    }
    // // 缩放
    let width = (500-faceData.e[0])*2; // 脸宽
    let height = faceData.e[1]-faceData.d[1]; // 眼高
    let widthScaleRate = width/170; // 水平缩放比率
    let heightScaleRate = height/95; // 垂直缩放比率
    for(let option of outline){
        if(option[0]==0||option[0]==1){
            option[1] = 500-Math.round((500-option[1])*widthScaleRate);
            option[2] = e[1]-Math.round((e[1]-option[2])*heightScaleRate);
        }
        else if(option[0]==2){
            option[1] = 500-Math.round((500-option[1])*widthScaleRate);
            option[2] = e[1]-Math.round((e[1]-option[2])*heightScaleRate);
            option[3] = 500-Math.round((500-option[3])*widthScaleRate);
            option[4] = e[1]-Math.round((e[1]-option[4])*heightScaleRate);
        }
    }

    // 输出
    res = {
        outline,
        strokeColor: genGlassColor(gender),
        lineWidth: r(lineWidthRange[0],lineWidthRange[1]),
        name: rGlass.name,
    }
    return res;
}
export function _genClothData(bodyData,breastData,gender,clothName){ // 生成衣服（已弃用）
    let res,rCloth;
    let {size,weight,} = breastData||{};
    let {
        a1,b1,c1,d1,f1,g1,h1,i11,i21,j1,k1,l1,
        a2,b2,c2,d2,f2,g2,h2,i12,i22,j2,k2,l2,
        cp11,cp21,cp31,cp41,cp51,cp61,cpi1,cp71,cp81,
        cp12,cp22,cp32,cp42,cp52,cp62,cpi2,cp72,cp82,
    } = bodyData;
    let breastAnchorPoints = { // 胸部六锚点
        i21: -1,
        j1: -1,
        k1: -1,
        i22: -1,
        j2: -1,
        k2: -1,
    };
    if(clothName){
        let clothTemplates = [...generalClothTemplates,...maleClothTemplates,...femaleClothTemplates,];
        for(let cloth of clothTemplates){
            if(cloth.name==clothName){
                rCloth = cloth;
                break;
            }
        }
    }
    else{
        let _maleClothTemplates = [...generalClothTemplates,...maleClothTemplates,];
        let _femaleClothTemplates = [...generalClothTemplates,...femaleClothTemplates,];
        if(gender==1){ // 男
            rCloth = _maleClothTemplates[r(0,_maleClothTemplates.length-1)];
        }
        else{ // 女
            rCloth = _femaleClothTemplates[r(0,_femaleClothTemplates.length-1)];
        }
    }

    let { data, shrink, } = cloneObj(rCloth);
    let baseFrag = data[0];
    let baseOutline = baseFrag.outline;

    // 缩放
    let width = (500-f1[0])*2; // 身体宽度
    let height = l1[1]-a1[1]; // 身体高度
    let widthScaleRate = width/600; // 水平缩放比率
    let heightScaleRate = height/650; // 垂直缩放比率
    for(let i=0;i<data.length;i++){
        let frag = data[i];
        for(let option of frag.outline){
            let mode = formatClothMode(option[0])[0];
            if(mode==0||mode==1){
                option[1] = l1[0]-Math.round((l1[0]-option[1])*widthScaleRate);
                option[2] = l1[1]-Math.round((l1[1]-option[2])*heightScaleRate);
            }
            else if(mode==2){
                option[1] = l1[0]-Math.round((l1[0]-option[1])*widthScaleRate);
                option[2] = l1[1]-Math.round((l1[1]-option[2])*heightScaleRate);
                option[3] = l1[0]-Math.round((l1[0]-option[3])*widthScaleRate);
                option[4] = l1[1]-Math.round((l1[1]-option[4])*heightScaleRate);
            }
            else if(mode==3){
                option[2] = l1[0]-Math.round((l1[0]-option[2])*widthScaleRate);
                option[3] = l1[1]-Math.round((l1[1]-option[3])*heightScaleRate);
            }
        }
    }

    // 校准锚点
    for(let frag of data){
        for(let i=0;i<frag.outline.length;i++){
            let option = frag.outline[i];
            let modeOptionData = formatClothMode(option[0]);
            let mode = modeOptionData[0]; // 2 绘制模式[0|1|2|3]
            let isConn = modeOptionData[1]; // 0 是否连贯[1|0|'c1-k2']
            let modeOptions = modeOptionData[2]; // [['c1','x','14'],['c1','y','-2']]
            if(modeOptions&&modeOptions.length>0){
                let txi,tyi;
                if(mode==0||mode==1){
                    txi = 1;
                    tyi = 2;
                }
                else if(mode==2){
                    txi = 3;
                    tyi = 4;
                }
                else if(mode==3){
                    txi = 2;
                    tyi = 3;
                }
                for(let i=0;i<modeOptions.length;i++){
                    let moption = modeOptions[i]; // ['c1','x','14']
                    let anchor = moption[0], axis = moption[1], mshrink = moption[2];
                    let pname = anchor.substring(0,anchor.length-1); // c,d,e,f,g,h,i1,i2,j,k
                    let pside = anchor[anchor.length-1]; // 1 或 2
                    option[axis=='x'?txi:tyi] = bodyData[anchor][axis=='x'?0:1]+Math.round(mshrink/100*shrink);
                    if(i==0&&isConn&&isConn!='0'&&mode==2){ // 要求连贯，则固定曲点
                        let curvePointData = ANCHOR_MAP[pname]||[];
                        let curvePointName = curvePointData[1];
                        if(curvePointName){
                            let curvePoint = bodyData[`${curvePointName}${pside}`];
                            option[1] = curvePoint[0];
                            if(axis=='x'){
                                option[1] += Math.round(mshrink/100*shrink);
                            }
                            option[2] = curvePoint[1];
                            if(axis=='y'){
                                option[2] += Math.round(mshrink/100*shrink);
                            }
                        }
                    }
                }
            }
        }
    }

    // 标记胸部八锚点下标值
    for(let frag of data){
        for(let i=0;i<frag.outline.length;i++){
            let option = frag.outline[i];
            if(isNaN(option[0])){
                let modeOptionData = formatClothMode(option[0]);
                let anchorName = modeOptionData[1]; // 是否为锚点[1|0|'c1-k2']
                if(isNaN(anchorName)){ // 为精准锚点
                    breastAnchorPoints[anchorName] = i;
                }
            }
        }
    }
    let { i21:_i21, j1:_j1, k1:_k1, i22:_i22, j2:_j2, k2:_k2, } = breastAnchorPoints;

    // 乳房扩撑
    if(size&&weight){
        let ba = breastData.a, bb = breastData.b;
        let bcp1 = breastData.cp1, bcp2 = breastData.cp2;
        // 左边
        // if(_i11!=-1){
        //     baseOutline[_i11][4] = ba[1];
        //     if(baseOutline[_i11][4]>i21[1]){
        //         baseOutline[_i11][4] = i21[1];
        //     }
        // }
        if(_i21!=-1){
            baseOutline[_i21][1] = ba[0];
            if(baseOutline[_i21][1]>i11[0]){
                baseOutline[_i21][1] = i11[0];
            }
            baseOutline[_i21][2] = ba[1];
            baseOutline[_i21][3] = ba[0];
            if(baseOutline[_i21][3]>i11[0]){
                baseOutline[_i21][3] = i11[0];
            }
            baseOutline[_i21][4] = ba[1];
        }
        if(_j1!=-1){
            baseOutline[_j1][1] = bcp1[0];
            if(baseOutline[_j1][1]>i21[0]){
                baseOutline[_j1][1] = i21[0];
            }
            baseOutline[_j1][2] = bcp1[1];
            baseOutline[_j1][3] = bb[0];
            if(baseOutline[_j1][3]>i21[0]){
                baseOutline[_j1][3] = i21[0];
            }
            baseOutline[_j1][4] = bb[1];
        }
        // 右边
        // if(_i12!=-1){
        //     baseOutline[_i12][4] = ba[1];
        //     if(baseOutline[_i12][4]>i22[1]){
        //         baseOutline[_i12][4] = i22[1];
        //     }
        // }
        if(_i22!=-1){
            baseOutline[_i22][1] = mirX(ba[0]);
            if(baseOutline[_i22][1]<i12[0]){
                baseOutline[_i22][1] = i12[0];
            }
            baseOutline[_i22][2] = ba[1];
            baseOutline[_i22][3] = mirX(ba[0]);
            if(baseOutline[_i22][3]<i12[0]){
                baseOutline[_i22][3] = i12[0];
            }
            baseOutline[_i22][4] = ba[1];
        }
        if(_j2!=-1){
            baseOutline[_j2][1] = mirX(bcp1[0]);
            if(baseOutline[_j2][1]<i22[0]){
                baseOutline[_j2][1] = i22[0];
            }
            baseOutline[_j2][2] = bcp1[1];
            baseOutline[_j2][3] = mirX(bb[0]);
            if(baseOutline[_j2][3]<i22[0]){
                baseOutline[_j2][3] = i22[0];
            }
            baseOutline[_j2][4] = bb[1];
        }
    }
    // 乳房扩撑描边
    let newFrag = {
        outline: [],
        strokeColor: {r:0,g:0,b:0,},
    }
    _i21!=-1&&newFrag.outline.push(baseOutline[_i21]);
    _j1!=-1&&newFrag.outline.push(baseOutline[_j1]);
    _k1!=-1&&newFrag.outline.push(baseOutline[_k1]);
    _i22!=-1&&newFrag.outline.push([0,baseOutline[_i22][1],baseOutline[_i22][2]]);
    _i22!=-1&&newFrag.outline.push(baseOutline[_i22]);
    _j2!=-1&&newFrag.outline.push(baseOutline[_j2]);
    _k2!=-1&&newFrag.outline.push(baseOutline[_k2]);
    data.push(newFrag);

    // 格式转换
    for(let frag of data){
        for(let i=0;i<frag.outline.length;i++){
            let option = frag.outline[i];
            let mode = formatClothMode(option[0])[0];
            option[0] = mode;
        }
    }

    // 输出
    res = data;
    return res;
}
export function genForeClothData(bodyData,breastData,gender,age){ // 生成前衣服
    let res,rCloth;
    let {size,weight,} = breastData||{};
    let {
        a1,b1,c1,d1,e1,f1,g1,h1,i11,i21,j1,k1,l1,
        a2,b2,c2,d2,e2,f2,g2,h2,i12,i22,j2,k2,l2,
        cp11,cp21,cp31,cp41,cp51,cp61,cpi1,cp71,cp81,
        cp12,cp22,cp32,cp42,cp52,cp62,cpi2,cp72,cp82,
    } = bodyData;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let underwearData = {
        outline: [],
    };
    let fragList = [];

    // 内部方法
    let breastExpand = ({outline:[],noStroke,bottomL,clothColor,i11_idx,i21_idx,j1_idx,k1_idx,i12_idx,i22_idx,j2_idx,k2_idx,}) =>{// 乳房扩撑
        let {
            a: ba,
            b: bb,
            c: bc,
            cp1: bcp1,
            cp2: bcp2,
        } = breastData;
        // i11
        if(i11_idx){
            outline[i11_idx][3] = ba[0];
            if(outline[i11_idx][3]>i11[0]){
                outline[i11_idx][3] = i11[0];
            }
        }
        // i21
        if(i21_idx){
            outline[i21_idx][2] = ba[1];
            outline[i21_idx][3] = ba[0];
            if(outline[i21_idx][3]>i11[0]){
                outline[i21_idx][3] = i11[0];
            }
            outline[i21_idx][4] = ba[1];
        }
        // j1
        if(j1_idx){
            outline[j1_idx][1] = bcp1[0];
            if(outline[j1_idx][1]>i21[0]){
                outline[j1_idx][1] = i21[0];
            }
            outline[j1_idx][2] = bcp1[1];
            outline[j1_idx][3] = bb[0];
            if(outline[j1_idx][3]>i21[0]){
                outline[j1_idx][3] = i21[0];
            }
            outline[j1_idx][4] = bb[1];
        }
        // i12
        if(i12_idx){
            outline[i12_idx][1] = mirX(ba[0]);
            if(outline[i12_idx][1]<i12[0]){
                outline[i12_idx][1] = i12[0];
            }
        }
        // i22
        if(i22_idx){
            outline[i22_idx][2] = ba[1];
            outline[i22_idx][3] = mirX(ba[0]);
            if(outline[i22_idx][3]<i12[0]){
                outline[i22_idx][3] = i12[0];
            }
            outline[i22_idx][4] = ba[1];
        }
        // j2
        if(j2_idx){
            outline[j2_idx][1] = mirX(bcp1[0]);
            if(outline[j2_idx][1]<i22[0]){
                outline[j2_idx][1] = i22[0];
            }
            outline[j2_idx][2] = bcp1[1];
            outline[j2_idx][3] = mirX(bb[0]);
            if(outline[j2_idx][3]<i22[0]){
                outline[j2_idx][3] = i22[0];
            }
            outline[j2_idx][4] = bb[1];
        }
        // 乳房扩撑描边
        let newFrag1 = {
            outline: [],
            strokeColor: {r:0,g:0,b:0,},
            noStroke,
        }
        let clipOutline = [];
        newFrag1.outline.push(outline[i21_idx]);
        newFrag1.outline.push(outline[j1_idx]);
        newFrag1.outline.push(outline[k1_idx]);
        newFrag1.outline.push([0,outline[i22_idx][1],outline[i22_idx][2]]);
        newFrag1.outline.push(outline[i22_idx]);
        newFrag1.outline.push(outline[j2_idx]);
        newFrag1.outline.push(outline[k2_idx]);
        newFrag1.name = 'breastOutline';
        fragList.push(newFrag1);
        clipOutline.push(newFrag1.outline[0]);
        clipOutline.push(newFrag1.outline[1]);
        clipOutline.push(newFrag1.outline[2]);
        clipOutline.push([2,500,bottomL||1200,outline[k2_idx][3],outline[k2_idx][4]]);
        clipOutline.push([2,newFrag1.outline[6][1],newFrag1.outline[6][2],newFrag1.outline[5][3],newFrag1.outline[5][4]]); // k2-j2
        clipOutline.push([2,newFrag1.outline[5][1],newFrag1.outline[5][2],newFrag1.outline[4][3],newFrag1.outline[4][4]]); // j2-i22
        clipOutline.push([1,newFrag1.outline[0][3],newFrag1.outline[0][4]]); // i22-i21

        // 乳房底部阴影
        if(size>=3.5){
            let newFrag2 = {
                outline: [],
                clipOutline,// 被碎片切割
                color: clothColor||{r:100,g:100,b:100,alpha:0},
                grd: `rgba(10,10,10,.4)`,
                topY: bb[1]-size*8,
                bottomY: bb[1]+size*10,
                leftX: 500,
                rightX: 500,
                noStroke: true,
            }
            let nf2ps = {
                a: [i11[0]-100,bb[1]-size*8],
                b: [bc[0]+((size-3.5)*size*20),bc[1]+r(0,40)],
                c: [i11[0]-100,bc[1]+size*10],
                cp1: [bcp2[0],bcp2[1]],
                cp2: [bb[0]+size*2,bb[1]+size*13],
            };
            if(nf2ps.b[0]>500){
                nf2ps.b[0] = 500;
            }
            newFrag2.outline.push([0,nf2ps.a[0],nf2ps.a[1]]);
            newFrag2.outline.push([2,nf2ps.cp1[0],nf2ps.cp1[1],nf2ps.b[0],nf2ps.b[1]]);
            newFrag2.outline.push([2,nf2ps.cp2[0],nf2ps.cp2[1],nf2ps.c[0],nf2ps.c[1]]);
            newFrag2.outline.push([0,mirX(nf2ps.a[0]),nf2ps.a[1]]);
            newFrag2.outline.push([2,mirX(nf2ps.cp1[0]),nf2ps.cp1[1],mirX(nf2ps.b[0]),nf2ps.b[1]]);
            newFrag2.outline.push([2,mirX(nf2ps.cp2[0]),nf2ps.cp2[1],mirX(nf2ps.c[0]),nf2ps.c[1]]);
            newFrag2.name = 'breastShadow';
            fragList.push(newFrag2);
        }
    }
    let pasteCollar = ({outline}) =>{ // 衣领
        let newFrag = {
            outline: [],
            color: {r:255,g:255,b:255,},
            strokeColor: {r:0,g:0,b:0,},
        }
        let bottomCurve = r(20,30);
        let bottomOffsetY = r(40,85);
        newFrag.outline.push([0,outline[0][1],outline[0][2]]);
        newFrag.outline.push([1,outline[1][3]+30,d1[1]-20]);
        newFrag.outline.push([1,outline[2][3]+9,outline[2][4]-5]);
        newFrag.outline.push([2,
            mid(outline[2][3]-10,outline[0][1]-15),
            mid(outline[2][4]-bottomCurve,outline[0][2]+50)+bottomCurve,
            outline[0][1]-15,
            outline[0][2]+bottomOffsetY,
        ]);
        newFrag.outline.push([1,outline[0][1],outline[0][2]]);

        newFrag.outline.push([0,mirX(outline[0][1]),outline[0][2]]);
        newFrag.outline.push([1,mirX(outline[1][3]+30),d1[1]-20]);
        newFrag.outline.push([1,mirX(outline[2][3]+9),outline[2][4]-5]);
        newFrag.outline.push([2,
            mirX(mid(outline[2][3]-10,outline[0][1]-15)),
            mid(outline[2][4]-bottomCurve,outline[0][2]+50)+bottomCurve,
            mirX(outline[0][1]-15),
            outline[0][2]+bottomOffsetY,
        ]);
        newFrag.outline.push([1,mirX(outline[0][1]),outline[0][2]]);

        newFrag.name = 'collar';
        newFrag.hasBackPart = true;
        fragList.push(newFrag);
    };
    let pasteCollarLine = ({outline,skew}) =>{ // 衣线
        let newFrag = {
            outline: [],
            strokeColor: {r:0,g:0,b:0,},
        }
        newFrag.outline.push([0,outline[0][1],outline[0][2]]);
        if(size&&weight&&size>3.5){ // 乳房扩撑
            newFrag.outline.push([2,outline[0][1],mid(outline[0][2],breastData.a[1]),outline[0][1]+size*1*skew,breastData.a[1]]);
            newFrag.outline.push([2,outline[0][1]+size*5*skew,breastData.b[1]-size*5,outline[0][1]+size*1.5*skew,breastData.b[1]]);
            newFrag.outline.push([2,outline[0][1],breastData.b[1]+size*5,outline[0][1],1200]);
        }
        else{
            newFrag.outline.push([1,outline[0][1],1200]);
        }
        newFrag.name = 'collarLine';
        fragList.push(newFrag);
    };
    let pasteButton = ({outline,clothColor,skew,}) =>{ // 纽扣
        let newFrag = {
            outline: [],
            color: {r:clothColor.r-r(50,155),g:clothColor.g-r(120,190),b:clothColor.b-r(120,190),},
            strokeColor: {r:0,g:0,b:0,},
        }
        let length = 1200-outline[0][2];
        let buttonSize = r(7,12);
        let buttonCount = r(3,5);
        let buttonMargin = Math.ceil(length/(buttonCount));
        let offsetX = 0;
        let shiftX = r(20,40);
        newFrag.outline.push([3,buttonSize,outline[0][1]+shiftX,outline[0][2]+buttonSize+r(1,5)]);
        if(size&&weight&&size>3.5){ // 乳房扩撑
            for(let i=1;i<=buttonCount;i++){
                let y = outline[0][2]+buttonMargin*i;
                if(y>=breastData.a[1]&&y<=breastData.b[1]){
                    offsetX = (length-Math.abs(y-breastData.b[1]+size*10))*.05*skew;
                }
                else{
                    offsetX = 0;
                }
                newFrag.outline.push([3,buttonSize,outline[0][1]+shiftX+offsetX,y]);
            }
        }
        else{
            for(let i=1;i<=buttonCount;i++){
                newFrag.outline.push([3,buttonSize,outline[0][1]+shiftX,outline[0][2]+buttonMargin*i]);
            }
        }
        newFrag.name = 'button';
        fragList.push(newFrag);
    };
    let pasteHat = ({outline,clothColor,}) =>{ // 帽子
        let newFrag = {
            outline: [],
            color: clothColor,
            strokeColor: {r:0,g:0,b:0,},
        }
        let a,b,c,d;
        let cp1,cp2,cp3,cp4;
        a = [outline[0][1],outline[0][2]];
        b = [outline[1][3]+20,outline[1][4]-25];
        c = [b[0]-5,b[1]+12];
        d = [outline[2][3]-10,outline[2][4]+10];
        cp1 = [b[0],outline[1][2]-15];
        cp2 = [b[0]-25,c[1]-1];
        cp3 = [b[0]-35,c[1]+1];
        cp4 = [mid(d[0],a[0])-40,a[1]];

        newFrag.outline.push([0,a[0],a[1]]);
        newFrag.outline.push([2,cp1[0],cp1[1],b[0],b[1]]);
        newFrag.outline.push([2,cp2[0],cp2[1],c[0],c[1]]);
        newFrag.outline.push([2,cp3[0],cp3[1],d[0],d[1]]);
        newFrag.outline.push([2,cp4[0],cp4[1],a[0],a[1]]);

        newFrag.outline.push([0,mirX(a[0]),a[1]]);
        newFrag.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]);
        newFrag.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]);
        newFrag.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]);
        newFrag.outline.push([2,mirX(cp4[0]),cp4[1],mirX(a[0]),a[1]]);

        newFrag.name = 'hat';
        newFrag.hasBackPart = true;
        fragList.push(newFrag);
    };
    let pasteHatBand = ({outline,}) =>{ // 帽子带
        let gray = r(0,55);
        let newFrag = {
            outline: [],
            color: {r:255-gray,g:255-gray,b:255-gray,},
            strokeColor: {r:0,g:0,b:0,},
        }
        let bandWidth = r(5,9);
        let bandHeight = r(100,160);
        let a = [mid(outline[0][1],outline[1][3]),outline[0][2]-5];

        newFrag.outline.push([0,a[0],a[1]]);
        newFrag.outline.push([1,a[0]-bandWidth,a[1]]);
        newFrag.outline.push([1,a[0]-bandWidth,a[1]+bandHeight]);
        newFrag.outline.push([1,a[0],a[1]+bandHeight]);
        newFrag.outline.push([1,a[0],a[1]]);

        newFrag.outline.push([0,mirX(a[0]),a[1]]);
        newFrag.outline.push([1,mirX(a[0]-bandWidth),a[1]]);
        newFrag.outline.push([1,mirX(a[0]-bandWidth),a[1]+bandHeight]);
        newFrag.outline.push([1,mirX(a[0]),a[1]+bandHeight]);
        newFrag.outline.push([1,mirX(a[0]),a[1]]);

        newFrag.name = 'hatBand';
        fragList.push(newFrag);
    };
    let pasteGallus = ({outline,clothColor,}) =>{ // 吊带
        let gray = r(0,55);
        let newFrag = {
            outline: [],
            color: clothColor,
            strokeColor: {r:0,g:0,b:0,},
            clipOutline: bodyData.outline,
        }
        let bandWidth = r(8,50);
        let cross = r(-100,100);
        let a,b;
        a = [outline[1][1],outline[1][2]];
        b = [a[0]+bandWidth+cross,a[1]-500];

        newFrag.outline.push([0,a[0],a[1]]);
        newFrag.outline.push([1,b[0]-bandWidth,b[1]]);
        newFrag.outline.push([1,b[0],b[1]]);
        newFrag.outline.push([1,a[0]+bandWidth,a[1]]);

        newFrag.outline.push([0,mirX(a[0]),a[1]]);
        newFrag.outline.push([1,mirX(b[0]-bandWidth),b[1]]);
        newFrag.outline.push([1,mirX(b[0]),b[1]]);
        newFrag.outline.push([1,mirX(a[0]+bandWidth),a[1]]);

        newFrag.name = 'gallus';
        fragList.push(newFrag);
    };

    // 生成内衣
    let underwearType; // [1:长T|2:短T|3:背心|4:裹胸]
    let underwearRandomPool;
    if(gender==1){
        underwearRandomPool = [1,2,3,5,6,7,9,];
        // underwearRandomPool = [9];
    }
    else if(gender==2){
        underwearRandomPool = [1,1,1,1,2,2,2,2,3,3,4,5,5,5,6,6,6,7,7,7,7,8,9,9,9,];
        // underwearRandomPool = [9];
    }
    underwearType = underwearRandomPool[r(0,underwearRandomPool.length-1)];
    let outline;
    let midPoint;
    let temp1 = 0,temp2 = 0,temp3 = 0, temp4 = 0, temp5 = 0;
    let clothColor;
    let shortRange;
    switch(underwearType){
        case 1: // 长T
            clothColor = { r:r(50,255),g:r(50,255),b:r(50,255), };
            midPoint = [500,e1[1]+r(50,(gender==2?197:80))];
            temp1 = r(50,150);
            temp2 = r(0,i21[0]-i11[0]); // 宽松度1
            temp3 = r(0,j1[0]-h1[0]); // 宽松度2
            // temp3 = 0;
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.2,d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0],e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1],g1[0],1200], [1,h1[0],1200],
                [2,cp61[0],cp61[1],i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.2,d2[0]-2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0],e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1],g2[0],1200], [1,h2[0],1200],
                [2,cp62[0],cp62[1],i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.3,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:6,i21_idx:7,j1_idx:8,k1_idx:9,i12_idx:17,i22_idx:18,j2_idx:19,k2_idx:20});
            }
        break;
        case 2: // 短T
            clothColor = { r:r(50,255),g:r(50,255),b:r(50,255), };
            midPoint = [500,e1[1]+r(50,(gender==2?197:80))];
            temp1 = r(50,150);
            temp2 = r(0,i21[0]-i11[0]); // 宽松度1
            temp3 = r(0,j1[0]-h1[0]); // 宽松度2
            shortRange = r(10,1205-i11[1]);
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.2,d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0],e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1]-shortRange/4,g1[0]-8,1200-shortRange], [1,h1[0]+4,1200-shortRange],
                [2,cp61[0],cp61[1]-shortRange/4,i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.2,d2[0]-2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0],e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1]-shortRange/4,g2[0]+8,1200-shortRange], [1,h2[0]-4,1200-shortRange],
                [2,cp62[0],cp62[1]-shortRange/4,i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.5,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:6,i21_idx:7,j1_idx:8,k1_idx:9,i12_idx:17,i22_idx:18,j2_idx:19,k2_idx:20});
            }
        break;
        case 3: // 背心
            clothColor = [
                { r:r(240,255),g:r(240,255),b:r(240,255), },
                { r:r(30,50),g:r(30,50),b:r(30,100), },
            ][r(0,1)];
            midPoint = [500,e1[1]+r(150,(gender==2?197:180))];
            temp1 = r(120,150); // 开衫
            temp2 = r(0,i21[0]-i11[0]); // 宽松度1
            temp3 = r(0,j1[0]-h1[0]); // 宽松度2
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.22,d1[0]+3,d1[1]],
                [2,cp31[0],cp31[1],e1[0],e1[1]],
                [2,cpi1[0]+5,cpi1[1]-28,cpi1[0]-6,cpi1[1]],
                [2,cp71[0]-temp2*1.2,cp71[1],j1[0]-temp2*1.5,j1[1]],
                [2,cp81[0]-temp2*1.5,cp81[1],k1[0]-temp2*1.5,k1[1]],
                [1,500,1200],

                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.22,d2[0]-3,d2[1]],
                [2,cp32[0],cp32[1],e2[0],e2[1]],
                [2,cpi2[0]-5,cpi2[1]-28,cpi2[0]+6,cpi2[1]],
                [2,cp72[0]+temp2*1.2,cp72[1],j2[0]+temp2*1.5,j2[1]],
                [2,cp82[0]+temp2*1.5,cp82[1],k2[0]+temp2*1.5,k2[1]],
                [1,500,1200],
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,noStroke:true,i21_idx:3,j1_idx:4,k1_idx:5,i22_idx:10,j2_idx:11,k2_idx:12});
            }
        break;
        case 4: // 裹胸
            clothColor = { r:r(241,255),g:r(220,255),b:r(220,255), };
            temp1 = r(30,90);
            temp2 = r(25,50);
            temp3 = r(30,40);
            temp4 = r(0,40);
            outline = [
                [0,500,cpi1[1]+temp1*1.1],
                [2,450-temp3*2,i21[1]-temp1*1.7,cpi1[0],cpi1[1]],
                [2,cp71[0],cp71[1],j1[0],j1[1]],
                [2,cp81[0],cp81[1],k1[0],k1[1]],
                [2,k1[0]+temp3/5,1200-temp2/2,500,1200-temp2],

                [0,500,cpi2[1]+temp1*1.1],
                [2,550+temp3*2,i22[1]-temp1*1.7,cpi2[0],cpi2[1]],
                [2,cp72[0],cp72[1],j2[0],j2[1]],
                [2,cp82[0],cp82[1],k2[0],k2[1]],
                [2,k2[0]-temp3/5,1200-temp2/2,500,1200-temp2],

            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,bottomL:1200-temp1*2,noStroke:true,i21_idx:1,j1_idx:2,k1_idx:3,i22_idx:6,j2_idx:7,k2_idx:8});
                outline[1][4] += temp4;
                outline[6][4] += temp4;
            }
        break;
        case 5: // 长袖白领
            clothColor = { r:r(200,255),g:r(200,255),b:r(200,255), };
            midPoint = [500,e1[1]+r(40,70)];
            temp1 = r(50,150);
            temp2 = r(0,i21[0]-i11[0]); // 宽松度1
            temp3 = r(0,j1[0]-h1[0]); // 宽松度2
            // temp3 = 0;
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.2,d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0],e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1],g1[0],1200], [1,h1[0],1200],
                [2,cp61[0],cp61[1],i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.2,d2[0]-2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0],e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1],g2[0],1200], [1,h2[0],1200],
                [2,cp62[0],cp62[1],i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.3,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:6,i21_idx:7,j1_idx:8,k1_idx:9,i12_idx:17,i22_idx:18,j2_idx:19,k2_idx:20});
            }
            // 线
            if(r(0,2)){
                let skew = r(0,1)?1:-1;
                pasteCollarLine({outline,skew});
                if(r(0,2)){ // 纽扣
                    pasteButton({outline,clothColor,skew,});
                }
            }
            // 衣领
            if(r(0,2)){
                pasteCollar({outline});
            }
        break;
        case 6: // 短袖白领
            clothColor = { r:r(200,255),g:r(200,255),b:r(200,255), };
            midPoint = [500,e1[1]+r(40,120)];
            temp1 = r(50,150);
            temp2 = r(0,i21[0]-i11[0]); // 宽松度1
            temp3 = r(0,j1[0]-h1[0]); // 宽松度2
            shortRange = r(10,1205-i11[1]);
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.2,d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0],e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1]-shortRange/4,g1[0]-8,1200-shortRange], [1,h1[0]+4,1200-shortRange],
                [2,cp61[0],cp61[1]-shortRange/4,i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.2,d2[0]-2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0],e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1]-shortRange/4,g2[0]+8,1200-shortRange], [1,h2[0]-4,1200-shortRange],
                [2,cp62[0],cp62[1]-shortRange/4,i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.5,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:6,i21_idx:7,j1_idx:8,k1_idx:9,i12_idx:17,i22_idx:18,j2_idx:19,k2_idx:20});
            }
            // 线
            if(r(0,2)){
                let skew = r(0,1)?1:-1;
                pasteCollarLine({outline,skew});
                if(r(0,2)){ // 纽扣
                    pasteButton({outline,clothColor,skew,});
                }
            }
            // 衣领
            if(r(0,2)){
                pasteCollar({outline});
            }
        break;
        case 7: // 卫衣
            clothColor = { r:r(50,255),g:r(50,255),b:r(50,255), };
            midPoint = [500,e1[1]+r(40,70)];
            temp1 = r(50,150);
            temp2 = i21[0]-i11[0]; // 宽松度1
            temp3 = j1[0]-h1[0]; // 宽松度2
            // temp3 = 0;
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp1,midPoint[1]-temp1*.2,d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0],e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1],g1[0],1200], [1,h1[0],1200],
                [2,cp61[0],cp61[1],i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp1,midPoint[1]-temp1*.2,d2[0]-2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0],e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1],g2[0],1200], [1,h2[0],1200],
                [2,cp62[0],cp62[1],i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.3,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:6,i21_idx:7,j1_idx:8,k1_idx:9,i12_idx:17,i22_idx:18,j2_idx:19,k2_idx:20});
            }
            // 帽子
            if(r(0,3)){
                pasteHatBand({outline});
            }
            pasteHat({outline,clothColor});
        break;
        case 8: // 吊带
            clothColor = { r:r(241,255),g:r(120,255),b:r(120,255), };
            temp1 = r(-20,50);
            temp2 = r(-10,80);
            outline = [
                [0,cpi2[0],cpi2[1]],
                // [2,500,cpi2[1]+temp2,cpi1[0],cpi1[1]],
                [1,cpi1[0],cpi1[1]],
                [2,cp71[0],cp71[1],j1[0],j1[1]],
                [2,cp81[0],cp81[1],k1[0],k1[1]],
                [1,500,1200],

                [0,cpi2[0],cpi2[1]],
                [2,cp72[0],cp72[1],j2[0],j2[1]],
                [2,cp82[0],cp82[1],k2[0],k2[1]],
                [1,500,1200],

            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,bottomL:1200-temp1*2,noStroke:true,i21_idx:1,j1_idx:2,k1_idx:3,i22_idx:5,j2_idx:6,k2_idx:7});
                outline[0] = [...outline[5]];
            }
            // outline[0][2] -= temp1;
            // outline[1][2] -= temp1;
            // outline[5][2] -= temp1;
            pasteGallus({outline,clothColor,});
        break;
        case 9: // 高领
            clothColor = [
                { r:r(50,140),g:r(50,140),b:r(140,180), },
                { r:r(150,225),g:r(150,225),b:r(240,255), },
            ][r(0,1)];
            midPoint = [500,c1[1]+r(45,100)];
            temp1 = r(50,150); // 领宽
            temp2 = i21[0]-i11[0]; // 宽松度1
            temp3 = j1[0]-h1[0]; // 宽松度2
            temp4 = r(0,15); // 开口程度
            midPoint[1] += temp4*10;
            outline = [
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]-temp4*4,midPoint[1]-temp4*5,midPoint[0]-temp4*4,midPoint[1]-temp4*10],
                [2,c1[0]-temp1*.3,midPoint[1]-temp4*10-25,c1[0]-temp1*.3,midPoint[1]-temp4*10-50],
                [2,cp21[0]-40,cp21[1],d1[0]-2,d1[1]-3],
                [2,cp31[0],cp31[1],e1[0]-35,e1[1]], [2,cp41[0],cp41[1],f1[0],f1[1]],
                [2,cp51[0],cp51[1],g1[0],1200], [1,h1[0],1200],
                [2,cp61[0],cp61[1],i11[0],i11[1]], [2,cpi1[0]-temp2*.3,cpi1[1],i21[0]-temp2*.5,i21[1]],
                [2,cp71[0]-temp3*.5,cp71[1],j1[0]-temp3*.5,j1[1]], [2,cp81[0]-temp3*.5,cp81[1],k1[0]-temp3*.5,k1[1]],
                [1,500,1200],
                [0,midPoint[0],midPoint[1]],
                [2,midPoint[0]+temp4*4,midPoint[1]-temp4*5,midPoint[0]+temp4*4,midPoint[1]-temp4*10],
                [2,c2[0]+temp1*.3,midPoint[1]-temp4*10-25,c2[0]+temp1*.3,midPoint[1]-temp4*10-50],
                [2,cp22[0]+40,cp22[1],d2[0]+2,d2[1]-3],
                [2,cp32[0],cp32[1],e2[0]+35,e2[1]], [2,cp42[0],cp42[1],f2[0],f2[1]],
                [2,cp52[0],cp52[1],g2[0],1200], [1,h2[0],1200],
                [2,cp62[0],cp62[1],i12[0],i12[1]], [2,cpi2[0]+temp2*.3,cpi2[1],i22[0]+temp2*.3,i22[1]],
                [2,cp72[0]+temp3*.5,cp72[1],j2[0]+temp3*.5,j2[1]], [2,cp82[0]+temp3*.5,cp82[1],k2[0]+temp3*.5,k2[1]],
                [1,500,1200]
            ];
            underwearData.outline = outline;
            underwearData.color = clothColor;
            underwearData.hasBackPart = true;
            if(size&&weight){ // 乳房扩撑
                breastExpand({outline,clothColor,i11_idx:8,i21_idx:9,j1_idx:10,k1_idx:11,i12_idx:21,i22_idx:22,j2_idx:23,k2_idx:24});
            }
            // 线
            if(r(0,5)){
                let skew = r(0,1)?1:-1;
                pasteCollarLine({outline,skew});
            }
        break;
    }
    underwearData.name = `underwear-${underwearType}`;
    // 生成外套
    if(r(0,100)<50&&(underwearType==1||underwearType==2||underwearType==3||underwearType==8)){
        let coatType; // [1:长袖外套|2:夹克]
        let coatTypeRandomPool = [1,];
        coatType = coatTypeRandomPool[r(0,coatTypeRandomPool.length-1)];
        if(coatType==1){ // 长袖外套
            let genFrag1 = _ => { // 外套底
                midPoint = [500,e1[1]+r(50,140)];
                temp2 = i21[0]-i11[0]; // 宽松度1
                temp3 = j1[0]-h1[0]; // 宽松度2
                let color = { r:r(70,125),g:r(15,250),b:r(15,250), };
                let newFrag = {};
                let gap = r(35,125);
                let bandWidth = 35;
                let bandHeight = 40;
                let a,b,c,d,e,l;
                let cp1,cp2;
                a = [midPoint[0]-gap,midPoint[1]+bandHeight];
                b = [a[0]+bandWidth,a[1]+30];
                c = [b[0],b[1]-bandHeight];
                d = [a[0],a[1]-bandHeight];
                e = [d1[0],d1[1]-7];
                l = [a[0]-r(30,50),1200];
                if(l[0]<h1[0]+30){
                    l[0] = h1[0]+30;
                }
                cp1 = [mid(e[0],d[0]),mid(e[1],d[1])+15];
                cp2 = [l[0],mid(l[1],a[1])];
                outline = [
                    [0,a[0],a[1]],
                    [1,d[0]+2,d[1]],
                    [1,a[0]+2,a[1]],
                    [1,b[0],b[1]],
                    [1,c[0],c[1]],
                    [1,d[0],d[1]],
                    [2,cp1[0],cp1[1],e[0],e[1]],

                    [2,cp41[0]-5,e1[1],f1[0]-5,mid(e1[1],f1[1])],
                    [2,cp51[0]-10,cp51[1],g1[0]-30,1200], [1,h1[0],h1[1]],
                    [2,cp61[0]-(size||0)*11,cp61[1],i11[0],mid(i11[1],e[1])+45], [1,i11[0]+1,mid(i11[1],e[1])+45],
                    [2,cp61[0]-(size||0)*11,cp61[1],h1[0]+2,h1[1]],
                    [1,l[0],l[1]],
                    [2,cp2[0],cp2[1],a[0],a[1]],

                    [0,mirX(d[0]),d[1]],
                    [2,mirX(cp1[0]),cp1[1],mirX(e[0]),e[1]],

                    [2,cp42[0]+5,e2[1],f2[0]+5,mid(e2[1],f2[1])],
                    [2,cp52[0]+10,cp52[1],g2[0]+30,1200], [1,h2[0],h2[1]],
                    [2,cp62[0]+(size||0)*11,cp62[1],i12[0],mid(i12[1],e[1])+45], [1,i12[0]-1,mid(i12[1],e[1])+45],
                    [2,cp62[0]+(size||0)*11,cp62[1],h2[0]-2,h2[1]],
                    [1,mirX(l[0]),l[1]],
                    [2,mirX(cp2[0]),cp2[1],mirX(d[0]),d[1]],
                ];
                newFrag.outline = outline;
                newFrag.color = color;
                newFrag.name = 'coat';
                return {a,b,c,d,e,l,cp1,cp2,newFrag};
            }
            let genFrag2 = frag1Data =>{ // 外套衣领
                let color = { r:r(250,255),g:r(250,255),b:r(250,255), };
                let newFrag = {};
                let a,b,c;
                let cp1,cp2,cp3;
                a = [frag1Data.d[0],frag1Data.d[1]];
                b = [e1[0]+r(-2,2),e1[1]-r(40,40)];
                c = [e1[0]-50,e1[1]-r(2,5)];
                cp1 = [frag1Data.cp1[0]+35,frag1Data.cp1[1]-20];
                cp2 = [mid(b[0],c[0])+8,mid(b[1],c[1])+8];
                cp3 = [mid(c[0],a[0]),c[1]];
                outline = [
                    [0,a[0],a[1]],
                    [2,cp1[0],cp1[1],b[0],b[1]],
                    [2,cp2[0],cp2[1],c[0],c[1]],
                    [2,cp3[0],cp3[1],a[0],a[1]],
                    [0,mirX(a[0]),a[1]],
                    [2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]],
                    [2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]],
                    [2,mirX(cp3[0]),cp3[1],mirX(a[0]),a[1]],
                ];
                newFrag.outline = outline;
                newFrag.color = color;
                newFrag.name = 'coatCollar';
                newFrag.hasBackPart = true;
                return {a,b,c,cp1,cp2,cp3,newFrag};
            }
            let frag1Data = genFrag1();
            let frag1 = frag1Data.newFrag;
            fragList.push(frag1);
            if(r(0,1)){
                let frag2 = genFrag2(frag1Data).newFrag;
                fragList.push(frag2);
            }
        }
    }
    // 输出
    res = [underwearData,...fragList];
    return res;
}
export function genBackClothData(clothForeData){ // 生成后衣服
    let res;
    let fragList = [];
    for(let frag of clothForeData){
        if(frag.name=='underwear-9'){ // 高衣领
            let { color, strokeColor, outline, } = frag;
            let newFrag = {
                outline: [],
                color,
                strokeColor,
            };
            newFrag.outline.push([0,outline[2][3],outline[2][4]]);
            newFrag.outline.push([2,500,outline[2][4]-r(20,50),mirX(outline[2][3]),outline[2][4]]);
            newFrag.outline.push([1,mirX(outline[2][3]),outline[2][4]+200]);
            newFrag.outline.push([1,outline[2][3],outline[2][4]+200]);
            newFrag.outline.push([1,outline[2][3],outline[2][4]]);
            fragList.push(newFrag);
        }
        else if(frag.name=='collar'){ // 衬衫衣领
            let { color, strokeColor, outline, } = frag;
            let newFrag = {
                outline: [],
                color,
                strokeColor,
            };
            newFrag.outline.push([0,outline[1][1],outline[1][2]]);
            newFrag.outline.push([2,500,outline[1][2]+r(-40,40),mirX(outline[1][1]),outline[1][2]]);
            newFrag.outline.push([1,mirX(outline[1][1]),outline[1][2]+200]);
            newFrag.outline.push([1,outline[1][1],outline[1][2]+200]);
            newFrag.outline.push([1,outline[1][1],outline[1][2]]);
            fragList.push(newFrag);
        }
        else if(frag.name=='hat'){ // 卫帽
            let { color, strokeColor, outline, } = frag;
            let newFrag = {
                outline: [],
                color,
                strokeColor,
            };
            newFrag.outline.push([0,outline[1][3],outline[1][4]]);
            newFrag.outline.push([2,500,outline[1][4]+r(-40,40),mirX(outline[1][3]),outline[1][4]]);
            newFrag.outline.push([1,mirX(outline[1][3]),outline[1][4]+200]);
            newFrag.outline.push([1,outline[1][3],outline[1][4]+200]);
            newFrag.outline.push([1,outline[1][3],outline[1][4]]);
            fragList.push(newFrag);
        }
        else if(frag.name=='coatCollar'){ // 外套衣领
            let { color, strokeColor, outline, } = frag;
            let newFrag = {
                outline: [],
                color,
                strokeColor,
            };
            newFrag.outline.push([0,outline[1][3],outline[1][4]]);
            newFrag.outline.push([2,500,outline[1][4]+r(-40,40),mirX(outline[1][3]),outline[1][4]]);
            newFrag.outline.push([1,mirX(outline[1][3]),outline[1][4]+200]);
            newFrag.outline.push([1,outline[1][3],outline[1][4]+200]);
            newFrag.outline.push([1,outline[1][3],outline[1][4]]);
            fragList.push(newFrag);
        }
    }
    res = [...fragList];
    return res;
}

function genHairColor(gender){ // 生成发色
    let color, grd;
    let basicColor = [{ // 黑
        r: r(10,30),
        g: r(10,30),
        b: r(10,30),
    },{ // 橙黄
        r: r(234,254),
        g: r(154,174),
        b: r(86,106),
    }];
    if(r(0,100)<50){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,gender==1?50:255),
            g: r(0,gender==1?50:155),
            b: r(0,200),
        };
    }
    if(r(0,100)<90){
        let grds = ['#222','#fff','#A0522D'];
        grd = grds[r(0,grds.length-1)];
    }
    return { color, grd, };
}
function genEyeColor(flag){ // 生成瞳色
    let color, grd;
    let basicColor = [];
    if(flag==1){
        basicColor = [{
            r: r(40,60),
            g: r(40,60),
            b: r(40,60),
        },{
            r: r(240,250),
            g: r(240,250),
            b: r(240,250),
        },];
    }
    else if(flag==2){
        basicColor = [{
            r: r(40,60),
            g: r(40,60),
            b: r(40,60),
        },];
    }
    if(r(0,100)<90){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,200),
            g: r(0,200),
            b: r(0,200),
        };
    }
    let grds = flag==1?['#777','#fff']:['#111','#777'];
    grd = grds[r(0,grds.length-1)];
    return { color, grd, };
}
function genGlassColor(gender){ // 生成瞳色
    let color;
    let basicColor = [{ // 黑
        r: r(10,30),
        g: r(10,30),
        b: r(10,30),
    },{ // 纯黑
        r: 0,
        g: 0,
        b: 0,
    }];
    if(r(0,100)<90){
        color = basicColor[r(0,basicColor.length-1)];
    }
    else{
        color = {
            r: r(0,gender==1?50:255),
            g: r(0,gender==1?50:155),
            b: r(0,200),
        };
    }
    return color;
}
function genLipColor(){ // 生成唇色
    let color = {
        r: r(255,255),
        g: r(89,109),
        b: r(61,81),
    };
    return { color, };
}
function genCheekColor(){ // 生成腮红色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rgrd = `rgba(${r(255,255)},${r(189,209)},${r(151,181)},${r(40,50)/100})`;
    return { color, rgrd };
}
function genAreolaColor(){ // 生成乳晕色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rcolor = {
        r: r(255,255),
        g: r(199,209),
        b: r(171,181),
    }
    let rgrd = `rgba(${rcolor.r},${rcolor.g},${rcolor.b},${r(80,90)/100})`;
    return { color, rgrd };
}
function genNippleColor(){ // 生成乳头色
    let color = {
        r: r(255,255),
        g: r(255,255),
        b: r(255,255),
        alpha: 0,
    };
    let rcolor = {
        r: r(255,255),
        g: r(169,179),
        b: r(131,141),
    }
    let rgrd = `rgba(${rcolor.r},${rcolor.g},${rcolor.b},1)`;
    return { color, rgrd };
}
function genEyeShadowColor(){ // 生成眼影色
    let grd = `rgba(${r(255,255)},${r(10,84)},${r(10,155)},${r(60,100)/100})`;
    return { grd };
}

function shrinkYoung(age){
    let pct;
    if(age>=18){
        pct = 100;
    }
    else if(age>=15){
        pct = age*5;
    }
    else{
        pct = age*4;
    }
    return pct/100;
}
function genFaceData(gender,age,bald){ // 生成脸
    let a,b,c,d,e,f,g,h,i;
    let color;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let fat = r(0,100)<5?r(0,10):0;
    fat = fat*(1-ysr);
    // let ysr = 0; // 年幼影响比率
    if(gender==2){ // 女
        a = [500,r(250,270)+ysr*183]; // 头顶 千分比
        b = [500,a[1]+r(40,48-ysr*7)]; // 刘海中心
        c = [r(327,340)+ysr*14,b[1]+r(115,125)-ysr*8]; // 脸左
        d = [r(435,455),b[1]+r(142,148)-ysr*8]; // 左眉毛中心
        e = [d[0],d[1]+r(42,48-ysr*8)+ysr*2]; // 左眼下
        f = [500,e[1]+r(107,117-ysr*5)-ysr*9]; // 鼻下
        g = [500,f[1]+r(34,51-ysr*4)-ysr*10]; // 唇上
        h = [r(422,432-ysr*9)+ysr*16-fat*4,c[1]+r(248,257-ysr*4)-ysr*20]; // 颊左
        i = [500,h[1]+r(35,45-ysr*4)-ysr*15+fat*1.5]; // 下巴

        let colorDeep = r(2,7);
        color = {
            r: 255,
        };
        color.g = color.r-r(10,15)-colorDeep;
        color.b = color.g-10-colorDeep;
        if(r(0,100)<1){ // 黑人
            color.r -= 30;
            color.g /= 1.4;
            color.b /= 1.7;
        }
    }
    else{ // 男
        a = [500,r(227,247)+ysr*183]; // 头顶 千分比
        b = [500,a[1]+r(45,55-ysr*9)]; // 刘海中心
        c = [r(318,326)+ysr*23,b[1]+r(122,132)-ysr*9]; // 脸左
        d = [r(420,440),b[1]+r(135,145)-ysr*9]; // 左眉毛中心
        e = [d[0],d[1]+r(48,58-ysr*7)+ysr*2]; // 左眼下
        f = [500,e[1]+r(125,131-ysr*4)-ysr*20]; // 鼻下
        g = [500,f[1]+r(37,66-ysr*8)-ysr*17]; // 唇上
        h = [r(390+ysr*15,412-ysr*10)+ysr*16-fat*4,c[1]+r(255,265-ysr*10)-ysr*38]; // 颊左
        i = [500,h[1]+r(45+ysr*18,65-ysr*10)-ysr*12+fat*1.5]; // 下巴

        let colorDeep = r(2,30);
        color = {
            r: 255,
        };
        color.g = color.r-r(10,15)-colorDeep;
        color.b = color.g-10-colorDeep;
        if(r(0,100)<3){ // 黑人
            color.r -= 30;
            color.g /= 1.4;
            color.b /= 1.7;
        }
    }

    // 生成头部轮廓
    let cp1,cp2,cp3;
    let oldImpact = 0;
    if(gender==2){ // 女
        if(age>60){
            oldImpact = Math.round(age*.9);
        }
        cp1 = [r(c[0]+5,c[0]+10),r(a[1],a[1]+20)];
        cp2 = [r(c[0]+0,c[0]+15-ysr*15)-fat*3,r(h[1]-90,h[1]-65+ysr*10)];
        let hiWidth = i[0]-cp2[0];
        let hiHeight = i[1]-cp2[1];
        let sharp = r(10+ysr*8,15);
        cp3 = [h[0]+hiWidth*.023*sharp-ysr*13,h[1]+hiHeight*.03*sharp+ysr*28+fat*1.5];
        // 调整
        cp2[0] += oldImpact*.6;
        cp2[1] += oldImpact*1;
        if(cp3[1]>i[1]){
            cp3[1] = i[1];
        }
    }
    else{ // 男
        if(age>60){
            oldImpact = Math.round(age*1.4);
        }
        cp1 = [r(c[0]+5,c[0]+10),r(a[1],a[1]+20)];
        cp2 = [r(c[0]+1,c[0]+5-ysr*9)-fat*3,r(h[1]-100,h[1]-75+ysr*10)];
        let hiWidth = i[0]-cp2[0];
        let hiHeight = i[1]-cp2[1];
        let sharp = r(10,15);
        cp3 = [h[0]+hiWidth*.019*sharp,h[1]+hiHeight*.03*sharp+fat*1.5];
        // 调整
        cp2[0] += oldImpact*.2;
        cp2[1] += oldImpact*1;
        if(cp3[1]>i[1]){
            cp3[0] = h[0]+hiWidth*.3;
        }
    }

    let radialX, radialY;
    radialX = 500;
    radialY = a[1]-r(0,(i[1]-a[1])/10)-60;
    let res = {
        a,b,c,d,e,f,g,h,i,
        cp1,cp2,cp3,
        topY: a[1],
        bottomY: i[1],
        leftX: c[0],
        rightX: mirX(c[0]),
        outline: [],
        color,
        radial: {
            x1: radialX,
            y1: radialY,
            r1: 1,
            x2: radialX,
            y2: radialY,
            r2: 300,
        },
    };
    if(bald){
        res.rgrd = `#fafafa`;
    }
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 a-c1
    res.outline.push([2,cp2[0],cp2[1],h[0],h[1]]); // 曲线 c1-h1
    res.outline.push([2,cp3[0],cp3[1],i[0],i[1]]); // 曲线 h1-i
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(h[0]),h[1]]); // 曲线 i-h2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 h2-c2
    res.outline.push([2,mirX(cp1[0]),cp1[1],a[0],a[1]]); // 曲线 c2-a

    return res;
}
function genBodyData(faceData,gender,age){ // 生成身体
    let a,b,c,d,e,f,g,h,i1,i2,j,k,l;
    let { topY, bottomY, leftX, rightX, } = faceData;
    let faceWidth = Math.round(rightX-leftX); // 脸宽
    let faceHeight = Math.round(bottomY-topY); // 脸高
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let muscle = r(-5,5); // 肌肉量
    let shoulderWidth;
    let armWidth;
    if(gender==2){ // 女
        shoulderWidth = faceWidth-308;
        armWidth = 102-ysr*32;
        a = [faceData.g[0],faceData.g[1]];
        b = [faceData.h[0]+r(5,7)+ysr*30,faceData.g[1]];
        c = [b[0]+(r(20,25)/100)*(500-b[0]),b[1]+r(45+ysr*30,80)-ysr*40];
        d = [b[0]-(r(15,20)/100)*30-73+ysr*30,c[1]+r(80,90)-ysr*30];
        e = [d[0]-(r(10+ysr*4,20-ysr*4)/100)*30-shoulderWidth-ysr*30,d[1]+6+r(1,3)-ysr*7];
        f = [e[0]-(r(1,40)/100)*20-110+ysr*5,e[1]+r(50,75)-ysr*2];
        g = [f[0]-10+r(-5,5),1200];
        h = [g[0]+armWidth,1200];
        i1 = [g[0]+armWidth+3,e[1]+225+r(-5,5)-ysr*60];
        i2 = [i1[0]+5+ysr*5,i1[1]];
        j = [g[0]+armWidth+25-ysr*15,i2[1]+120];
        k = [g[0]+armWidth+29-ysr*15,1200];
        l = [faceData.g[0],1200];
    }
    else{ // 男
        shoulderWidth = faceWidth-310+ysr*30;
        armWidth = 125+muscle*(2.5-ysr*3)-ysr*63;
        a = [faceData.g[0],faceData.g[1]];
        b = [faceData.h[0]+r(5,7)+ysr*30,faceData.g[1]];
        c = [b[0]+(r(18,24)/100)*(500-b[0])-muscle*(2-ysr*2),b[1]+r(70,80)-ysr*30];
        d = [b[0]-(r(15,20)/100)*30-110+ysr*70,c[1]+r(80,90)-ysr*20];
        e = [d[0]-(r(10,20)/100)*10-shoulderWidth,d[1]+8+r(2,5)-ysr*10];
        f = [e[0]-(r(5,10)/100)*30-100+ysr*15-muscle*(4-ysr*4.5),e[1]+85-ysr*15];
        g = [f[0]-15+ysr*12+r(-6,6),1200];
        h = [g[0]+armWidth,1200];
        i1 = [g[0]+armWidth+3,e[1]+245+r(-5,5)-ysr*60];
        i2 = [i1[0]+5+ysr*12-muscle*(.2-ysr*.2),i1[1]];
        j = [g[0]+armWidth+19-muscle*(.1-ysr*.1),i2[1]+120-ysr*120];
        k = [g[0]+armWidth+20-muscle*(.2-ysr*.2),1200];
        l = [faceData.g[0],1200];
    }
    // 生成身体轮廓
    let cp1,cp2,cp3,cp4,cp5,cp6,cpi,cp7,cp8;
    if(gender==2){ // 女
        cp1 = [c[0]+r(-2,10),b[1]+r(0,20)];
        cp2 = [c[0]+r(-10,5),d[1]-r(0,20)];
        cp3 = [d[0]-r(0,4),d[1]+r(0,4)];
        cp4 = [f[0]+r(15,26),e[1]+r(0,15)];
        cp5 = [f[0]-r(2,10-ysr*10)-10+ysr*5,f[1]+(g[1]-f[1])*.2];
        cp6 = [i1[0]-ysr*7,i1[1]+50];
        cpi = [i1[0]+1,i1[1]-50];
        cp7 = [i2[0]-5+ysr*5,i2[1]+30];
        cp8 = [k[0],j[1]+30];
    }
    else{ // 男
        cp1 = [c[0]+r(-2,10),b[1]+r(0,20)];
        cp2 = [c[0]+r(-10,5),d[1]-r(0,20)-muscle*3.8+ysr*10];
        cp3 = [d[0]-r(0,3),d[1]+r(0,3)];
        cp4 = [f[0]+r(15,26),e[1]+8-muscle*(1-ysr*1.2)];
        cp5 = [g[0]-2-ysr*2-muscle*(2-ysr*2.2),mid(g[1],f[1])+r(-15,25)];
        cp6 = [i1[0]+muscle*(.8-ysr*1),i1[1]+50];
        cpi = [i1[0]+1,i1[1]-50];
        cp7 = [i2[0]+ysr*2,i2[1]+30];
        cp8 = [k[0]-ysr*5,j[1]+30];
    }
    let res = {
        a1:a,b1:b,c1:c,d1:d,e1:e,f1:f,g1:g,h1:h,i11:i1,i21:i2,j1:j,k1:k,l1:l,
        a2:[mirX(a[0]),a[1]],
        b2:[mirX(b[0]),b[1]],
        c2:[mirX(c[0]),c[1]],
        d2:[mirX(d[0]),d[1]],
        e2:[mirX(e[0]),e[1]],
        f2:[mirX(f[0]),f[1]],
        g2:[mirX(g[0]),g[1]],
        h2:[mirX(h[0]),h[1]],
        i12:[mirX(i1[0]),i1[1]],
        i22:[mirX(i2[0]),i2[1]],
        j2:[mirX(j[0]),j[1]],
        k2:[mirX(k[0]),k[1]],
        l2:[mirX(l[0]),l[1]],
        cp11:cp1,cp21:cp2,cp31:cp3,cp41:cp4,cp51:cp5,cp61:cp6,cpi1:cpi,cp71:cp7,cp81:cp8,
        cp12:[mirX(cp1[0]),cp1[1]],
        cp22:[mirX(cp2[0]),cp2[1]],
        cp32:[mirX(cp3[0]),cp3[1]],
        cp42:[mirX(cp4[0]),cp4[1]],
        cp52:[mirX(cp5[0]),cp5[1]],
        cp62:[mirX(cp6[0]),cp6[1]],
        cpi2:[mirX(cpi[0]),cpi[1]],
        cp72:[mirX(cp7[0]),cp7[1]],
        cp82:[mirX(cp8[0]),cp8[1]],
        color: faceData.color,
        outline: [],
        rgrd: `#222`,
        muscle,
        radial: {
            x1: 500,
            y1: a[1]-100,
            r1: 1,
            x2: 500,
            y2: a[1]-100,
            r2: 220,
        },
    };
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([1,b[0],b[1]]); // 直线 a-b1
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp2[0],cp2[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([2,cp4[0],cp4[1],f[0],f[1]]); // 曲线 e1-f1
    res.outline.push([2,cp5[0],cp5[1],g[0],g[1]]); // 曲线 f1-g1
    res.outline.push([1,h[0],h[1]]); // 直线 g1-h1
    res.outline.push([2,cp6[0],cp6[1],i1[0],i1[1]]); // 曲线 h1-i11
    res.outline.push([2,cpi[0],cpi[1],i2[0],i2[1]]); // 曲线 i11-i21
    res.outline.push([2,cp7[0],cp7[1],j[0],j[1]]); // 曲线 i21-j1
    res.outline.push([2,cp8[0],cp8[1],k[0],k[1]]); // 曲线 j1-k1
    res.outline.push([1,l[0],l[1]]); // 直线 k1-l
    res.outline.push([1,mirX(k[0]),k[1]]); // 直线 l-k2
    res.outline.push([2,mirX(cp8[0]),cp8[1],mirX(j[0]),j[1]]); // 曲线 k2-j2
    res.outline.push([2,mirX(cp7[0]),cp7[1],mirX(i2[0]),i2[1]]); // 曲线 j2-i12
    res.outline.push([2,mirX(cpi[0]),cpi[1],mirX(i1[0]),i1[1]]); // 曲线 i12-i22
    res.outline.push([2,mirX(cp6[0]),cp6[1],mirX(h[0]),h[1]]); // 曲线 i22-h2
    res.outline.push([1,mirX(g[0]),g[1]]); // 直线 h2-g2
    res.outline.push([2,mirX(cp5[0]),cp5[1],mirX(f[0]),f[1]]); // 曲线 g2-f2
    res.outline.push([2,mirX(cp4[0]),cp4[1],mirX(e[0]),e[1]]); // 曲线 f2-e2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 e2-d2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 d2-c2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 c2-b2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线 b2-a

    return res;
}
function genEarsData(faceData,gender,age){ // 生成双耳朵
    let a,b,c,d;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==2){ // 女
        a = [faceData.c[0]+5,faceData.c[1]+50];
        b = [faceData.c[0]-r(10,18),a[1]+r(5,20)];
        c = [faceData.c[0]+(faceData.h[0]-faceData.c[0])/3+ysr*20,a[1]+r(80,105)-ysr*40];
        d = [a[0]+30,a[1]+40];
    }
    else{ // 男
        a = [faceData.c[0]+5,faceData.c[1]+50];
        b = [faceData.c[0]-r(20,25),a[1]+r(15,25)];
        c = [faceData.c[0]+10+(faceData.h[0]-faceData.c[0])/4+ysr*20,a[1]+r(100,125)-ysr*40];
        d = [a[0]+30,a[1]+40];
    }

    let res = {
        a,b,c,d,
        color: faceData.color,
        outline: [],
    };

    // 生成双耳轮廓
    let cp1,cp2,cp3;
    cp1 = [r(a[0]-5,b[0]+5),r(a[1]-17,a[1]-22)];
    cp2 = [r(c[0]-5,b[0]+2),r(c[1]-10,c[1]+10)];
    cp3 = [r(c[0]+5,c[0]+20),r(c[1]-5,c[1]-20)];

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([1,a[0],a[1]]); // 直线
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 c2-d2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线

    return res;
}
function genBrowsData(faceData,gender,color){ // 生成双眉
    let a,b,c,d;
    if(gender==2){ // 女
        a = [faceData.d[0]+r(25,35),faceData.d[1]+r(-5,20)];
        b = [faceData.d[0]+r(-5,5),faceData.d[1]-r(0,5)];
        c = [faceData.d[0]-r(50,55),faceData.d[1]+r(-15,5)];
        d = [faceData.d[0]+r(-5,5),faceData.d[1]+r(0,8)];
    }
    else{ // 男
        a = [faceData.d[0]+r(25,35),faceData.d[1]+r(-5,20)];
        b = [faceData.d[0]+r(-5,5),faceData.d[1]-r(0,10)];
        c = [faceData.d[0]-r(70,95),faceData.d[1]+r(-15,5)];
        d = [faceData.d[0]+r(-5,5),faceData.d[1]+r(0,8)];
    }

    let res = {
        a,b,c,d,
        outline: [],
        color,
        alpha: 1,
    };

    // 生成双眉轮廓
    let cp1,cp2,cp3;
    cp1 = [r(a[0]-10,a[0]-5),r(a[1]-8,a[1]-3)];
    cp2 = [r(c[0],c[0]+3),r(c[1]-10,c[1]-5)];
    cp3 = [r(d[0]-20,d[0]-10),r(d[1],c[1])];

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],d[0],d[1]]); // 曲线 c1-d1
    res.outline.push([1,a[0],a[1]]); // 直线
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(d[0]),d[1]]); // 曲线 c2-d2
    res.outline.push([1,mirX(a[0]),a[1]]); // 直线

    return res;
}
function genEyesData(faceData,gender,age,personalities){ // 生成双眼
    let a,b,c,lineWidth;
    let min,max;
    let calmness = personalities[3],
        libidinal = personalities[0];
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==2){ // 女
        a = [faceData.e[0]+r(40,55),faceData.e[1]-r(-15,15)];
        b = [faceData.e[0]-r(50,70),faceData.e[1]-r(-10,10)];
        lineWidth = r(2,7);
    }
    else{ // 男
        a = [faceData.e[0]+r(45,55),faceData.e[1]-r(-15,15)];
        b = [faceData.e[0]-r(55,70),faceData.e[1]-r(-10,10)];
        lineWidth = r(1,4);
    }
    let a0max = 485-ysr*30;
    if(a[0]>a0max){
        a[0] = a0max;
    }
    if(b[1]>a[1]){
        b[1] = a[1]-r(0,5);
    }
    if(a[1]>b[1]){
        min = b[1];
        max = a[1];
    }
    else{
        min = a[1];
        max = b[1];
    }
    c = [Math.round((a[0]+b[0])/2),min+Math.round((max-min)/2)];

    // 生成双眼轮廓
    let cp1,cp2;
    if(gender==2){ // 女
        let cpTop = r(b[1]-15,a[1]-35);
        let cpBottom = r(b[1]+15,a[1]+35);
        // 欲望值修正
        if(libidinal>70){
            cpTop += Math.round(15*r(15,45)/100);
            cpBottom -= Math.round(15*r(15,45)/100);
        }
        cp1 = [r(b[0]+15,a[0]-15),cpTop];
        cp2 = [r(b[0]+15,a[0]-15),cpBottom];
    }
    else{ // 男
        let cpTop = r(b[1]-20,a[1]-35);
        let cpBottom = r(b[1]+20,a[1]+35);
        // 欲望值修正
        if(libidinal>70){
            cpTop += Math.round(15*r(15,45)/100);
            cpBottom -= Math.round(15*r(15,45)/100);
        }
        cp1 = [r(b[0]+15,a[0]-15),cpTop];
        cp2 = [r(b[0]+15,a[0]-15),cpBottom];
    }
    if(cp1[0]<c[0]){
        cp1[0] = c[0]+r(5,15);
    }
    if(cp2[0]<c[0]){
        cp2[0] = c[0]+r(5,15);
    }

    let res = {
        a,b,c,
        cp1,cp2,
        outline: [],
        lineWidth,
        color: {
            r: 255,
            g: 255,
            b: 255,
        },
        alpha: 1,
        noStroke: true,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],a[0],a[1]]); // 曲线 b1-a1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(a[0]),a[1]]); // 曲线 b2-a2

    return res;
}
function genEyeSkinsData(eyeData){ // 生成双眼皮
    let { lineWidth, cp1, cp2, a, b, c, } = eyeData;
    let d,e;
    let dw = r(3,9);
    let ew = dw+r(5,10);
    d = [a[0],a[1]-dw];
    e = [b[0],a[1]-ew];

    let res = {
        d,e,
        outline: [],
        lineWidth: Math.floor(lineWidth/2),
        alpha: 1,
    };
    if(res.lineWidth<1){
        res.lineWidth = 1;
    }

    // 生成双眼皮轮廓
    res.outline.push([0,a[0],a[1]]); // 移动至 a1
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([0,d[0],d[1]]); // 移动至 d1
    res.outline.push([2,cp1[0],cp1[1]-dw,e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动至 a2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([0,mirX(d[0]),d[1]]); // 移动至 d2
    res.outline.push([2,mirX(cp1[0]),cp1[1]-dw,mirX(e[0]),e[1]]); // 曲线 d2-e2

    return res;
}
function genLashData(eyeData,gender,age){ // 生成睫毛
    let { lineWidth, cp1, cp2, a, b, c, } = eyeData;
    let eyeWidth = a[0]-b[0];
    let eyeHeight = cp2[1]-cp1[1];
    let lashMode = r(0,1); // [0:上部|1:下部]
    let lashCount;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(age<=13){
        lashMode = 0;
    }
    if(lashMode==0){ // 睫毛在上部
        lashCount = r(6,9);
    }
    else{ // 睫毛在下部
        lashCount = r(2,3);
    }
    let xRange,yRange,xItv,yItv;
    if(lashMode==0){ // 睫毛在上部
        xRange = [b[0]-12,a[0]-5];
        yRange = [cp1[1]-eyeHeight/5,cp1[1]+eyeHeight/5];
    }
    else{ // 睫毛在下部
        xRange = [b[0]-12,c[0]];
        yRange = [c[1]+4,cp2[1]+5];
    }
    // 起始点为 a，终点为 ep
    let eps = [];
    if(lashMode==0){ // 睫毛在上部
        xItv = Math.round((xRange[1]-xRange[0])/(lashCount+0));
        yItv = Math.round((yRange[1]-yRange[0])/(lashCount+0));
        for(let i=0;i<lashCount;i++){
            let newEp = [xRange[1]-i*xItv-i*3,yRange[0]+i*yItv];
            eps.push(newEp);
        }
        for(let i=0;i<2;i++){
            eps[i][1] += Math.round((c[1]-eps[i][1])*.4);
        }
    }
    else{ // 睫毛在下部
        xItv = Math.round((xRange[1]-xRange[0])/(lashCount+0));
        yItv = Math.round((yRange[1]-yRange[0])/(lashCount+2));
        for(let i=0;i<lashCount;i++){
            let newEp = [xRange[0]+i*xItv,yRange[0]+i*yItv];
            eps.push(newEp);
        }
    }

    let res = {
        lashCount,
        outline: [],
        lineWidth: 1,
        alpha: .5,
    };

    // 生成睫毛轮廓
    for(let i=0;i<eps.length;i++){
        let ep = eps[i];
        if(lashMode==0){ // 上部
            res.outline.push([0,a[0],a[1]]); // 移动
            res.outline.push([2,c[0],c[1],ep[0],ep[1]]); // 曲线
        }
        else{ // 下部
            res.outline.push([0,a[0],a[1]]); // 移动
            res.outline.push([1,ep[0],ep[1]]); // 直线
        }
    }
    for(let i=0;i<eps.length;i++){
        let ep = eps[i];
        if(lashMode==0){ // 上部
            res.outline.push([0,mirX(a[0]),a[1]]); // 移动
            res.outline.push([2,mirX(c[0]),c[1],mirX(ep[0]),ep[1]]); // 曲线
        }
        else{ // 下部
            res.outline.push([0,mirX(a[0]),a[1]]); // 移动
            res.outline.push([1,mirX(ep[0]),ep[1]]); // 直线
        }
    }

    return res;
}
function genEyeoutballsData(eyeData,gender,age){ // 生成外双瞳
    let radius;
    let c = eyeData.c;
    let oldImpact = 0;
    if(gender==2){ // 女
        if(age>=50){
            oldImpact = age*.14;
        }
        radius = r(12,25-oldImpact);
    }
    else{ // 男
        if(age>=50){
            oldImpact = age*.19;
        }
        radius = r(7,24-oldImpact);
    }
    let eyeColor = genEyeColor(1);
    let {color,grd,} = eyeColor;

    let res = {
        radius,
        outline: [],
        color,
        grd,
        topY: c[1]-15,
        bottomY: c[1]+15,
        alpha: 1,
    };

    // 生成双瞳
    res.outline.push([0,c[0],c[1]]); // 移动
    res.outline.push([3,radius,c[0],c[1]]); // 左外瞳
    res.outline.push([0,mirX(c[0]),c[1]]); // 移动
    res.outline.push([3,radius,mirX(c[0]),c[1]]); // 右外瞳
    return res;
}
function genEyeinballsData(eyeData,eyeoutballsData,gender,age){ // 生成内双瞳
    let radius;
    let outRadius = eyeoutballsData.radius;
    let c = eyeData.c;
    if(gender==2){ // 女
        radius = Math.round(outRadius*r(40,80)/100);
    }
    else{ // 男
        radius = Math.round(outRadius*r(20,80)/100);
    }
    let eyeColor = genEyeColor(2);
    let {color,grd,} = eyeColor;

    let res = {
        radius,
        outline: [],
        color,
        grd,
        topY: c[1]-5,
        bottomY: c[1]+5,
        alpha: 1,
    };

    // 生成双瞳
    res.outline.push([0,c[0],c[1]]); // 移动
    res.outline.push([3,radius,c[0],c[1]]); // 左内瞳
    res.outline.push([0,mirX(c[0]),c[1]]); // 移动
    res.outline.push([3,radius,mirX(c[0]),c[1]]); // 右内瞳
    return res;
}
function genNoseData(faceData,gender,age){ // 生成鼻子
    let a,b,c,lineWidth;
    let dir;
    let ysr = 1-shrinkYoung(age);
    if(gender==2){ // 女
        a = [faceData.f[0],faceData.e[1]+r(10,25)+ysr*50];
        b = [faceData.f[0]-r(-7,7),faceData.f[1]-r(0,5)-ysr*50];
        dir = b[0]<0?-1:1; // 鼻子方向：[0:向左|1:向右]
        c = [(faceData.f[0]+r(0,6))*dir,faceData.f[1]-ysr*40];
        lineWidth = 1;
    }
    else{ // 男
        a = [faceData.f[0],faceData.e[1]+r(10,30)+ysr*50];
        b = [faceData.f[0]-r(-9,9),faceData.f[1]-r(0,8)-ysr*50];
        dir = b[0]<0?0:1; // 鼻子方向：[0:向左|1:向右]
        c = [(faceData.f[0]+r(0,12))*dir,faceData.f[1]-ysr*40];
        lineWidth = 1;
    }
    if(b[0]==0){
        b[0] = 5;
    }
    if(b[0]<2&&b[0]>-2){
        b[0] *= 2;
    }
    // 生成鼻子轮廓
    let cp1,cp2;
    if(gender==2){ // 女
        cp1 = [r(a[0],(a[0]+9)*dir),r(b[1]-50,b[1])];
        cp2 = [r(c[0],(c[0]+4)*dir),r(b[1],b[1]+10)];
    }
    else{ // 男
        cp1 = [r(a[0],(a[0]+10)*dir),r(b[1]-50,b[1])];
        cp2 = [r(c[0],(c[0]+7)*dir),r(b[1],b[1]+16)];
    }

    let res = {
        a,b,c,
        outline: [],
        lineWidth,
        strokeColor: '#747443',
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b-c

    return res;
}
function genLipData(faceData,gender,age,emotion){ // 生成嘴唇
    let a,b,lineWidth;
    let lipWidth;
    let lipColor = genLipColor();
    let strokeColor,color;
    let ysr = 1-shrinkYoung(age);
    if(gender==2){ // 女
        lipWidth = r(25,50-ysr*10);
        a = [faceData.g[0]+lipWidth,faceData.g[1]];
        b = [faceData.g[0]-lipWidth,faceData.g[1]];
        lineWidth = 1;
        // if(age>=18&&age<50&&r(0,100)<10){
        //     strokeColor = lipColor.color;
        //     lineWidth = r(1,3);
        // }
        if(age>=16&&age<60){
            color = {
                r: 255,
                g: 99,
                b: 71,
            };
        }
    }
    else{ // 男
        lipWidth = r(30,80-ysr*30);
        a = [faceData.g[0]+lipWidth,faceData.g[1]];
        b = [faceData.g[0]-lipWidth,faceData.g[1]];
        lineWidth = 1;
    }
    // 生成嘴唇轮廓
    if(!emotion){
        emotion = r(0,100);
    }
    let arcDeg = Math.round(emotion/100*24-9); // (-9 - 15)
    let cp1;
    if(gender==2){ // 女
        cp1 = [faceData.g[0]+r(-25,25),faceData.g[1]+arcDeg];
    }
    else{ // 男
        cp1 = [faceData.g[0]+r(-25,25),faceData.g[1]+arcDeg];
    }

    let res = {
        a,b,
        outline: [],
        lineWidth,
        lipWidth,
        strokeColor,
        color,
        emotion,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b

    return res;
}
function genBottomLipData(faceData,lipData,gender){ // 生成下嘴唇
    let a,b,lineWidth;
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let lipWidth = lipData.lipWidth/3+r(-4,4);
    let marginTop = r(9,15);
    if(gender==2){ // 女
        a = [faceData.g[0]+lipWidth,faceData.g[1]+marginTop];
        b = [faceData.g[0]-lipWidth,faceData.g[1]+marginTop];
        lineWidth = 1;
    }
    else{ // 男
        a = [faceData.g[0]+lipWidth,faceData.g[1]+marginTop];
        b = [faceData.g[0]-lipWidth,faceData.g[1]+marginTop];
        lineWidth = 1;
    }
    // 生成嘴唇轮廓
    let cp1;
    if(gender==2){ // 女
        cp1 = [faceData.g[0],r(a[1]-9,a[1]+4)];
    }
    else{ // 男
        cp1 = [faceData.g[0],r(a[1]-9,a[1]+4)];
    }

    let res = {
        a,b,
        outline: [],
        lineWidth,
        strokeColor,
    };

    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a-b

    return res;
}
function genTopMoustacheData(faceData,lipData,color,grd){ // 生成上胡子
    let { lineWidth, lipWidth, } = lipData;
    let halfLipWidth = lipWidth/2;
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let a,b,c;
    a = [faceData.g[0]-halfLipWidth-r(40,60),faceData.g[1]-r(14,22)];
    b = [a[0]+r(-7,0),a[1]+r(15,35)];
    c = [faceData.g[0]+r(-10,0),a[1]+r(-12,12)];

    let res = {
        a,b,c,
        outline: [],
        color,
        strokeColor,
    };
    if(res.lineWidth<1){
        res.lineWidth = 1;
    }
    let cp1 = [r(b[0],b[0]+10),r(a[1],parseInt((b[1]+a[1])/2))];

    // 生成上胡子轮廓
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([1,b[0],b[1]]); // 直线 a1-b1
    res.outline.push([2,cp1[0],cp1[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([1,mirX(b[0]),b[1]]); // 直线 a2-b2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(c[0]),c[1]]); // 曲线 b2-c2

    return res;
}
function genNasoData(faceData,eyeData,gender,age){ // 生成法令纹
    let a,b;
    a = [eyeData.a[0]+r(0,10),eyeData.a[1]+r(5,20)];
    b = [a[0]-r(35,60),a[1]+r(70,100)+age*.4];
    let strokeColor = {
        r: 100,
        g: 100,
        b: 100,
    };
    let res = {
        a,b,
        outline: [],
        alpha: .8,
        strokeColor,
    };
    let cp1 = [a[0]-r(0,15),a[1]+r(20,40)+age*1.2];

    // 生成上胡子轮廓
    res.outline.push([0,a[0],a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a1-b1

    return res;
}
function genCheekData(faceData){ // 生成腮红
    let radial1 = {},radial2 = {};
    let { c, e, } = faceData;

    let weight = e[0]-r(10,40);
    let yShift = e[1]+r(55,65);
    let radius = r(55,85);

    radial1.x1 = weight;
    radial1.y1 = yShift;
    radial1.r1 = 0;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(weight);
    radial2.y1 = yShift;
    radial2.r1 = 0;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genCheekColor(2);
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: faceData.color,
        rgrd,
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: faceData.color,
        rgrd,
        noStroke:true,
    };

    // 生成双瞳
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左内瞳
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右内瞳
    return { res1, res2, };
}
function genFaceShadowData(faceData,gender,age){ // 生成脸部阴影
    let { c:fc, h:fh, i:fi, cp2:fcp2, cp3:fcp3, } = faceData;
    let occupyRate;
    if(gender==1){ // 男
        occupyRate = r(5,12);
    }
    else if(gender==2){ // 女
        occupyRate = r(8,12);
    }
    let grd = `rgba(100,100,100,.2)`;
    let side = r(0,1);

    let c,h,i,cp1,cp2,cp3;
    c = [fc[0],fc[1]];
    h = [fh[0]-occupyRate*2.4,fh[1]-41];
    i = [fi[0]-occupyRate*.2,fi[1]];
    cp2 = [fcp2[0]+occupyRate*1.3,fcp2[1]-28];
    cp3 = [fcp3[0]-occupyRate*.43,i[1]];

    let res1 = {
        outline: [],
        color: faceData.color,
        grd,
        topY: c[1],
        bottomY: i[1],
        leftX: 450,
        rightX: r(0,1)?(c[0]-500):450,
        strokeColor: {
            r: 100,
            g: 100,
            b: 250,
        },
        noStroke: true,
    };
    let res2 = {
        outline: [],
        color: faceData.color,
        grd,
        topY: c[1],
        bottomY: i[1],
        leftX: 550,
        rightX: r(0,1)?mirX(c[0]-500):550,
        strokeColor: {
            r: 100,
            g: 100,
            b: 250,
        },
        noStroke: true,
    };

    // 生成阴影
    if(side==0){
        res1.outline.push([0,c[0],c[1]]); // 移动
        res1.outline.push([2,cp2[0],cp2[1],h[0],h[1]]);
        res1.outline.push([2,cp3[0],cp3[1],i[0],i[1]]);
        res1.outline.push([1,c[0]-100,i[1]]);
        res1.outline.push([1,c[0]-100,c[1]]);
        res1.outline.push([1,c[0],c[1]]);
    }
    else{
        res2.outline.push([0,mirX(c[0]),c[1]]); // 移动
        res2.outline.push([2,mirX(cp2[0]),cp2[1],mirX(h[0]),h[1]]);
        res2.outline.push([2,mirX(cp3[0]),cp3[1],mirX(i[0]),i[1]]);
        res2.outline.push([1,mirX(c[0]-100),i[1]]);
        res2.outline.push([1,mirX(c[0]-100),c[1]]);
        res2.outline.push([1,mirX(c[0]),c[1]]);
    }
    return { res1, res2, };
}
function genEyeShadowData(faceData,eyeData){ // 生成眼影
    let res1 = {}, res2 = {};
    let { a, b, c, cp1, cp2, } = eyeData;
    let { color, } = faceData;

    let _a = [a[0],a[1]];
    let _b = [b[0]-r(15,25),b[1]+r(-7,7)];
    let _cp1 = [cp1[0],cp1[1]-r(-5,16)];
    let _cp2 = [cp2[0],cp2[1]+r(-5,16)];

    let leftX = _b[0];
    let rightX = _a[0];
    let topY = _cp1[1];
    let bottomY = _cp2[1];

    if(_b[0]<faceData.c[0]+10){
        _b[0] = faceData.c[0]+10;
    }

    let grd = genEyeShadowColor().grd;

    res1 = {
        outline: [],
        color,
        grd,
        leftX,
        rightX,
        topY,
        bottomY,
        noStroke: true,
    }
    res2 = {
        outline: [],
        color,
        grd,
        leftX: mirX(leftX),
        rightX: mirX(rightX),
        topY,
        bottomY,
        noStroke: true,
    }

    res1.outline.push([0,_a[0],_a[1]]); // 移动
    res1.outline.push([2,_cp1[0],_cp1[1],_b[0],_b[1]]); // 曲线 a1-b1
    res1.outline.push([2,_cp2[0],_cp2[1],_a[0],_a[1]]); // 曲线 b1-a1
    res2.outline.push([0,mirX(_a[0]),_a[1]]); // 移动
    res2.outline.push([2,mirX(_cp1[0]),_cp1[1],mirX(_b[0]),_b[1]]); // 曲线 a2-b2
    res2.outline.push([2,mirX(_cp2[0]),_cp2[1],mirX(_a[0]),_a[1]]); // 曲线 b2-a2

    return { res1, res2, };
}
function genEyeSocketData(faceData,eyeData,gender,age){ // 生成眼窝
    let res1 = {}, res2 = {};
    let { a, b, c, cp1, cp2, } = eyeData;
    let { color, } = faceData;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率

    let occupyRate = r(15,25);

    let _a = [a[0]+occupyRate*.7,a[1]-occupyRate*.32];
    let _b = [faceData.c[0]+90-occupyRate*2.9,b[1]-occupyRate*.56];
    let _cp1 = [cp1[0]+25,cp1[1]-occupyRate*r(12,18)/20];
    let _cp2 = [cp1[0],_cp1[1]+r(22,103-ysr*105)];

    if(_a[0]>492){
        _a[0] = 492;
    }
    if(_b[0]<faceData.c[0]+10){
        _b[0] = faceData.c[0]+10;
    }
    if(_b[0]>b[0]-10){
        _b[0] = b[0]-10;
    }

    let leftX = c[0];
    let rightX = c[0];
    let topY = _cp1[1];
    let bottomY = cp2[1];

    if(r(1,100)<2&&age>13){ // 黑眼圈
        _cp2[1] = cp2[1]+r(15,34);
        bottomY = _cp2[1];
    }

    let alpha = r(60,95)/100;

    let grd = `rgba(10,10,10,${alpha})`;

    res1 = {
        outline: [],
        color,
        grd,
        leftX,
        rightX,
        topY,
        bottomY,
        noStroke: true,
    }
    res2 = {
        outline: [],
        color,
        grd,
        leftX: mirX(leftX),
        rightX: mirX(rightX),
        topY,
        bottomY,
        noStroke: true,
    }

    res1.outline.push([0,_a[0],_a[1]]); // 移动
    res1.outline.push([2,_cp1[0],_cp1[1],_b[0],_b[1]]); // 曲线 a1-b1
    res1.outline.push([2,_cp2[0],_cp2[1],_a[0],_a[1]]); // 曲线 b1-a1
    res2.outline.push([0,mirX(_a[0]),_a[1]]); // 移动
    res2.outline.push([2,mirX(_cp1[0]),_cp1[1],mirX(_b[0]),_b[1]]); // 曲线 a2-b2
    res2.outline.push([2,mirX(_cp2[0]),_cp2[1],mirX(_a[0]),_a[1]]); // 曲线 b2-a2

    return { res1, res2, };
}
function genBracketsData(faceData,lipData){ // 生成括号
    let res;
    let { a, b, } = lipData;
    let _a, _b, cp1;
    let strokeColor = {
        r: 40,
        g: 40,
        b: 40,
    };
    let halfHeight = r(10,15);
    let top = r(15,18);
    _a = [a[0]+r(0,9),a[1]-halfHeight*2+top];
    _b = [_a[0],a[1]+halfHeight+top];
    cp1 = [_a[0]+r(25,35),a[1]];

    res = {
        outline: [],
        alpha: .8,
        strokeColor,
    }

    res.outline.push([0,_a[0],_a[1]]); // 移动
    res.outline.push([2,cp1[0],cp1[1],_b[0],_b[1]]); // 曲线 a1-b1
    res.outline.push([0,mirX(_a[0]),_a[1]]); // 移动
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(_b[0]),_b[1]]); // 曲线 a2-b2

    return res;
}
function genCollarData(bodyData,gender,age){ // 生成锁骨
    let res;
    let a,b,c,d,e,f,g,h,i,j;
    let cp1,cp2,cp3,cp4,cp5,cp6;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    let width = bodyData.c1[0]-bodyData.e1[0];

    a = [bodyData.e1[0]+width*.2,bodyData.e1[1]+width*.16];
    b = [a[0]+width*.8,a[1]+width*.25];
    c = [b[0]+width*.3,b[1]+width*.13];
    d = [bodyData.b1[0],bodyData.b1[1]];
    e = [bodyData.c1[0],bodyData.c1[1]];
    f = [bodyData.c1[0]-width*.18,bodyData.d1[1]-width*.01];
    // g = [f[0]-width*.03,f[1]-width*.06];
    i = [bodyData.cpi1[0],bodyData.cpi1[1]+25];
    j = [i[0]-width*.05,i[1]-width*.17];

    if(c[0]>492){
        c[0] = 492;
    }
    // if(f[0]>bodyData.c[0]-20){
    //     f[0] = bodyData.c[0]-20;
    // }

    let arc = [20,10];
    let arc2 = bodyData.c1[0]-bodyData.d1[0];
    cp1 = [mid(a[0],b[0])-arc[0]*1.5,a[1]+arc[1]*1.8];
    cp2 = [mid(b[0],c[0])+arc[0],b[1]+arc[1]*.43];
    // h = [cp2[0]+width*.05,cp2[1]-width*.01];
    cp3 = [bodyData.cp11[0],bodyData.cp11[1]];
    cp4 = [bodyData.c1[0]-arc2*.12,f[1]-arc[1]*.8];
    // cp5 = [f[0]-arc2*.22,f[1]+arc2*.14];
    cp6 = [mid(i[0],j[0])+arc2*.05,j[1]+arc2*.05];

    res = {
        outline: [],
        strokeColor: {
            r: 80,
            g: 80,
            b: 80,
        },
    }

    res.outline.push([0,a[0],a[1]]); // 移动 a1
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([0,d[0],d[1]]); // 移动 d1
    res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
    res.outline.push([2,cp4[0],cp4[1],f[0],f[1]]); // 曲线 e1-f1
    // res.outline.push([0,g[0],g[1]]); // 移动到 g1
    // res.outline.push([2,cp5[0],cp5[1],h[0],h[1]]); // 曲线 f1-g1
    res.outline.push([0,i[0],i[1]]); // 移动到 i1
    res.outline.push([2,cp6[0],cp6[1],j[0],j[1]]); // 曲线 j1-j1

    res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(e[0]),e[1]]); // 曲线 d2-e2
    res.outline.push([2,mirX(cp4[0]),cp4[1],mirX(f[0]),f[1]]); // 曲线 e2-f2
    // res.outline.push([0,mirX(g[0]),g[1]]); // 移动到 g2
    // res.outline.push([2,mirX(cp5[0]),cp5[1],mirX(h[0]),h[1]]); // 曲线 g2-h2
    res.outline.push([0,mirX(i[0]),i[1]]); // 移动到 i1
    res.outline.push([2,mirX(cp6[0]),cp6[1],mirX(j[0]),j[1]]); // 曲线 j1-j1

    return res;
}
function genBreastData(bodyData,gender,age){ // 生成乳房
    let res;
    let a,b,c,d,e;
    let { muscle, color, } = bodyData;
    let cp1,cp2,cp3;
    let base = bodyData.cpi1; // 腋窝坐标
    let shoulderWidth = bodyData.f1[0]-bodyData.e1[0]; // 肩宽
    let nipple; // 乳头坐标
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(gender==1){ // 胸肌
        res = {
            outline: [],
            color,
            strokeColor: {
                r: 0,
                g: 0,
                b: 0,
            },
            lineWidth: 1.5,
            nipple: [bodyData.i21[0]+75-ysr*40,bodyData.i21[1]+25-ysr*25+r(-5,5)],
        }
        a = [base[0]-14+ysr*30,base[1]-32+ysr*64];
        b = [a[0]+90-ysr*40,a[1]+150-ysr*94];
        c = [b[0]+150-ysr*80,b[1]-12];
        if(c[0]>490){
            c[0] = 490;
        }
        d = [c[0]+80,a[1]+5];
        e = [c[0]+40,a[1]+75-ysr*75];
        if(d[0]>497){
            d[0] = 497;
        }
        if(e[0]>495){
            e[0] = 495;
        }
        cp1 = [b[0]-60+ysr*40,b[1]-3];
        cp2 = [e[0]+10,d[1]-18];

        res.outline.push([0,a[0],a[1]]); // 移动 a1
        res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
        res.outline.push([1,c[0],c[1]]); // 直线 b1-c1
        res.outline.push([0,d[0],d[1]]); // 移动 d1
        res.outline.push([1,e[0],e[1]]); // 直线 d1-e1
        res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
        res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
        res.outline.push([1,mirX(c[0]),c[1]]); // 直线 b2-c2
        res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d1
        res.outline.push([1,mirX(e[0]),e[1]]); // 直线 d1-e1
    }
    else if(gender==2){ // 乳房
        let size; // [1.75,5.3]
        if(age>=50){
            size = r(35,150-age)*.05;
        }
        else if(age>=18){
            size = r(50,106)*.05;
        }
        else if(age>=14){
            size = r(35,80)*.05;
        }
        else{
            size = r(35,40)*.05;
        }

        let qtSize = Math.round(size); // [1,3.16]
        let left = (3.2-qtSize)*.8;
        let weight = r(1,10-ysr*25); // [1,10]
        if(age>=50){
            weight += age/5;
        }
        if(weight>10){
            weight = 10;
        }
        if(weight<1){
            weight = 1;
        }

        // size = 5.5; // TODO
        // qtSize = Math.round(size); // TODO
        // weight = 1; //  TODO

        let top = 35-size*10;
        let round = qtSize*6+5;
        let showGap = false;

        a = [base[0]+left,base[1]+top];
        if(a[0]<bodyData.i21[0]){
            a[0] = bodyData.i21[0];
        }
        b = [base[0]+left+(5-size)*7+weight*3,base[1]+15+size*35+top];
        c = [base[0]+left+130+weight*1.5,base[1]+10+size*33+top];
        if(b[0]<base[0]+10||b[1]>base[1]+140){
            showGap = true;
        }
        if(showGap){
            d = [c[0]+(500-c[0])*.8,base[1]+size*7+30+top*.5];
            e = [500-(30-qtSize*5)+5+weight*1,base[1]+top*.5];
            if(d[0]>496){
                d[0] = 496;
            }
            if(e[0]>500){
                e[0] = 500;
            }
        }
        nipple = [b[0]+20-ysr*1+r(-20+ysr*20,5-ysr*5),b[1]-qtSize*3-20-ysr*20+r(-20+ysr*20,20-ysr*20)];

        cp1 = [mid(a[0],b[0])-round*1.6,mid(a[1],b[1])+qtSize*8];
        cp2 = [mid(b[0],c[0]),mid(b[1],c[1])+round*1.3];
        if(showGap){
            cp3 = [mid(d[0],e[0])+round*.2,mid(d[1],e[1])];
            if(cp3[0]>510){
                cp3[0] = 510;
            }
        }
        // let topY = cp2[1]-20-size*2.2;
        // if(topY>1199){
        //     topY = 1199;
        // }
        res = {
            a,b,c,d,e,
            cp1,cp2,cp3,
            outline: [],
            color,
            strokeColor: {
                r: 0,
                g: 0,
                b: 0,
                alpha: 0,
            },
            lineWidth: 1,
            noStroke: size<3&&r(8,16)>age,
            nipple,
            size,
            weight,
            showGap,
        }

        res.outline.push([0,a[0],a[1]]); // 移动 a1
        res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
        res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
        if(showGap){
            res.outline.push([0,d[0],d[1]]); // 移动 d1
            res.outline.push([2,cp3[0],cp3[1],e[0],e[1]]); // 曲线 d1-e1
        }

        res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
        res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
        res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
        if(showGap){
            res.outline.push([0,mirX(d[0]),d[1]]); // 移动 d2
            res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(e[0]),e[1]]); // 曲线 d2-e2
        }
    }
    return res;
}
function genBreastOutlineData(breastData,gender,age){ // 生成乳房轮廓
    let res;
    let { showGap, outline, } = breastData;
    if(gender==1){
        let a = [outline[0][1],outline[0][2],];
        let c = [outline[2][1],outline[2][2],];
        res = {
            outline: [],
            strokeColor: {
                r: 255,
                g: 0,
                b: 100,
            },
            noStroke: true,
        };
        for(let i=0;i<3;i++){
            res.outline.push(outline[i]);
        }
        let rX = c[0]+150;
        if(rX>500){
            rX = 500;
        }
        res.outline.push([1,rX,c[1]]); // 直线
        res.outline.push([1,rX,a[1]-100]); // 直线
        res.outline.push([1,a[0],a[1]-100]); // 直线
        res.outline.push([1,a[0],a[1]]); // 直线
        for(let i=5;i<8;i++){
            res.outline.push(outline[i]);
        }
        res.outline.push([1,mirX(rX),c[1]]); // 直线
        res.outline.push([1,mirX(rX),a[1]-100]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]-100]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]]); // 直线
    }
    else if(gender==2){
        let a = [outline[0][1],outline[0][2],];
        let c = [outline[2][3],outline[2][4],];
        res = {
            outline: [],
            strokeColor: {
                r: 255,
                g: 0,
                b: 100,
            },
            // test: 2,
            noStroke: true,
        };
        for(let i=0;i<3;i++){
            res.outline.push(outline[i]);
        }
        res.outline.push([1,500,c[1]]); // 直线
        res.outline.push([1,500,a[1]-130]); // 直线
        res.outline.push([1,a[0],a[1]-130]); // 直线
        res.outline.push([1,a[0],a[1]]); // 直线
        if(showGap){
            for(let i=5;i<8;i++){
                res.outline.push(outline[i]);
            }
        }
        else{
            for(let i=3;i<6;i++){
                res.outline.push(outline[i]);
            }
        }
        res.outline.push([1,500,c[1]]); // 直线
        res.outline.push([1,500,a[1]-130]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]-130]); // 直线
        res.outline.push([1,mirX(a[0]),a[1]]); // 直线
    }

    return res;
}
function genBreastShadowData(bodyData,breastData,gender,age){ // 生成乳房阴影
    let res;
    let { showGap, outline, size, nipple, } = breastData;
    let _a = [outline[0][1],outline[0][2]];
    let _b = [outline[1][3],outline[1][4]];
    let _c = [outline[2][3],outline[2][4]];
    let _cp1 = [outline[1][1],outline[1][2]];
    let _cp2 = [outline[2][1],outline[2][2]];
    let a,b,c;
    let cp1,cp2,cp3;
    let radial = {}, radius = 0;
    let bodyColor = bodyData.color;

    radius = Math.sqrt(size)*180;

    a = [_a[0],_a[1]];
    b = [_b[0],_b[1]];
    c = [_c[0],_c[1]];
    cp1 = [_cp1[0],_cp1[1]];
    cp2 = [_cp2[0],_cp2[1]];
    cp3 = [_cp1[0]-size*3,b[1]+size*31];

    if(size<2.5){
        cp3[1] -= 9*(2.5-size);
    }

    radial.x1 = 500;
    radial.y1 = nipple[1];
    radial.r1 = 0;
    radial.x2 = radial.x1;
    radial.y2 = radial.y1;
    radial.r2 = radius;

    res = {
        outline: [],
        color: bodyData.color,
        rgrd: `rgba(${20},${20},${20})`,
        radial,
        noStroke: true,
        // strokeColor: {
        //     r: 255,
        //     g: 20,
        //     b: 0,
        // }
    }

    res.outline.push([0,a[0],a[1]]); // 移动 a1
    res.outline.push([2,cp1[0],cp1[1],b[0],b[1]]); // 曲线 a1-b1
    res.outline.push([2,cp2[0],cp2[1],c[0],c[1]]); // 曲线 b1-c1
    res.outline.push([2,cp3[0],cp3[1],a[0],a[1]]); // 曲线 c1-a1
    res.outline.push([0,mirX(a[0]),a[1]]); // 移动 a2
    res.outline.push([2,mirX(cp1[0]),cp1[1],mirX(b[0]),b[1]]); // 曲线 a2-b2
    res.outline.push([2,mirX(cp2[0]),cp2[1],mirX(c[0]),c[1]]); // 曲线 b2-c2
    res.outline.push([2,mirX(cp3[0]),cp3[1],mirX(a[0]),a[1]]); // 曲线 c2-a2

    return res;
}
function genAreolaData(bodyData,breastData,gender,age){ // 生成乳晕
    let nipple;
    let ysr = 1-shrinkYoung(age); // 年幼影响比率
    if(breastData&&breastData.nipple){
        nipple = breastData.nipple;
    }
    else{
        nipple = [bodyData.i21[0]+75-ysr*40,bodyData.i21[1]+25-ysr*25+r(-5,5)];
    }
    let radial1 = {},radial2 = {};

    let radius;
    if(gender==1){ // 男
        radius = r(15,25);
    }
    else if(gender==2){ // 女
        radius = r(15,45);
    }

    radial1.x1 = nipple[0];
    radial1.y1 = nipple[1];
    radial1.r1 = 0;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(nipple[0]);
    radial2.y1 = nipple[1];
    radial2.r1 = 0;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genAreolaColor();
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: bodyData.color,
        rgrd,
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: bodyData.color,
        rgrd,
        noStroke:true,
    };

    // 生成乳晕
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左乳晕
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右乳晕
    return { res1, res2, nipple, };
}
function genNippleData(bodyData,nipple,gender,age){ // 生成乳头
    let radial1 = {},radial2 = {};

    let radius = r(8,10);

    radial1.x1 = nipple[0];
    radial1.y1 = nipple[1];
    radial1.r1 = radius*3/5;
    radial1.x2 = radial1.x1;
    radial1.y2 = radial1.y1;
    radial1.r2 = radius;

    radial2.x1 = mirX(nipple[0]);
    radial2.y1 = nipple[1];
    radial2.r1 = radius*3/5;
    radial2.x2 = radial2.x1;
    radial2.y2 = radial2.y1;
    radial2.r2 = radius;

    let cheeckColor = genNippleColor();
    let {color,rgrd,} = cheeckColor;

    let res1 = {
        radial: radial1,
        outline: [],
        color: bodyData.color,
        rgrd,
        strokeColor: {
            r: 255,
            g: 10,
            b: 10,
            alpha: .9,
        },
        noStroke:true,
    };
    let res2 = {
        radial: radial2,
        outline: [],
        color: bodyData.color,
        rgrd,
        strokeColor: {
            r: 255,
            g: 10,
            b: 10,
            alpha: .9,
        },
        noStroke:true,
    };

    // 生成乳头
    res1.outline.push([0,radial1.x1,radial1.y1]); // 移动
    res1.outline.push([3,radial1.r2,radial1.x1,radial1.y1]); // 左乳头
    res2.outline.push([0,radial2.x1,radial2.y1]); // 移动
    res2.outline.push([3,radial2.r2,radial2.x1,radial2.y1]); // 右乳头
    return { res1, res2, };
}



























//
